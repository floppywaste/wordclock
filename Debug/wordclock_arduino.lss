
wordclock_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  000020ca  0000215e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001b0  008001b0  0000220e  2**0
                  ALLOC
  3 .stab         0000354c  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001964  00000000  00000000  0000575c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ec       	ldi	r30, 0xCA	; 202
      7c:	f0 e2       	ldi	r31, 0x20	; 32
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 3b       	cpi	r26, 0xB0	; 176
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 eb       	ldi	r26, 0xB0	; 176
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3b       	cpi	r26, 0xB6	; 182
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <main>
      9e:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <shiftOut>:
#include "DS1302.h"
#include <avr/io.h>
#include <util/delay.h>

void shiftOut(uint8_t val) {
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	60 97       	sbiw	r28, 0x10	; 16
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	f8 94       	cli
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	cd bf       	out	0x3d, r28	; 61
      ba:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t i;
	DS1302_CLK_0;
      bc:	a5 e2       	ldi	r26, 0x25	; 37
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	e5 e2       	ldi	r30, 0x25	; 37
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	8e 7f       	andi	r24, 0xFE	; 254
      c8:	8c 93       	st	X, r24
	for (i = 0; i < 8; i++) {
      ca:	1f 86       	std	Y+15, r1	; 0x0f
      cc:	a3 c0       	rjmp	.+326    	; 0x214 <shiftOut+0x16e>
		if (val & (1 << i))
      ce:	88 89       	ldd	r24, Y+16	; 0x10
      d0:	28 2f       	mov	r18, r24
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	8f 85       	ldd	r24, Y+15	; 0x0f
      d6:	88 2f       	mov	r24, r24
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	a9 01       	movw	r20, r18
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <shiftOut+0x3c>
      de:	55 95       	asr	r21
      e0:	47 95       	ror	r20
      e2:	8a 95       	dec	r24
      e4:	e2 f7       	brpl	.-8      	; 0xde <shiftOut+0x38>
      e6:	ca 01       	movw	r24, r20
      e8:	81 70       	andi	r24, 0x01	; 1
      ea:	90 70       	andi	r25, 0x00	; 0
      ec:	88 23       	and	r24, r24
      ee:	41 f0       	breq	.+16     	; 0x100 <shiftOut+0x5a>
			DS1302_IO_1;
      f0:	a5 e2       	ldi	r26, 0x25	; 37
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	e5 e2       	ldi	r30, 0x25	; 37
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	82 60       	ori	r24, 0x02	; 2
      fc:	8c 93       	st	X, r24
      fe:	07 c0       	rjmp	.+14     	; 0x10e <shiftOut+0x68>
		else
			DS1302_IO_0;
     100:	a5 e2       	ldi	r26, 0x25	; 37
     102:	b0 e0       	ldi	r27, 0x00	; 0
     104:	e5 e2       	ldi	r30, 0x25	; 37
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	8d 7f       	andi	r24, 0xFD	; 253
     10c:	8c 93       	st	X, r24
		DS1302_CLK_1;
     10e:	a5 e2       	ldi	r26, 0x25	; 37
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	e5 e2       	ldi	r30, 0x25	; 37
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	81 60       	ori	r24, 0x01	; 1
     11a:	8c 93       	st	X, r24
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	a0 e8       	ldi	r26, 0x80	; 128
     122:	bf e3       	ldi	r27, 0x3F	; 63
     124:	8b 87       	std	Y+11, r24	; 0x0b
     126:	9c 87       	std	Y+12, r25	; 0x0c
     128:	ad 87       	std	Y+13, r26	; 0x0d
     12a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     12c:	6b 85       	ldd	r22, Y+11	; 0x0b
     12e:	7c 85       	ldd	r23, Y+12	; 0x0c
     130:	8d 85       	ldd	r24, Y+13	; 0x0d
     132:	9e 85       	ldd	r25, Y+14	; 0x0e
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	4a e7       	ldi	r20, 0x7A	; 122
     13a:	55 e4       	ldi	r21, 0x45	; 69
     13c:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     140:	dc 01       	movw	r26, r24
     142:	cb 01       	movw	r24, r22
     144:	8f 83       	std	Y+7, r24	; 0x07
     146:	98 87       	std	Y+8, r25	; 0x08
     148:	a9 87       	std	Y+9, r26	; 0x09
     14a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     14c:	6f 81       	ldd	r22, Y+7	; 0x07
     14e:	78 85       	ldd	r23, Y+8	; 0x08
     150:	89 85       	ldd	r24, Y+9	; 0x09
     152:	9a 85       	ldd	r25, Y+10	; 0x0a
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__ltsf2>
     160:	88 23       	and	r24, r24
     162:	2c f4       	brge	.+10     	; 0x16e <shiftOut+0xc8>
		__ticks = 1;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	9e 83       	std	Y+6, r25	; 0x06
     16a:	8d 83       	std	Y+5, r24	; 0x05
     16c:	3f c0       	rjmp	.+126    	; 0x1ec <shiftOut+0x146>
	else if (__tmp > 65535)
     16e:	6f 81       	ldd	r22, Y+7	; 0x07
     170:	78 85       	ldd	r23, Y+8	; 0x08
     172:	89 85       	ldd	r24, Y+9	; 0x09
     174:	9a 85       	ldd	r25, Y+10	; 0x0a
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	3f ef       	ldi	r19, 0xFF	; 255
     17a:	4f e7       	ldi	r20, 0x7F	; 127
     17c:	57 e4       	ldi	r21, 0x47	; 71
     17e:	0e 94 03 0b 	call	0x1606	; 0x1606 <__gtsf2>
     182:	18 16       	cp	r1, r24
     184:	4c f5       	brge	.+82     	; 0x1d8 <shiftOut+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     186:	6b 85       	ldd	r22, Y+11	; 0x0b
     188:	7c 85       	ldd	r23, Y+12	; 0x0c
     18a:	8d 85       	ldd	r24, Y+13	; 0x0d
     18c:	9e 85       	ldd	r25, Y+14	; 0x0e
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	40 e2       	ldi	r20, 0x20	; 32
     194:	51 e4       	ldi	r21, 0x41	; 65
     196:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     19a:	dc 01       	movw	r26, r24
     19c:	cb 01       	movw	r24, r22
     19e:	bc 01       	movw	r22, r24
     1a0:	cd 01       	movw	r24, r26
     1a2:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	9e 83       	std	Y+6, r25	; 0x06
     1ac:	8d 83       	std	Y+5, r24	; 0x05
     1ae:	0f c0       	rjmp	.+30     	; 0x1ce <shiftOut+0x128>
     1b0:	80 e9       	ldi	r24, 0x90	; 144
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	9c 83       	std	Y+4, r25	; 0x04
     1b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	9c 81       	ldd	r25, Y+4	; 0x04
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <shiftOut+0x116>
     1c0:	9c 83       	std	Y+4, r25	; 0x04
     1c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1c4:	8d 81       	ldd	r24, Y+5	; 0x05
     1c6:	9e 81       	ldd	r25, Y+6	; 0x06
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	9e 83       	std	Y+6, r25	; 0x06
     1cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ce:	8d 81       	ldd	r24, Y+5	; 0x05
     1d0:	9e 81       	ldd	r25, Y+6	; 0x06
     1d2:	00 97       	sbiw	r24, 0x00	; 0
     1d4:	69 f7       	brne	.-38     	; 0x1b0 <shiftOut+0x10a>
     1d6:	14 c0       	rjmp	.+40     	; 0x200 <shiftOut+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1d8:	6f 81       	ldd	r22, Y+7	; 0x07
     1da:	78 85       	ldd	r23, Y+8	; 0x08
     1dc:	89 85       	ldd	r24, Y+9	; 0x09
     1de:	9a 85       	ldd	r25, Y+10	; 0x0a
     1e0:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	9e 83       	std	Y+6, r25	; 0x06
     1ea:	8d 83       	std	Y+5, r24	; 0x05
     1ec:	8d 81       	ldd	r24, Y+5	; 0x05
     1ee:	9e 81       	ldd	r25, Y+6	; 0x06
     1f0:	9a 83       	std	Y+2, r25	; 0x02
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	9a 81       	ldd	r25, Y+2	; 0x02
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <shiftOut+0x152>
     1fc:	9a 83       	std	Y+2, r25	; 0x02
     1fe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		DS1302_CLK_0;
     200:	a5 e2       	ldi	r26, 0x25	; 37
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	e5 e2       	ldi	r30, 0x25	; 37
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	8e 7f       	andi	r24, 0xFE	; 254
     20c:	8c 93       	st	X, r24
#include <util/delay.h>

void shiftOut(uint8_t val) {
	uint8_t i;
	DS1302_CLK_0;
	for (i = 0; i < 8; i++) {
     20e:	8f 85       	ldd	r24, Y+15	; 0x0f
     210:	8f 5f       	subi	r24, 0xFF	; 255
     212:	8f 87       	std	Y+15, r24	; 0x0f
     214:	8f 85       	ldd	r24, Y+15	; 0x0f
     216:	88 30       	cpi	r24, 0x08	; 8
     218:	08 f4       	brcc	.+2      	; 0x21c <shiftOut+0x176>
     21a:	59 cf       	rjmp	.-334    	; 0xce <shiftOut+0x28>
			DS1302_IO_0;
		DS1302_CLK_1;
		_delay_ms(1);
		DS1302_CLK_0;
	}
}
     21c:	60 96       	adiw	r28, 0x10	; 16
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	de bf       	out	0x3e, r29	; 62
     224:	0f be       	out	0x3f, r0	; 63
     226:	cd bf       	out	0x3d, r28	; 61
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <_write_out>:

void _write_out(uint8_t value) {
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	ad 97       	sbiw	r28, 0x2d	; 45
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	8d a7       	std	Y+45, r24	; 0x2d
	DS1302_IO_DIR_OUT;
     244:	a4 e2       	ldi	r26, 0x24	; 36
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	e4 e2       	ldi	r30, 0x24	; 36
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	82 60       	ori	r24, 0x02	; 2
     250:	8c 93       	st	X, r24
	for (int i = 0; i < 8; i++) {
     252:	1c a6       	std	Y+44, r1	; 0x2c
     254:	1b a6       	std	Y+43, r1	; 0x2b
     256:	82 c1       	rjmp	.+772    	; 0x55c <_write_out+0x32e>
		DS1302_CLK_0;
     258:	a5 e2       	ldi	r26, 0x25	; 37
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	e5 e2       	ldi	r30, 0x25	; 37
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	8e 7f       	andi	r24, 0xFE	; 254
     264:	8c 93       	st	X, r24
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	a0 e8       	ldi	r26, 0x80	; 128
     26c:	bf e3       	ldi	r27, 0x3F	; 63
     26e:	8f a3       	std	Y+39, r24	; 0x27
     270:	98 a7       	std	Y+40, r25	; 0x28
     272:	a9 a7       	std	Y+41, r26	; 0x29
     274:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     276:	6f a1       	ldd	r22, Y+39	; 0x27
     278:	78 a5       	ldd	r23, Y+40	; 0x28
     27a:	89 a5       	ldd	r24, Y+41	; 0x29
     27c:	9a a5       	ldd	r25, Y+42	; 0x2a
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	4a e7       	ldi	r20, 0x7A	; 122
     284:	55 e4       	ldi	r21, 0x45	; 69
     286:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	8b a3       	std	Y+35, r24	; 0x23
     290:	9c a3       	std	Y+36, r25	; 0x24
     292:	ad a3       	std	Y+37, r26	; 0x25
     294:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     296:	6b a1       	ldd	r22, Y+35	; 0x23
     298:	7c a1       	ldd	r23, Y+36	; 0x24
     29a:	8d a1       	ldd	r24, Y+37	; 0x25
     29c:	9e a1       	ldd	r25, Y+38	; 0x26
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e8       	ldi	r20, 0x80	; 128
     2a4:	5f e3       	ldi	r21, 0x3F	; 63
     2a6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__ltsf2>
     2aa:	88 23       	and	r24, r24
     2ac:	2c f4       	brge	.+10     	; 0x2b8 <_write_out+0x8a>
		__ticks = 1;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	9a a3       	std	Y+34, r25	; 0x22
     2b4:	89 a3       	std	Y+33, r24	; 0x21
     2b6:	3f c0       	rjmp	.+126    	; 0x336 <_write_out+0x108>
	else if (__tmp > 65535)
     2b8:	6b a1       	ldd	r22, Y+35	; 0x23
     2ba:	7c a1       	ldd	r23, Y+36	; 0x24
     2bc:	8d a1       	ldd	r24, Y+37	; 0x25
     2be:	9e a1       	ldd	r25, Y+38	; 0x26
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	4f e7       	ldi	r20, 0x7F	; 127
     2c6:	57 e4       	ldi	r21, 0x47	; 71
     2c8:	0e 94 03 0b 	call	0x1606	; 0x1606 <__gtsf2>
     2cc:	18 16       	cp	r1, r24
     2ce:	4c f5       	brge	.+82     	; 0x322 <_write_out+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2d0:	6f a1       	ldd	r22, Y+39	; 0x27
     2d2:	78 a5       	ldd	r23, Y+40	; 0x28
     2d4:	89 a5       	ldd	r24, Y+41	; 0x29
     2d6:	9a a5       	ldd	r25, Y+42	; 0x2a
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e2       	ldi	r20, 0x20	; 32
     2de:	51 e4       	ldi	r21, 0x41	; 65
     2e0:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	9a a3       	std	Y+34, r25	; 0x22
     2f6:	89 a3       	std	Y+33, r24	; 0x21
     2f8:	0f c0       	rjmp	.+30     	; 0x318 <_write_out+0xea>
     2fa:	80 e9       	ldi	r24, 0x90	; 144
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	98 a3       	std	Y+32, r25	; 0x20
     300:	8f 8f       	std	Y+31, r24	; 0x1f
     302:	8f 8d       	ldd	r24, Y+31	; 0x1f
     304:	98 a1       	ldd	r25, Y+32	; 0x20
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <_write_out+0xd8>
     30a:	98 a3       	std	Y+32, r25	; 0x20
     30c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     30e:	89 a1       	ldd	r24, Y+33	; 0x21
     310:	9a a1       	ldd	r25, Y+34	; 0x22
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	9a a3       	std	Y+34, r25	; 0x22
     316:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     318:	89 a1       	ldd	r24, Y+33	; 0x21
     31a:	9a a1       	ldd	r25, Y+34	; 0x22
     31c:	00 97       	sbiw	r24, 0x00	; 0
     31e:	69 f7       	brne	.-38     	; 0x2fa <_write_out+0xcc>
     320:	14 c0       	rjmp	.+40     	; 0x34a <_write_out+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     322:	6b a1       	ldd	r22, Y+35	; 0x23
     324:	7c a1       	ldd	r23, Y+36	; 0x24
     326:	8d a1       	ldd	r24, Y+37	; 0x25
     328:	9e a1       	ldd	r25, Y+38	; 0x26
     32a:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     32e:	dc 01       	movw	r26, r24
     330:	cb 01       	movw	r24, r22
     332:	9a a3       	std	Y+34, r25	; 0x22
     334:	89 a3       	std	Y+33, r24	; 0x21
     336:	89 a1       	ldd	r24, Y+33	; 0x21
     338:	9a a1       	ldd	r25, Y+34	; 0x22
     33a:	9e 8f       	std	Y+30, r25	; 0x1e
     33c:	8d 8f       	std	Y+29, r24	; 0x1d
     33e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     340:	9e 8d       	ldd	r25, Y+30	; 0x1e
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <_write_out+0x114>
     346:	9e 8f       	std	Y+30, r25	; 0x1e
     348:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		if (value & 0x01)
     34a:	8d a5       	ldd	r24, Y+45	; 0x2d
     34c:	88 2f       	mov	r24, r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	81 70       	andi	r24, 0x01	; 1
     352:	90 70       	andi	r25, 0x00	; 0
     354:	88 23       	and	r24, r24
     356:	41 f0       	breq	.+16     	; 0x368 <_write_out+0x13a>
			DS1302_IO_1;
     358:	a5 e2       	ldi	r26, 0x25	; 37
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	e5 e2       	ldi	r30, 0x25	; 37
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	82 60       	ori	r24, 0x02	; 2
     364:	8c 93       	st	X, r24
     366:	07 c0       	rjmp	.+14     	; 0x376 <_write_out+0x148>
		else
			DS1302_IO_0;
     368:	a5 e2       	ldi	r26, 0x25	; 37
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	e5 e2       	ldi	r30, 0x25	; 37
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8d 7f       	andi	r24, 0xFD	; 253
     374:	8c 93       	st	X, r24
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	a0 e8       	ldi	r26, 0x80	; 128
     37c:	bf e3       	ldi	r27, 0x3F	; 63
     37e:	89 8f       	std	Y+25, r24	; 0x19
     380:	9a 8f       	std	Y+26, r25	; 0x1a
     382:	ab 8f       	std	Y+27, r26	; 0x1b
     384:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     386:	69 8d       	ldd	r22, Y+25	; 0x19
     388:	7a 8d       	ldd	r23, Y+26	; 0x1a
     38a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     38c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	4a e7       	ldi	r20, 0x7A	; 122
     394:	55 e4       	ldi	r21, 0x45	; 69
     396:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	8d 8b       	std	Y+21, r24	; 0x15
     3a0:	9e 8b       	std	Y+22, r25	; 0x16
     3a2:	af 8b       	std	Y+23, r26	; 0x17
     3a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     3a6:	6d 89       	ldd	r22, Y+21	; 0x15
     3a8:	7e 89       	ldd	r23, Y+22	; 0x16
     3aa:	8f 89       	ldd	r24, Y+23	; 0x17
     3ac:	98 8d       	ldd	r25, Y+24	; 0x18
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e8       	ldi	r20, 0x80	; 128
     3b4:	5f e3       	ldi	r21, 0x3F	; 63
     3b6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__ltsf2>
     3ba:	88 23       	and	r24, r24
     3bc:	2c f4       	brge	.+10     	; 0x3c8 <_write_out+0x19a>
		__ticks = 1;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	9c 8b       	std	Y+20, r25	; 0x14
     3c4:	8b 8b       	std	Y+19, r24	; 0x13
     3c6:	3f c0       	rjmp	.+126    	; 0x446 <_write_out+0x218>
	else if (__tmp > 65535)
     3c8:	6d 89       	ldd	r22, Y+21	; 0x15
     3ca:	7e 89       	ldd	r23, Y+22	; 0x16
     3cc:	8f 89       	ldd	r24, Y+23	; 0x17
     3ce:	98 8d       	ldd	r25, Y+24	; 0x18
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	3f ef       	ldi	r19, 0xFF	; 255
     3d4:	4f e7       	ldi	r20, 0x7F	; 127
     3d6:	57 e4       	ldi	r21, 0x47	; 71
     3d8:	0e 94 03 0b 	call	0x1606	; 0x1606 <__gtsf2>
     3dc:	18 16       	cp	r1, r24
     3de:	4c f5       	brge	.+82     	; 0x432 <_write_out+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3e0:	69 8d       	ldd	r22, Y+25	; 0x19
     3e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e2       	ldi	r20, 0x20	; 32
     3ee:	51 e4       	ldi	r21, 0x41	; 65
     3f0:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     3f4:	dc 01       	movw	r26, r24
     3f6:	cb 01       	movw	r24, r22
     3f8:	bc 01       	movw	r22, r24
     3fa:	cd 01       	movw	r24, r26
     3fc:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     400:	dc 01       	movw	r26, r24
     402:	cb 01       	movw	r24, r22
     404:	9c 8b       	std	Y+20, r25	; 0x14
     406:	8b 8b       	std	Y+19, r24	; 0x13
     408:	0f c0       	rjmp	.+30     	; 0x428 <_write_out+0x1fa>
     40a:	80 e9       	ldi	r24, 0x90	; 144
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	9a 8b       	std	Y+18, r25	; 0x12
     410:	89 8b       	std	Y+17, r24	; 0x11
     412:	89 89       	ldd	r24, Y+17	; 0x11
     414:	9a 89       	ldd	r25, Y+18	; 0x12
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <_write_out+0x1e8>
     41a:	9a 8b       	std	Y+18, r25	; 0x12
     41c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     41e:	8b 89       	ldd	r24, Y+19	; 0x13
     420:	9c 89       	ldd	r25, Y+20	; 0x14
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	9c 8b       	std	Y+20, r25	; 0x14
     426:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     428:	8b 89       	ldd	r24, Y+19	; 0x13
     42a:	9c 89       	ldd	r25, Y+20	; 0x14
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	69 f7       	brne	.-38     	; 0x40a <_write_out+0x1dc>
     430:	14 c0       	rjmp	.+40     	; 0x45a <_write_out+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     432:	6d 89       	ldd	r22, Y+21	; 0x15
     434:	7e 89       	ldd	r23, Y+22	; 0x16
     436:	8f 89       	ldd	r24, Y+23	; 0x17
     438:	98 8d       	ldd	r25, Y+24	; 0x18
     43a:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	9c 8b       	std	Y+20, r25	; 0x14
     444:	8b 8b       	std	Y+19, r24	; 0x13
     446:	8b 89       	ldd	r24, Y+19	; 0x13
     448:	9c 89       	ldd	r25, Y+20	; 0x14
     44a:	98 8b       	std	Y+16, r25	; 0x10
     44c:	8f 87       	std	Y+15, r24	; 0x0f
     44e:	8f 85       	ldd	r24, Y+15	; 0x0f
     450:	98 89       	ldd	r25, Y+16	; 0x10
     452:	01 97       	sbiw	r24, 0x01	; 1
     454:	f1 f7       	brne	.-4      	; 0x452 <_write_out+0x224>
     456:	98 8b       	std	Y+16, r25	; 0x10
     458:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DS1302_CLK_1;
     45a:	a5 e2       	ldi	r26, 0x25	; 37
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e5 e2       	ldi	r30, 0x25	; 37
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	81 60       	ori	r24, 0x01	; 1
     466:	8c 93       	st	X, r24
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	a0 e8       	ldi	r26, 0x80	; 128
     46e:	bf e3       	ldi	r27, 0x3F	; 63
     470:	8b 87       	std	Y+11, r24	; 0x0b
     472:	9c 87       	std	Y+12, r25	; 0x0c
     474:	ad 87       	std	Y+13, r26	; 0x0d
     476:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     478:	6b 85       	ldd	r22, Y+11	; 0x0b
     47a:	7c 85       	ldd	r23, Y+12	; 0x0c
     47c:	8d 85       	ldd	r24, Y+13	; 0x0d
     47e:	9e 85       	ldd	r25, Y+14	; 0x0e
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	4a e7       	ldi	r20, 0x7A	; 122
     486:	55 e4       	ldi	r21, 0x45	; 69
     488:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	8f 83       	std	Y+7, r24	; 0x07
     492:	98 87       	std	Y+8, r25	; 0x08
     494:	a9 87       	std	Y+9, r26	; 0x09
     496:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     498:	6f 81       	ldd	r22, Y+7	; 0x07
     49a:	78 85       	ldd	r23, Y+8	; 0x08
     49c:	89 85       	ldd	r24, Y+9	; 0x09
     49e:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	40 e8       	ldi	r20, 0x80	; 128
     4a6:	5f e3       	ldi	r21, 0x3F	; 63
     4a8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__ltsf2>
     4ac:	88 23       	and	r24, r24
     4ae:	2c f4       	brge	.+10     	; 0x4ba <_write_out+0x28c>
		__ticks = 1;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	9e 83       	std	Y+6, r25	; 0x06
     4b6:	8d 83       	std	Y+5, r24	; 0x05
     4b8:	3f c0       	rjmp	.+126    	; 0x538 <_write_out+0x30a>
	else if (__tmp > 65535)
     4ba:	6f 81       	ldd	r22, Y+7	; 0x07
     4bc:	78 85       	ldd	r23, Y+8	; 0x08
     4be:	89 85       	ldd	r24, Y+9	; 0x09
     4c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	3f ef       	ldi	r19, 0xFF	; 255
     4c6:	4f e7       	ldi	r20, 0x7F	; 127
     4c8:	57 e4       	ldi	r21, 0x47	; 71
     4ca:	0e 94 03 0b 	call	0x1606	; 0x1606 <__gtsf2>
     4ce:	18 16       	cp	r1, r24
     4d0:	4c f5       	brge	.+82     	; 0x524 <_write_out+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4d2:	6b 85       	ldd	r22, Y+11	; 0x0b
     4d4:	7c 85       	ldd	r23, Y+12	; 0x0c
     4d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     4d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	40 e2       	ldi	r20, 0x20	; 32
     4e0:	51 e4       	ldi	r21, 0x41	; 65
     4e2:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	bc 01       	movw	r22, r24
     4ec:	cd 01       	movw	r24, r26
     4ee:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     4f2:	dc 01       	movw	r26, r24
     4f4:	cb 01       	movw	r24, r22
     4f6:	9e 83       	std	Y+6, r25	; 0x06
     4f8:	8d 83       	std	Y+5, r24	; 0x05
     4fa:	0f c0       	rjmp	.+30     	; 0x51a <_write_out+0x2ec>
     4fc:	80 e9       	ldi	r24, 0x90	; 144
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	9c 83       	std	Y+4, r25	; 0x04
     502:	8b 83       	std	Y+3, r24	; 0x03
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <_write_out+0x2da>
     50c:	9c 83       	std	Y+4, r25	; 0x04
     50e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     510:	8d 81       	ldd	r24, Y+5	; 0x05
     512:	9e 81       	ldd	r25, Y+6	; 0x06
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	9e 83       	std	Y+6, r25	; 0x06
     518:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     51a:	8d 81       	ldd	r24, Y+5	; 0x05
     51c:	9e 81       	ldd	r25, Y+6	; 0x06
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	69 f7       	brne	.-38     	; 0x4fc <_write_out+0x2ce>
     522:	14 c0       	rjmp	.+40     	; 0x54c <_write_out+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     524:	6f 81       	ldd	r22, Y+7	; 0x07
     526:	78 85       	ldd	r23, Y+8	; 0x08
     528:	89 85       	ldd	r24, Y+9	; 0x09
     52a:	9a 85       	ldd	r25, Y+10	; 0x0a
     52c:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	9e 83       	std	Y+6, r25	; 0x06
     536:	8d 83       	std	Y+5, r24	; 0x05
     538:	8d 81       	ldd	r24, Y+5	; 0x05
     53a:	9e 81       	ldd	r25, Y+6	; 0x06
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <_write_out+0x316>
     548:	9a 83       	std	Y+2, r25	; 0x02
     54a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		value >>= 1;
     54c:	8d a5       	ldd	r24, Y+45	; 0x2d
     54e:	86 95       	lsr	r24
     550:	8d a7       	std	Y+45, r24	; 0x2d
	}
}

void _write_out(uint8_t value) {
	DS1302_IO_DIR_OUT;
	for (int i = 0; i < 8; i++) {
     552:	8b a5       	ldd	r24, Y+43	; 0x2b
     554:	9c a5       	ldd	r25, Y+44	; 0x2c
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	9c a7       	std	Y+44, r25	; 0x2c
     55a:	8b a7       	std	Y+43, r24	; 0x2b
     55c:	8b a5       	ldd	r24, Y+43	; 0x2b
     55e:	9c a5       	ldd	r25, Y+44	; 0x2c
     560:	88 30       	cpi	r24, 0x08	; 8
     562:	91 05       	cpc	r25, r1
     564:	0c f4       	brge	.+2      	; 0x568 <_write_out+0x33a>
     566:	78 ce       	rjmp	.-784    	; 0x258 <_write_out+0x2a>
		value >>= 1;

	}
//	DS1302_IO_DIR_OUT;
//	shiftOut(value);
}
     568:	ad 96       	adiw	r28, 0x2d	; 45
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	de bf       	out	0x3e, r29	; 62
     570:	0f be       	out	0x3f, r0	; 63
     572:	cd bf       	out	0x3d, r28	; 61
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <init>:

void init() {
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	DS1302_CLK_DIR_OUT;
     582:	a4 e2       	ldi	r26, 0x24	; 36
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	e4 e2       	ldi	r30, 0x24	; 36
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	81 60       	ori	r24, 0x01	; 1
     58e:	8c 93       	st	X, r24
	DS1302_RST_DIR_OUT;
     590:	a4 e2       	ldi	r26, 0x24	; 36
     592:	b0 e0       	ldi	r27, 0x00	; 0
     594:	e4 e2       	ldi	r30, 0x24	; 36
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	8c 93       	st	X, r24
}
     59c:	cf 91       	pop	r28
     59e:	df 91       	pop	r29
     5a0:	08 95       	ret

000005a2 <_read_in>:

uint8_t _read_in() {
     5a2:	df 93       	push	r29
     5a4:	cf 93       	push	r28
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	62 97       	sbiw	r28, 0x12	; 18
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
	uint8_t input_value = 0;
     5b6:	1a 8a       	std	Y+18, r1	; 0x12
	uint8_t bit = 0;
     5b8:	19 8a       	std	Y+17, r1	; 0x11
	DS1302_IO_DIR_IN;
     5ba:	a4 e2       	ldi	r26, 0x24	; 36
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e4 e2       	ldi	r30, 0x24	; 36
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	8d 7f       	andi	r24, 0xFD	; 253
     5c6:	8c 93       	st	X, r24

	for (int i = 0; i < 8; ++i) {
     5c8:	18 8a       	std	Y+16, r1	; 0x10
     5ca:	1f 86       	std	Y+15, r1	; 0x0f
     5cc:	97 c0       	rjmp	.+302    	; 0x6fc <_read_in+0x15a>
		bit = DS1302_IO_IN;
     5ce:	e3 e2       	ldi	r30, 0x23	; 35
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	82 70       	andi	r24, 0x02	; 2
     5d6:	89 8b       	std	Y+17, r24	; 0x11
		input_value |= (bit << i);
     5d8:	89 89       	ldd	r24, Y+17	; 0x11
     5da:	88 2f       	mov	r24, r24
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0f 84       	ldd	r0, Y+15	; 0x0f
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <_read_in+0x44>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	0a 94       	dec	r0
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <_read_in+0x40>
     5ea:	98 2f       	mov	r25, r24
     5ec:	8a 89       	ldd	r24, Y+18	; 0x12
     5ee:	89 2b       	or	r24, r25
     5f0:	8a 8b       	std	Y+18, r24	; 0x12

		DS1302_CLK_1;
     5f2:	a5 e2       	ldi	r26, 0x25	; 37
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	e5 e2       	ldi	r30, 0x25	; 37
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	8c 93       	st	X, r24
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	a0 e8       	ldi	r26, 0x80	; 128
     606:	bf e3       	ldi	r27, 0x3F	; 63
     608:	8b 87       	std	Y+11, r24	; 0x0b
     60a:	9c 87       	std	Y+12, r25	; 0x0c
     60c:	ad 87       	std	Y+13, r26	; 0x0d
     60e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     610:	6b 85       	ldd	r22, Y+11	; 0x0b
     612:	7c 85       	ldd	r23, Y+12	; 0x0c
     614:	8d 85       	ldd	r24, Y+13	; 0x0d
     616:	9e 85       	ldd	r25, Y+14	; 0x0e
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	4a e7       	ldi	r20, 0x7A	; 122
     61e:	55 e4       	ldi	r21, 0x45	; 69
     620:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	8f 83       	std	Y+7, r24	; 0x07
     62a:	98 87       	std	Y+8, r25	; 0x08
     62c:	a9 87       	std	Y+9, r26	; 0x09
     62e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     630:	6f 81       	ldd	r22, Y+7	; 0x07
     632:	78 85       	ldd	r23, Y+8	; 0x08
     634:	89 85       	ldd	r24, Y+9	; 0x09
     636:	9a 85       	ldd	r25, Y+10	; 0x0a
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <_read_in+0xb0>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e 83       	std	Y+6, r25	; 0x06
     64e:	8d 83       	std	Y+5, r24	; 0x05
     650:	3f c0       	rjmp	.+126    	; 0x6d0 <_read_in+0x12e>
	else if (__tmp > 65535)
     652:	6f 81       	ldd	r22, Y+7	; 0x07
     654:	78 85       	ldd	r23, Y+8	; 0x08
     656:	89 85       	ldd	r24, Y+9	; 0x09
     658:	9a 85       	ldd	r25, Y+10	; 0x0a
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	3f ef       	ldi	r19, 0xFF	; 255
     65e:	4f e7       	ldi	r20, 0x7F	; 127
     660:	57 e4       	ldi	r21, 0x47	; 71
     662:	0e 94 03 0b 	call	0x1606	; 0x1606 <__gtsf2>
     666:	18 16       	cp	r1, r24
     668:	4c f5       	brge	.+82     	; 0x6bc <_read_in+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66a:	6b 85       	ldd	r22, Y+11	; 0x0b
     66c:	7c 85       	ldd	r23, Y+12	; 0x0c
     66e:	8d 85       	ldd	r24, Y+13	; 0x0d
     670:	9e 85       	ldd	r25, Y+14	; 0x0e
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	40 e2       	ldi	r20, 0x20	; 32
     678:	51 e4       	ldi	r21, 0x41	; 65
     67a:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	bc 01       	movw	r22, r24
     684:	cd 01       	movw	r24, r26
     686:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	9e 83       	std	Y+6, r25	; 0x06
     690:	8d 83       	std	Y+5, r24	; 0x05
     692:	0f c0       	rjmp	.+30     	; 0x6b2 <_read_in+0x110>
     694:	80 e9       	ldi	r24, 0x90	; 144
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	9c 83       	std	Y+4, r25	; 0x04
     69a:	8b 83       	std	Y+3, r24	; 0x03
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <_read_in+0xfe>
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a8:	8d 81       	ldd	r24, Y+5	; 0x05
     6aa:	9e 81       	ldd	r25, Y+6	; 0x06
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	9e 83       	std	Y+6, r25	; 0x06
     6b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b2:	8d 81       	ldd	r24, Y+5	; 0x05
     6b4:	9e 81       	ldd	r25, Y+6	; 0x06
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	69 f7       	brne	.-38     	; 0x694 <_read_in+0xf2>
     6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <_read_in+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6bc:	6f 81       	ldd	r22, Y+7	; 0x07
     6be:	78 85       	ldd	r23, Y+8	; 0x08
     6c0:	89 85       	ldd	r24, Y+9	; 0x09
     6c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c4:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	9e 83       	std	Y+6, r25	; 0x06
     6ce:	8d 83       	std	Y+5, r24	; 0x05
     6d0:	8d 81       	ldd	r24, Y+5	; 0x05
     6d2:	9e 81       	ldd	r25, Y+6	; 0x06
     6d4:	9a 83       	std	Y+2, r25	; 0x02
     6d6:	89 83       	std	Y+1, r24	; 0x01
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <_read_in+0x13a>
     6e0:	9a 83       	std	Y+2, r25	; 0x02
     6e2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		DS1302_CLK_0;
     6e4:	a5 e2       	ldi	r26, 0x25	; 37
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	e5 e2       	ldi	r30, 0x25	; 37
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	8e 7f       	andi	r24, 0xFE	; 254
     6f0:	8c 93       	st	X, r24
uint8_t _read_in() {
	uint8_t input_value = 0;
	uint8_t bit = 0;
	DS1302_IO_DIR_IN;

	for (int i = 0; i < 8; ++i) {
     6f2:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f4:	98 89       	ldd	r25, Y+16	; 0x10
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	98 8b       	std	Y+16, r25	; 0x10
     6fa:	8f 87       	std	Y+15, r24	; 0x0f
     6fc:	8f 85       	ldd	r24, Y+15	; 0x0f
     6fe:	98 89       	ldd	r25, Y+16	; 0x10
     700:	88 30       	cpi	r24, 0x08	; 8
     702:	91 05       	cpc	r25, r1
     704:	0c f4       	brge	.+2      	; 0x708 <_read_in+0x166>
     706:	63 cf       	rjmp	.-314    	; 0x5ce <_read_in+0x2c>
		DS1302_CLK_1;
		_delay_ms(1);
		DS1302_CLK_0;
	}

	return input_value;
     708:	8a 89       	ldd	r24, Y+18	; 0x12
}
     70a:	62 96       	adiw	r28, 0x12	; 18
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	cf 91       	pop	r28
     718:	df 91       	pop	r29
     71a:	08 95       	ret

0000071c <_register_bcd_to_dec_>:

uint8_t _register_bcd_to_dec_(uint8_t reg, uint8_t high_bit) {
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	00 d0       	rcall	.+0      	; 0x722 <_register_bcd_to_dec_+0x6>
     722:	00 d0       	rcall	.+0      	; 0x724 <_register_bcd_to_dec_+0x8>
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	8b 83       	std	Y+3, r24	; 0x03
     72a:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t val = read_register(reg);
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     732:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t mask = (1 << (high_bit + 1)) - 1;
     734:	8c 81       	ldd	r24, Y+4	; 0x04
     736:	88 2f       	mov	r24, r24
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	9c 01       	movw	r18, r24
     73c:	2f 5f       	subi	r18, 0xFF	; 255
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <_register_bcd_to_dec_+0x2e>
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	2a 95       	dec	r18
     74c:	e2 f7       	brpl	.-8      	; 0x746 <_register_bcd_to_dec_+0x2a>
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	89 83       	std	Y+1, r24	; 0x01
	val &= mask;
     752:	9a 81       	ldd	r25, Y+2	; 0x02
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	89 23       	and	r24, r25
     758:	8a 83       	std	Y+2, r24	; 0x02
	val = (val & 15) + 10 * ((val & (15 << 4)) >> 4);
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	48 2f       	mov	r20, r24
     75e:	4f 70       	andi	r20, 0x0F	; 15
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	82 95       	swap	r24
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	90 70       	andi	r25, 0x00	; 0
     76c:	9c 01       	movw	r18, r24
     76e:	22 0f       	add	r18, r18
     770:	33 1f       	adc	r19, r19
     772:	c9 01       	movw	r24, r18
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	82 0f       	add	r24, r18
     77e:	93 1f       	adc	r25, r19
     780:	84 0f       	add	r24, r20
     782:	8a 83       	std	Y+2, r24	; 0x02
	return val;
     784:	8a 81       	ldd	r24, Y+2	; 0x02
}
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	08 95       	ret

00000794 <_register_bcd_to_dec>:

uint8_t _register_bcd_to_dec(uint8_t reg) {
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	0f 92       	push	r0
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	89 83       	std	Y+1, r24	; 0x01
	return _register_bcd_to_dec_(reg, 7);
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	67 e0       	ldi	r22, 0x07	; 7
     7a4:	0e 94 8e 03 	call	0x71c	; 0x71c <_register_bcd_to_dec_>
}
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	08 95       	ret

000007b0 <_register_dec_to_bcd_>:

void _register_dec_to_bcd_(uint8_t reg, uint8_t value, uint8_t high_bit) {
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <_register_dec_to_bcd_+0x6>
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <_register_dec_to_bcd_+0x8>
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <_register_dec_to_bcd_+0xa>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	8c 83       	std	Y+4, r24	; 0x04
     7c0:	6d 83       	std	Y+5, r22	; 0x05
     7c2:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t regv = read_register(reg);
     7c4:	8c 81       	ldd	r24, Y+4	; 0x04
     7c6:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     7ca:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t mask = (1 << (high_bit + 1)) - 1;
     7cc:	8e 81       	ldd	r24, Y+6	; 0x06
     7ce:	88 2f       	mov	r24, r24
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9c 01       	movw	r18, r24
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <_register_dec_to_bcd_+0x32>
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	2a 95       	dec	r18
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <_register_dec_to_bcd_+0x2e>
     7e6:	81 50       	subi	r24, 0x01	; 1
     7e8:	8a 83       	std	Y+2, r24	; 0x02

	/* convert value to bcd in place */
	uint8_t tvalue = value / 10;
     7ea:	8d 81       	ldd	r24, Y+5	; 0x05
     7ec:	9a e0       	ldi	r25, 0x0A	; 10
     7ee:	69 2f       	mov	r22, r25
     7f0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__udivmodqi4>
     7f4:	89 83       	std	Y+1, r24	; 0x01
	value = value % 10;
     7f6:	8d 81       	ldd	r24, Y+5	; 0x05
     7f8:	9a e0       	ldi	r25, 0x0A	; 10
     7fa:	69 2f       	mov	r22, r25
     7fc:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__udivmodqi4>
     800:	89 2f       	mov	r24, r25
     802:	8d 83       	std	Y+5, r24	; 0x05
	value |= (tvalue << 4);
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	82 95       	swap	r24
     80c:	92 95       	swap	r25
     80e:	90 7f       	andi	r25, 0xF0	; 240
     810:	98 27       	eor	r25, r24
     812:	80 7f       	andi	r24, 0xF0	; 240
     814:	98 27       	eor	r25, r24
     816:	98 2f       	mov	r25, r24
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	89 2b       	or	r24, r25
     81c:	8d 83       	std	Y+5, r24	; 0x05

	/* replace high bits of value if needed */
	value &= mask;
     81e:	9d 81       	ldd	r25, Y+5	; 0x05
     820:	8a 81       	ldd	r24, Y+2	; 0x02
     822:	89 23       	and	r24, r25
     824:	8d 83       	std	Y+5, r24	; 0x05
	value |= (regv &= ~mask);
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	98 2f       	mov	r25, r24
     82a:	90 95       	com	r25
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	89 23       	and	r24, r25
     830:	8b 83       	std	Y+3, r24	; 0x03
     832:	9d 81       	ldd	r25, Y+5	; 0x05
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	89 2b       	or	r24, r25
     838:	8d 83       	std	Y+5, r24	; 0x05

	write_register(reg, value);
     83a:	8c 81       	ldd	r24, Y+4	; 0x04
     83c:	6d 81       	ldd	r22, Y+5	; 0x05
     83e:	0e 94 6d 04 	call	0x8da	; 0x8da <write_register>
}
     842:	26 96       	adiw	r28, 0x06	; 6
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	08 95       	ret

00000854 <_register_dec_to_bcd>:

void _register_dec_to_bcd(uint8_t reg, uint8_t value) {
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	00 d0       	rcall	.+0      	; 0x85a <_register_dec_to_bcd+0x6>
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	6a 83       	std	Y+2, r22	; 0x02
	_register_dec_to_bcd_(reg, value, 7);
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	6a 81       	ldd	r22, Y+2	; 0x02
     866:	47 e0       	ldi	r20, 0x07	; 7
     868:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_register_dec_to_bcd_>
}
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	cf 91       	pop	r28
     872:	df 91       	pop	r29
     874:	08 95       	ret

00000876 <read_register>:

uint8_t read_register(uint8_t reg) {
     876:	df 93       	push	r29
     878:	cf 93       	push	r28
     87a:	00 d0       	rcall	.+0      	; 0x87c <read_register+0x6>
     87c:	0f 92       	push	r0
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t cmd_byte = 129; /* 1000 0001 */
     884:	81 e8       	ldi	r24, 0x81	; 129
     886:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t reg_value;
	cmd_byte |= (reg << 1);
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	88 2f       	mov	r24, r24
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	98 2f       	mov	r25, r24
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	89 2b       	or	r24, r25
     898:	8a 83       	std	Y+2, r24	; 0x02

	DS1302_CLK_0;
     89a:	a5 e2       	ldi	r26, 0x25	; 37
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e5 e2       	ldi	r30, 0x25	; 37
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	8e 7f       	andi	r24, 0xFE	; 254
     8a6:	8c 93       	st	X, r24
	DS1302_RST_1;
     8a8:	a5 e2       	ldi	r26, 0x25	; 37
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	e5 e2       	ldi	r30, 0x25	; 37
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	8c 93       	st	X, r24
//  digitalWrite(_ce_pin, HIGH);

	_write_out(cmd_byte);
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	0e 94 17 01 	call	0x22e	; 0x22e <_write_out>
	reg_value = _read_in();
     8ba:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_read_in>
     8be:	89 83       	std	Y+1, r24	; 0x01

	DS1302_RST_0;
     8c0:	a5 e2       	ldi	r26, 0x25	; 37
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	e5 e2       	ldi	r30, 0x25	; 37
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8c 93       	st	X, r24
//  digitalWrite(_ce_pin, LOW);

	return reg_value;
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
}
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	cf 91       	pop	r28
     8d6:	df 91       	pop	r29
     8d8:	08 95       	ret

000008da <write_register>:

void write_register(uint8_t reg, uint8_t value) {
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <write_register+0x6>
     8e0:	0f 92       	push	r0
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	8a 83       	std	Y+2, r24	; 0x02
     8e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t cmd_byte = (128 | (reg << 1));
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	80 68       	ori	r24, 0x80	; 128
     8f6:	89 83       	std	Y+1, r24	; 0x01

	DS1302_CLK_0;
     8f8:	a5 e2       	ldi	r26, 0x25	; 37
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	e5 e2       	ldi	r30, 0x25	; 37
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	8e 7f       	andi	r24, 0xFE	; 254
     904:	8c 93       	st	X, r24
	DS1302_RST_1;
     906:	a5 e2       	ldi	r26, 0x25	; 37
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e5 e2       	ldi	r30, 0x25	; 37
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	8c 93       	st	X, r24

	_write_out(cmd_byte);
     912:	89 81       	ldd	r24, Y+1	; 0x01
     914:	0e 94 17 01 	call	0x22e	; 0x22e <_write_out>
	_write_out(value);
     918:	8b 81       	ldd	r24, Y+3	; 0x03
     91a:	0e 94 17 01 	call	0x22e	; 0x22e <_write_out>

	DS1302_RST_0;
     91e:	a5 e2       	ldi	r26, 0x25	; 37
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	e5 e2       	ldi	r30, 0x25	; 37
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	8c 93       	st	X, r24
}
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	08 95       	ret

00000936 <getSeconds>:
//	write_register(SEC_REG, sec);
//}

/*** Get time ***/

uint8_t getSeconds() {
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec_(SEC_REG, 6);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	66 e0       	ldi	r22, 0x06	; 6
     942:	0e 94 8e 03 	call	0x71c	; 0x71c <_register_bcd_to_dec_>
}
     946:	cf 91       	pop	r28
     948:	df 91       	pop	r29
     94a:	08 95       	ret

0000094c <getMinutes>:

uint8_t getMinutes() {
     94c:	df 93       	push	r29
     94e:	cf 93       	push	r28
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec(MIN_REG);
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0e 94 ca 03 	call	0x794	; 0x794 <_register_bcd_to_dec>
}
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	08 95       	ret

00000960 <getHour>:

uint8_t getHour() {
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	00 d0       	rcall	.+0      	; 0x966 <getHour+0x6>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
	uint8_t hr = read_register(HR_REG);
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     970:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t adj;
	if (hr & 128) /* 12-hour mode */
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	88 23       	and	r24, r24
     976:	dc f4       	brge	.+54     	; 0x9ae <getHour+0x4e>
		adj = 12 * ((hr & 32) >> 5);
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	88 2f       	mov	r24, r24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	80 72       	andi	r24, 0x20	; 32
     980:	90 70       	andi	r25, 0x00	; 0
     982:	9c 01       	movw	r18, r24
     984:	35 95       	asr	r19
     986:	27 95       	ror	r18
     988:	35 95       	asr	r19
     98a:	27 95       	ror	r18
     98c:	35 95       	asr	r19
     98e:	27 95       	ror	r18
     990:	35 95       	asr	r19
     992:	27 95       	ror	r18
     994:	35 95       	asr	r19
     996:	27 95       	ror	r18
     998:	c9 01       	movw	r24, r18
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	82 0f       	add	r24, r18
     9a0:	93 1f       	adc	r25, r19
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	89 83       	std	Y+1, r24	; 0x01
     9ac:	18 c0       	rjmp	.+48     	; 0x9de <getHour+0x7e>
	else
		/* 24-hour mode */
		adj = 10 * ((hr & (32 + 16)) >> 4);
     9ae:	8a 81       	ldd	r24, Y+2	; 0x02
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	80 73       	andi	r24, 0x30	; 48
     9b6:	90 70       	andi	r25, 0x00	; 0
     9b8:	95 95       	asr	r25
     9ba:	87 95       	ror	r24
     9bc:	95 95       	asr	r25
     9be:	87 95       	ror	r24
     9c0:	95 95       	asr	r25
     9c2:	87 95       	ror	r24
     9c4:	95 95       	asr	r25
     9c6:	87 95       	ror	r24
     9c8:	9c 01       	movw	r18, r24
     9ca:	22 0f       	add	r18, r18
     9cc:	33 1f       	adc	r19, r19
     9ce:	c9 01       	movw	r24, r18
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	82 0f       	add	r24, r18
     9da:	93 1f       	adc	r25, r19
     9dc:	89 83       	std	Y+1, r24	; 0x01
	hr = (hr & 15) + adj;
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	98 2f       	mov	r25, r24
     9e2:	9f 70       	andi	r25, 0x0F	; 15
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	89 0f       	add	r24, r25
     9e8:	8a 83       	std	Y+2, r24	; 0x02
	return hr;
     9ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	cf 91       	pop	r28
     9f2:	df 91       	pop	r29
     9f4:	08 95       	ret

000009f6 <getDate>:

uint8_t getDate() {
     9f6:	df 93       	push	r29
     9f8:	cf 93       	push	r28
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec_(DATE_REG, 5);
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	65 e0       	ldi	r22, 0x05	; 5
     a02:	0e 94 8e 03 	call	0x71c	; 0x71c <_register_bcd_to_dec_>
}
     a06:	cf 91       	pop	r28
     a08:	df 91       	pop	r29
     a0a:	08 95       	ret

00000a0c <getMonth>:

uint8_t getMonth() {
     a0c:	df 93       	push	r29
     a0e:	cf 93       	push	r28
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec_(MON_REG, 4);
     a14:	84 e0       	ldi	r24, 0x04	; 4
     a16:	64 e0       	ldi	r22, 0x04	; 4
     a18:	0e 94 8e 03 	call	0x71c	; 0x71c <_register_bcd_to_dec_>
}
     a1c:	cf 91       	pop	r28
     a1e:	df 91       	pop	r29
     a20:	08 95       	ret

00000a22 <getDay>:

uint8_t getDay() {
     a22:	df 93       	push	r29
     a24:	cf 93       	push	r28
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec_(DAY_REG, 2);
     a2a:	85 e0       	ldi	r24, 0x05	; 5
     a2c:	62 e0       	ldi	r22, 0x02	; 2
     a2e:	0e 94 8e 03 	call	0x71c	; 0x71c <_register_bcd_to_dec_>
}
     a32:	cf 91       	pop	r28
     a34:	df 91       	pop	r29
     a36:	08 95       	ret

00000a38 <getYear>:

uint16_t getYear() {
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	return 2000 + _register_bcd_to_dec(YR_REG);
     a40:	86 e0       	ldi	r24, 0x06	; 6
     a42:	0e 94 ca 03 	call	0x794	; 0x794 <_register_bcd_to_dec>
     a46:	88 2f       	mov	r24, r24
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	80 53       	subi	r24, 0x30	; 48
     a4c:	98 4f       	sbci	r25, 0xF8	; 248
}
     a4e:	cf 91       	pop	r28
     a50:	df 91       	pop	r29
     a52:	08 95       	ret

00000a54 <seconds>:
//	return t;
//}

/*** Set time ***/

void seconds(uint8_t sec) {
     a54:	df 93       	push	r29
     a56:	cf 93       	push	r28
     a58:	0f 92       	push	r0
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(SEC_REG, sec, 6);
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	69 81       	ldd	r22, Y+1	; 0x01
     a64:	46 e0       	ldi	r20, 0x06	; 6
     a66:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_register_dec_to_bcd_>
}
     a6a:	0f 90       	pop	r0
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	08 95       	ret

00000a72 <minutes>:

void minutes(uint8_t min) {
     a72:	df 93       	push	r29
     a74:	cf 93       	push	r28
     a76:	0f 92       	push	r0
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(MIN_REG, min, 6);
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	69 81       	ldd	r22, Y+1	; 0x01
     a82:	46 e0       	ldi	r20, 0x06	; 6
     a84:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_register_dec_to_bcd_>
}
     a88:	0f 90       	pop	r0
     a8a:	cf 91       	pop	r28
     a8c:	df 91       	pop	r29
     a8e:	08 95       	ret

00000a90 <hour>:

void hour(uint8_t hr) {
     a90:	df 93       	push	r29
     a92:	cf 93       	push	r28
     a94:	0f 92       	push	r0
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	89 83       	std	Y+1, r24	; 0x01
	write_register(HR_REG, 0); /* set 24-hour mode */
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	0e 94 6d 04 	call	0x8da	; 0x8da <write_register>
	_register_dec_to_bcd_(HR_REG, hr, 5);
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	69 81       	ldd	r22, Y+1	; 0x01
     aa8:	45 e0       	ldi	r20, 0x05	; 5
     aaa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_register_dec_to_bcd_>
}
     aae:	0f 90       	pop	r0
     ab0:	cf 91       	pop	r28
     ab2:	df 91       	pop	r29
     ab4:	08 95       	ret

00000ab6 <date>:

void date(uint8_t date) {
     ab6:	df 93       	push	r29
     ab8:	cf 93       	push	r28
     aba:	0f 92       	push	r0
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(DATE_REG, date, 5);
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	69 81       	ldd	r22, Y+1	; 0x01
     ac6:	45 e0       	ldi	r20, 0x05	; 5
     ac8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_register_dec_to_bcd_>
}
     acc:	0f 90       	pop	r0
     ace:	cf 91       	pop	r28
     ad0:	df 91       	pop	r29
     ad2:	08 95       	ret

00000ad4 <month>:

void month(uint8_t mon) {
     ad4:	df 93       	push	r29
     ad6:	cf 93       	push	r28
     ad8:	0f 92       	push	r0
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(MON_REG, mon, 4);
     ae0:	84 e0       	ldi	r24, 0x04	; 4
     ae2:	69 81       	ldd	r22, Y+1	; 0x01
     ae4:	44 e0       	ldi	r20, 0x04	; 4
     ae6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_register_dec_to_bcd_>
}
     aea:	0f 90       	pop	r0
     aec:	cf 91       	pop	r28
     aee:	df 91       	pop	r29
     af0:	08 95       	ret

00000af2 <day>:

void day(uint8_t day) {
     af2:	df 93       	push	r29
     af4:	cf 93       	push	r28
     af6:	0f 92       	push	r0
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(DAY_REG, day, 2);
     afe:	85 e0       	ldi	r24, 0x05	; 5
     b00:	69 81       	ldd	r22, Y+1	; 0x01
     b02:	42 e0       	ldi	r20, 0x02	; 2
     b04:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_register_dec_to_bcd_>
}
     b08:	0f 90       	pop	r0
     b0a:	cf 91       	pop	r28
     b0c:	df 91       	pop	r29
     b0e:	08 95       	ret

00000b10 <year>:

void year(uint16_t yr) {
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	00 d0       	rcall	.+0      	; 0xb16 <year+0x6>
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	9a 83       	std	Y+2, r25	; 0x02
     b1c:	89 83       	std	Y+1, r24	; 0x01
	yr -= 2000;
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
     b22:	80 5d       	subi	r24, 0xD0	; 208
     b24:	97 40       	sbci	r25, 0x07	; 7
     b26:	9a 83       	std	Y+2, r25	; 0x02
     b28:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd(YR_REG, yr);
     b2a:	99 81       	ldd	r25, Y+1	; 0x01
     b2c:	86 e0       	ldi	r24, 0x06	; 6
     b2e:	69 2f       	mov	r22, r25
     b30:	0e 94 2a 04 	call	0x854	; 0x854 <_register_dec_to_bcd>
}
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	cf 91       	pop	r28
     b3a:	df 91       	pop	r29
     b3c:	08 95       	ret

00000b3e <initOutput>:

#define SET(port,b) (port) |= (1<<(b))
#define CLR(port,b) (port) &= ~(1<<(b))


void initOutput() {
     b3e:	df 93       	push	r29
     b40:	cf 93       	push	r28
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
	DDRD = (1 << DDD3) | (1 << DDD4) | (1 << DDD5);
     b46:	ea e2       	ldi	r30, 0x2A	; 42
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	88 e3       	ldi	r24, 0x38	; 56
     b4c:	80 83       	st	Z, r24
}
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <setRegisters>:

void setRegisters(char word) {
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	00 d0       	rcall	.+0      	; 0xb5a <setRegisters+0x6>
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <setRegisters+0x8>
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	8c 83       	std	Y+4, r24	; 0x04
	SET(PORTD, PD4);
     b62:	ab e2       	ldi	r26, 0x2B	; 43
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	eb e2       	ldi	r30, 0x2B	; 43
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 61       	ori	r24, 0x10	; 16
     b6e:	8c 93       	st	X, r24
	for (int i = 0; i < 8; i++) {
     b70:	1b 82       	std	Y+3, r1	; 0x03
     b72:	1a 82       	std	Y+2, r1	; 0x02
     b74:	2f c0       	rjmp	.+94     	; 0xbd4 <setRegisters+0x80>
		CLR(PORTD, PD5);
     b76:	ab e2       	ldi	r26, 0x2B	; 43
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	eb e2       	ldi	r30, 0x2B	; 43
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8f 7d       	andi	r24, 0xDF	; 223
     b82:	8c 93       	st	X, r24
		char data = word << i;
     b84:	8c 81       	ldd	r24, Y+4	; 0x04
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0a 80       	ldd	r0, Y+2	; 0x02
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <setRegisters+0x3e>
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	0a 94       	dec	r0
     b94:	e2 f7       	brpl	.-8      	; 0xb8e <setRegisters+0x3a>
     b96:	89 83       	std	Y+1, r24	; 0x01
		if (data & 0x80) {
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	88 23       	and	r24, r24
     b9c:	44 f4       	brge	.+16     	; 0xbae <setRegisters+0x5a>
			SET(PORTD, PD3);
     b9e:	ab e2       	ldi	r26, 0x2B	; 43
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	eb e2       	ldi	r30, 0x2B	; 43
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	88 60       	ori	r24, 0x08	; 8
     baa:	8c 93       	st	X, r24
     bac:	07 c0       	rjmp	.+14     	; 0xbbc <setRegisters+0x68>
		} else {
			CLR(PORTD, PD3);
     bae:	ab e2       	ldi	r26, 0x2B	; 43
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	eb e2       	ldi	r30, 0x2B	; 43
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	87 7f       	andi	r24, 0xF7	; 247
     bba:	8c 93       	st	X, r24
		}
		SET(PORTD, PD5);
     bbc:	ab e2       	ldi	r26, 0x2B	; 43
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	eb e2       	ldi	r30, 0x2B	; 43
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 62       	ori	r24, 0x20	; 32
     bc8:	8c 93       	st	X, r24
	DDRD = (1 << DDD3) | (1 << DDD4) | (1 << DDD5);
}

void setRegisters(char word) {
	SET(PORTD, PD4);
	for (int i = 0; i < 8; i++) {
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	9b 81       	ldd	r25, Y+3	; 0x03
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	9b 83       	std	Y+3, r25	; 0x03
     bd2:	8a 83       	std	Y+2, r24	; 0x02
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	9b 81       	ldd	r25, Y+3	; 0x03
     bd8:	88 30       	cpi	r24, 0x08	; 8
     bda:	91 05       	cpc	r25, r1
     bdc:	64 f2       	brlt	.-104    	; 0xb76 <setRegisters+0x22>
		} else {
			CLR(PORTD, PD3);
		}
		SET(PORTD, PD5);
	}
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <setTime>:

void setTime(char reg1, char reg2, char reg3) {
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <setTime+0x6>
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	6a 83       	std	Y+2, r22	; 0x02
     bfc:	4b 83       	std	Y+3, r20	; 0x03
	setRegisters(reg3);
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	0e 94 aa 05 	call	0xb54	; 0xb54 <setRegisters>
	setRegisters(reg2);
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	0e 94 aa 05 	call	0xb54	; 0xb54 <setRegisters>
	setRegisters(reg1);
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	0e 94 aa 05 	call	0xb54	; 0xb54 <setRegisters>
}
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <main>:

#include "display.h"
#include "DS1302.h"
#include  "uart.h"

int main(void) {
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	2e 97       	sbiw	r28, 0x0e	; 14
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
	initOutput();
     c34:	0e 94 9f 05 	call	0xb3e	; 0xb3e <initOutput>
	uart_init();
     c38:	0e 94 dd 07 	call	0xfba	; 0xfba <uart_init>
	stdout= &uart_output;
     c3c:	88 e1       	ldi	r24, 0x18	; 24
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	90 93 b3 01 	sts	0x01B3, r25
     c44:	80 93 b2 01 	sts	0x01B2, r24
	stdin= &uart_input;
     c48:	86 e2       	ldi	r24, 0x26	; 38
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	90 93 b1 01 	sts	0x01B1, r25
     c50:	80 93 b0 01 	sts	0x01B0, r24
	init();
     c54:	0e 94 bd 02 	call	0x57a	; 0x57a <init>
	while (1) {

		printf("yyyy %u\n", getYear());
     c58:	0e 94 1c 05 	call	0xa38	; 0xa38 <getYear>
     c5c:	9c 01       	movw	r18, r24
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <main+0x44>
     c60:	00 d0       	rcall	.+0      	; 0xc62 <main+0x46>
     c62:	ed b7       	in	r30, 0x3d	; 61
     c64:	fe b7       	in	r31, 0x3e	; 62
     c66:	31 96       	adiw	r30, 0x01	; 1
     c68:	84 e3       	ldi	r24, 0x34	; 52
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	80 83       	st	Z, r24
     c70:	33 83       	std	Z+3, r19	; 0x03
     c72:	22 83       	std	Z+2, r18	; 0x02
     c74:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
		printf("MM %u\n", getMonth());
     c80:	0e 94 06 05 	call	0xa0c	; 0xa0c <getMonth>
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	00 d0       	rcall	.+0      	; 0xc8a <main+0x6e>
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <main+0x70>
     c8c:	ed b7       	in	r30, 0x3d	; 61
     c8e:	fe b7       	in	r31, 0x3e	; 62
     c90:	31 96       	adiw	r30, 0x01	; 1
     c92:	8d e3       	ldi	r24, 0x3D	; 61
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
     c9a:	33 83       	std	Z+3, r19	; 0x03
     c9c:	22 83       	std	Z+2, r18	; 0x02
     c9e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
		printf("dd %u\n", getDay());
     caa:	0e 94 11 05 	call	0xa22	; 0xa22 <getDay>
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <main+0x98>
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <main+0x9a>
     cb6:	ed b7       	in	r30, 0x3d	; 61
     cb8:	fe b7       	in	r31, 0x3e	; 62
     cba:	31 96       	adiw	r30, 0x01	; 1
     cbc:	84 e4       	ldi	r24, 0x44	; 68
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
     cc4:	33 83       	std	Z+3, r19	; 0x03
     cc6:	22 83       	std	Z+2, r18	; 0x02
     cc8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
		printf("HH %u\n", getHour());
     cd4:	0e 94 b0 04 	call	0x960	; 0x960 <getHour>
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	00 d0       	rcall	.+0      	; 0xcde <main+0xc2>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <main+0xc4>
     ce0:	ed b7       	in	r30, 0x3d	; 61
     ce2:	fe b7       	in	r31, 0x3e	; 62
     ce4:	31 96       	adiw	r30, 0x01	; 1
     ce6:	8b e4       	ldi	r24, 0x4B	; 75
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
     cee:	33 83       	std	Z+3, r19	; 0x03
     cf0:	22 83       	std	Z+2, r18	; 0x02
     cf2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
		printf("mm %u\n", getMinutes());
     cfe:	0e 94 a6 04 	call	0x94c	; 0x94c <getMinutes>
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	00 d0       	rcall	.+0      	; 0xd08 <main+0xec>
     d08:	00 d0       	rcall	.+0      	; 0xd0a <main+0xee>
     d0a:	ed b7       	in	r30, 0x3d	; 61
     d0c:	fe b7       	in	r31, 0x3e	; 62
     d0e:	31 96       	adiw	r30, 0x01	; 1
     d10:	82 e5       	ldi	r24, 0x52	; 82
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
     d18:	33 83       	std	Z+3, r19	; 0x03
     d1a:	22 83       	std	Z+2, r18	; 0x02
     d1c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
		printf("ss %u\n", getSeconds());
     d28:	0e 94 9b 04 	call	0x936	; 0x936 <getSeconds>
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	00 d0       	rcall	.+0      	; 0xd32 <main+0x116>
     d32:	00 d0       	rcall	.+0      	; 0xd34 <main+0x118>
     d34:	ed b7       	in	r30, 0x3d	; 61
     d36:	fe b7       	in	r31, 0x3e	; 62
     d38:	31 96       	adiw	r30, 0x01	; 1
     d3a:	89 e5       	ldi	r24, 0x59	; 89
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	80 83       	st	Z, r24
     d42:	33 83       	std	Z+3, r19	; 0x03
     d44:	22 83       	std	Z+2, r18	; 0x02
     d46:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
		printf("reg0 %x\n", read_register(0));
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <main+0x142>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <main+0x144>
     d60:	ed b7       	in	r30, 0x3d	; 61
     d62:	fe b7       	in	r31, 0x3e	; 62
     d64:	31 96       	adiw	r30, 0x01	; 1
     d66:	80 e6       	ldi	r24, 0x60	; 96
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	80 83       	st	Z, r24
     d6e:	33 83       	std	Z+3, r19	; 0x03
     d70:	22 83       	std	Z+2, r18	; 0x02
     d72:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
		printf("reg1 %x\n", read_register(1));
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	00 d0       	rcall	.+0      	; 0xd8a <main+0x16e>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <main+0x170>
     d8c:	ed b7       	in	r30, 0x3d	; 61
     d8e:	fe b7       	in	r31, 0x3e	; 62
     d90:	31 96       	adiw	r30, 0x01	; 1
     d92:	89 e6       	ldi	r24, 0x69	; 105
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
     d9a:	33 83       	std	Z+3, r19	; 0x03
     d9c:	22 83       	std	Z+2, r18	; 0x02
     d9e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
		printf("reg2 %x\n", read_register(2));
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <main+0x19a>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <main+0x19c>
     db8:	ed b7       	in	r30, 0x3d	; 61
     dba:	fe b7       	in	r31, 0x3e	; 62
     dbc:	31 96       	adiw	r30, 0x01	; 1
     dbe:	82 e7       	ldi	r24, 0x72	; 114
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
     dc6:	33 83       	std	Z+3, r19	; 0x03
     dc8:	22 83       	std	Z+2, r18	; 0x02
     dca:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
		printf("reg3 %x\n", read_register(3));
     dd6:	83 e0       	ldi	r24, 0x03	; 3
     dd8:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	00 d0       	rcall	.+0      	; 0xde2 <main+0x1c6>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <main+0x1c8>
     de4:	ed b7       	in	r30, 0x3d	; 61
     de6:	fe b7       	in	r31, 0x3e	; 62
     de8:	31 96       	adiw	r30, 0x01	; 1
     dea:	8b e7       	ldi	r24, 0x7B	; 123
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
     df2:	33 83       	std	Z+3, r19	; 0x03
     df4:	22 83       	std	Z+2, r18	; 0x02
     df6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
		printf("reg4 %x\n", read_register(4));
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <main+0x1f2>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <main+0x1f4>
     e10:	ed b7       	in	r30, 0x3d	; 61
     e12:	fe b7       	in	r31, 0x3e	; 62
     e14:	31 96       	adiw	r30, 0x01	; 1
     e16:	84 e8       	ldi	r24, 0x84	; 132
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	80 83       	st	Z, r24
     e1e:	33 83       	std	Z+3, r19	; 0x03
     e20:	22 83       	std	Z+2, r18	; 0x02
     e22:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
		printf("reg5 %x\n", read_register(5));
     e2e:	85 e0       	ldi	r24, 0x05	; 5
     e30:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	00 d0       	rcall	.+0      	; 0xe3a <main+0x21e>
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <main+0x220>
     e3c:	ed b7       	in	r30, 0x3d	; 61
     e3e:	fe b7       	in	r31, 0x3e	; 62
     e40:	31 96       	adiw	r30, 0x01	; 1
     e42:	8d e8       	ldi	r24, 0x8D	; 141
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	80 83       	st	Z, r24
     e4a:	33 83       	std	Z+3, r19	; 0x03
     e4c:	22 83       	std	Z+2, r18	; 0x02
     e4e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
		printf("reg6 %x\n", read_register(6));
     e5a:	86 e0       	ldi	r24, 0x06	; 6
     e5c:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	00 d0       	rcall	.+0      	; 0xe66 <main+0x24a>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <main+0x24c>
     e68:	ed b7       	in	r30, 0x3d	; 61
     e6a:	fe b7       	in	r31, 0x3e	; 62
     e6c:	31 96       	adiw	r30, 0x01	; 1
     e6e:	86 e9       	ldi	r24, 0x96	; 150
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	80 83       	st	Z, r24
     e76:	33 83       	std	Z+3, r19	; 0x03
     e78:	22 83       	std	Z+2, r18	; 0x02
     e7a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
		printf("reg7 %x\n", read_register(7));
     e86:	87 e0       	ldi	r24, 0x07	; 7
     e88:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	00 d0       	rcall	.+0      	; 0xe92 <main+0x276>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <main+0x278>
     e94:	ed b7       	in	r30, 0x3d	; 61
     e96:	fe b7       	in	r31, 0x3e	; 62
     e98:	31 96       	adiw	r30, 0x01	; 1
     e9a:	8f e9       	ldi	r24, 0x9F	; 159
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	80 83       	st	Z, r24
     ea2:	33 83       	std	Z+3, r19	; 0x03
     ea4:	22 83       	std	Z+2, r18	; 0x02
     ea6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
		setTime(read_register(0),read_register(0),read_register(0));
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     eb8:	08 2f       	mov	r16, r24
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     ec0:	18 2f       	mov	r17, r24
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	0e 94 3b 04 	call	0x876	; 0x876 <read_register>
     ec8:	98 2f       	mov	r25, r24
     eca:	80 2f       	mov	r24, r16
     ecc:	61 2f       	mov	r22, r17
     ece:	49 2f       	mov	r20, r25
     ed0:	0e 94 f6 05 	call	0xbec	; 0xbec <setTime>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	aa e7       	ldi	r26, 0x7A	; 122
     eda:	b4 e4       	ldi	r27, 0x44	; 68
     edc:	8b 87       	std	Y+11, r24	; 0x0b
     ede:	9c 87       	std	Y+12, r25	; 0x0c
     ee0:	ad 87       	std	Y+13, r26	; 0x0d
     ee2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eea:	9e 85       	ldd	r25, Y+14	; 0x0e
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	4a e7       	ldi	r20, 0x7A	; 122
     ef2:	55 e4       	ldi	r21, 0x45	; 69
     ef4:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	8f 83       	std	Y+7, r24	; 0x07
     efe:	98 87       	std	Y+8, r25	; 0x08
     f00:	a9 87       	std	Y+9, r26	; 0x09
     f02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f04:	6f 81       	ldd	r22, Y+7	; 0x07
     f06:	78 85       	ldd	r23, Y+8	; 0x08
     f08:	89 85       	ldd	r24, Y+9	; 0x09
     f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__ltsf2>
     f18:	88 23       	and	r24, r24
     f1a:	2c f4       	brge	.+10     	; 0xf26 <main+0x30a>
		__ticks = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9e 83       	std	Y+6, r25	; 0x06
     f22:	8d 83       	std	Y+5, r24	; 0x05
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <main+0x388>
	else if (__tmp > 65535)
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	3f ef       	ldi	r19, 0xFF	; 255
     f32:	4f e7       	ldi	r20, 0x7F	; 127
     f34:	57 e4       	ldi	r21, 0x47	; 71
     f36:	0e 94 03 0b 	call	0x1606	; 0x1606 <__gtsf2>
     f3a:	18 16       	cp	r1, r24
     f3c:	4c f5       	brge	.+82     	; 0xf90 <main+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f40:	7c 85       	ldd	r23, Y+12	; 0x0c
     f42:	8d 85       	ldd	r24, Y+13	; 0x0d
     f44:	9e 85       	ldd	r25, Y+14	; 0x0e
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e2       	ldi	r20, 0x20	; 32
     f4c:	51 e4       	ldi	r21, 0x41	; 65
     f4e:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	0f c0       	rjmp	.+30     	; 0xf86 <main+0x36a>
     f68:	80 e9       	ldi	r24, 0x90	; 144
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	9c 83       	std	Y+4, r25	; 0x04
     f6e:	8b 83       	std	Y+3, r24	; 0x03
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <main+0x358>
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	9e 81       	ldd	r25, Y+6	; 0x06
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	69 f7       	brne	.-38     	; 0xf68 <main+0x34c>
     f8e:	64 ce       	rjmp	.-824    	; 0xc58 <main+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f90:	6f 81       	ldd	r22, Y+7	; 0x07
     f92:	78 85       	ldd	r23, Y+8	; 0x08
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	9e 83       	std	Y+6, r25	; 0x06
     fa2:	8d 83       	std	Y+5, r24	; 0x05
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	9a 83       	std	Y+2, r25	; 0x02
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <main+0x394>
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	4f ce       	rjmp	.-866    	; 0xc58 <main+0x3c>

00000fba <uart_init>:
#endif
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
    UBRR0H = UBRRH_VALUE;
     fc2:	e5 ec       	ldi	r30, 0xC5	; 197
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
    UBRR0L = UBRRL_VALUE;
     fc8:	e4 ec       	ldi	r30, 0xC4	; 196
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	87 e6       	ldi	r24, 0x67	; 103
     fce:	80 83       	st	Z, r24
    
#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
     fd0:	a0 ec       	ldi	r26, 0xC0	; 192
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e0 ec       	ldi	r30, 0xC0	; 192
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8d 7f       	andi	r24, 0xFD	; 253
     fdc:	8c 93       	st	X, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
     fde:	e2 ec       	ldi	r30, 0xC2	; 194
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	86 e0       	ldi	r24, 0x06	; 6
     fe4:	80 83       	st	Z, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
     fe6:	e1 ec       	ldi	r30, 0xC1	; 193
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	88 e1       	ldi	r24, 0x18	; 24
     fec:	80 83       	st	Z, r24
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <uart_putchar+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	7b 83       	std	Y+3, r23	; 0x03
    1004:	6a 83       	std	Y+2, r22	; 0x02
    if (c == '\n') {
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	8a 30       	cpi	r24, 0x0A	; 10
    100a:	31 f4       	brne	.+12     	; 0x1018 <uart_putchar+0x24>
        uart_putchar('\r', stream);
    100c:	2a 81       	ldd	r18, Y+2	; 0x02
    100e:	3b 81       	ldd	r19, Y+3	; 0x03
    1010:	8d e0       	ldi	r24, 0x0D	; 13
    1012:	b9 01       	movw	r22, r18
    1014:	0e 94 fa 07 	call	0xff4	; 0xff4 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
    1018:	e0 ec       	ldi	r30, 0xC0	; 192
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	80 72       	andi	r24, 0x20	; 32
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	b9 f3       	breq	.-18     	; 0x1018 <uart_putchar+0x24>
    UDR0 = c;
    102a:	e6 ec       	ldi	r30, 0xC6	; 198
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	80 83       	st	Z, r24
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <uart_getchar>:

char uart_getchar(FILE *stream) {
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <uart_getchar+0x6>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	9a 83       	std	Y+2, r25	; 0x02
    104a:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSR0A, RXC0);
    104c:	e0 ec       	ldi	r30, 0xC0	; 192
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	88 23       	and	r24, r24
    1054:	dc f7       	brge	.-10     	; 0x104c <uart_getchar+0xe>
    return UDR0;
    1056:	e6 ec       	ldi	r30, 0xC6	; 198
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
}
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <__fixunssfsi>:
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	7b 01       	movw	r14, r22
    1070:	8c 01       	movw	r16, r24
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	5f e4       	ldi	r21, 0x4F	; 79
    107a:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gesf2>
    107e:	88 23       	and	r24, r24
    1080:	8c f0       	brlt	.+34     	; 0x10a4 <__fixunssfsi+0x3e>
    1082:	c8 01       	movw	r24, r16
    1084:	b7 01       	movw	r22, r14
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	5f e4       	ldi	r21, 0x4F	; 79
    108e:	0e 94 ab 09 	call	0x1356	; 0x1356 <__subsf3>
    1092:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
    1096:	9b 01       	movw	r18, r22
    1098:	ac 01       	movw	r20, r24
    109a:	20 50       	subi	r18, 0x00	; 0
    109c:	30 40       	sbci	r19, 0x00	; 0
    109e:	40 40       	sbci	r20, 0x00	; 0
    10a0:	50 48       	sbci	r21, 0x80	; 128
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <__fixunssfsi+0x4a>
    10a4:	c8 01       	movw	r24, r16
    10a6:	b7 01       	movw	r22, r14
    10a8:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	b9 01       	movw	r22, r18
    10b2:	ca 01       	movw	r24, r20
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	08 95       	ret

000010be <_fpadd_parts>:
    10be:	a0 e0       	ldi	r26, 0x00	; 0
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e6       	ldi	r30, 0x65	; 101
    10c4:	f8 e0       	ldi	r31, 0x08	; 8
    10c6:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__prologue_saves__>
    10ca:	dc 01       	movw	r26, r24
    10cc:	2b 01       	movw	r4, r22
    10ce:	fa 01       	movw	r30, r20
    10d0:	9c 91       	ld	r25, X
    10d2:	92 30       	cpi	r25, 0x02	; 2
    10d4:	08 f4       	brcc	.+2      	; 0x10d8 <_fpadd_parts+0x1a>
    10d6:	39 c1       	rjmp	.+626    	; 0x134a <_fpadd_parts+0x28c>
    10d8:	eb 01       	movw	r28, r22
    10da:	88 81       	ld	r24, Y
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <_fpadd_parts+0x24>
    10e0:	33 c1       	rjmp	.+614    	; 0x1348 <_fpadd_parts+0x28a>
    10e2:	94 30       	cpi	r25, 0x04	; 4
    10e4:	69 f4       	brne	.+26     	; 0x1100 <_fpadd_parts+0x42>
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	09 f0       	breq	.+2      	; 0x10ec <_fpadd_parts+0x2e>
    10ea:	2f c1       	rjmp	.+606    	; 0x134a <_fpadd_parts+0x28c>
    10ec:	11 96       	adiw	r26, 0x01	; 1
    10ee:	9c 91       	ld	r25, X
    10f0:	11 97       	sbiw	r26, 0x01	; 1
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	98 17       	cp	r25, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <_fpadd_parts+0x3c>
    10f8:	28 c1       	rjmp	.+592    	; 0x134a <_fpadd_parts+0x28c>
    10fa:	a8 ea       	ldi	r26, 0xA8	; 168
    10fc:	b1 e0       	ldi	r27, 0x01	; 1
    10fe:	25 c1       	rjmp	.+586    	; 0x134a <_fpadd_parts+0x28c>
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	09 f4       	brne	.+2      	; 0x1106 <_fpadd_parts+0x48>
    1104:	21 c1       	rjmp	.+578    	; 0x1348 <_fpadd_parts+0x28a>
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	a9 f4       	brne	.+42     	; 0x1134 <_fpadd_parts+0x76>
    110a:	92 30       	cpi	r25, 0x02	; 2
    110c:	09 f0       	breq	.+2      	; 0x1110 <_fpadd_parts+0x52>
    110e:	1d c1       	rjmp	.+570    	; 0x134a <_fpadd_parts+0x28c>
    1110:	9a 01       	movw	r18, r20
    1112:	ad 01       	movw	r20, r26
    1114:	88 e0       	ldi	r24, 0x08	; 8
    1116:	ea 01       	movw	r28, r20
    1118:	09 90       	ld	r0, Y+
    111a:	ae 01       	movw	r20, r28
    111c:	e9 01       	movw	r28, r18
    111e:	09 92       	st	Y+, r0
    1120:	9e 01       	movw	r18, r28
    1122:	81 50       	subi	r24, 0x01	; 1
    1124:	c1 f7       	brne	.-16     	; 0x1116 <_fpadd_parts+0x58>
    1126:	e2 01       	movw	r28, r4
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	9c 91       	ld	r25, X
    112e:	89 23       	and	r24, r25
    1130:	81 83       	std	Z+1, r24	; 0x01
    1132:	08 c1       	rjmp	.+528    	; 0x1344 <_fpadd_parts+0x286>
    1134:	92 30       	cpi	r25, 0x02	; 2
    1136:	09 f4       	brne	.+2      	; 0x113a <_fpadd_parts+0x7c>
    1138:	07 c1       	rjmp	.+526    	; 0x1348 <_fpadd_parts+0x28a>
    113a:	12 96       	adiw	r26, 0x02	; 2
    113c:	2d 90       	ld	r2, X+
    113e:	3c 90       	ld	r3, X
    1140:	13 97       	sbiw	r26, 0x03	; 3
    1142:	eb 01       	movw	r28, r22
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	9b 81       	ldd	r25, Y+3	; 0x03
    1148:	14 96       	adiw	r26, 0x04	; 4
    114a:	ad 90       	ld	r10, X+
    114c:	bd 90       	ld	r11, X+
    114e:	cd 90       	ld	r12, X+
    1150:	dc 90       	ld	r13, X
    1152:	17 97       	sbiw	r26, 0x07	; 7
    1154:	ec 80       	ldd	r14, Y+4	; 0x04
    1156:	fd 80       	ldd	r15, Y+5	; 0x05
    1158:	0e 81       	ldd	r16, Y+6	; 0x06
    115a:	1f 81       	ldd	r17, Y+7	; 0x07
    115c:	91 01       	movw	r18, r2
    115e:	28 1b       	sub	r18, r24
    1160:	39 0b       	sbc	r19, r25
    1162:	b9 01       	movw	r22, r18
    1164:	37 ff       	sbrs	r19, 7
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <_fpadd_parts+0xb2>
    1168:	66 27       	eor	r22, r22
    116a:	77 27       	eor	r23, r23
    116c:	62 1b       	sub	r22, r18
    116e:	73 0b       	sbc	r23, r19
    1170:	60 32       	cpi	r22, 0x20	; 32
    1172:	71 05       	cpc	r23, r1
    1174:	0c f0       	brlt	.+2      	; 0x1178 <_fpadd_parts+0xba>
    1176:	61 c0       	rjmp	.+194    	; 0x123a <_fpadd_parts+0x17c>
    1178:	12 16       	cp	r1, r18
    117a:	13 06       	cpc	r1, r19
    117c:	6c f5       	brge	.+90     	; 0x11d8 <_fpadd_parts+0x11a>
    117e:	37 01       	movw	r6, r14
    1180:	48 01       	movw	r8, r16
    1182:	06 2e       	mov	r0, r22
    1184:	04 c0       	rjmp	.+8      	; 0x118e <_fpadd_parts+0xd0>
    1186:	96 94       	lsr	r9
    1188:	87 94       	ror	r8
    118a:	77 94       	ror	r7
    118c:	67 94       	ror	r6
    118e:	0a 94       	dec	r0
    1190:	d2 f7       	brpl	.-12     	; 0x1186 <_fpadd_parts+0xc8>
    1192:	21 e0       	ldi	r18, 0x01	; 1
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <_fpadd_parts+0xe6>
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	44 1f       	adc	r20, r20
    11a2:	55 1f       	adc	r21, r21
    11a4:	6a 95       	dec	r22
    11a6:	d2 f7       	brpl	.-12     	; 0x119c <_fpadd_parts+0xde>
    11a8:	21 50       	subi	r18, 0x01	; 1
    11aa:	30 40       	sbci	r19, 0x00	; 0
    11ac:	40 40       	sbci	r20, 0x00	; 0
    11ae:	50 40       	sbci	r21, 0x00	; 0
    11b0:	2e 21       	and	r18, r14
    11b2:	3f 21       	and	r19, r15
    11b4:	40 23       	and	r20, r16
    11b6:	51 23       	and	r21, r17
    11b8:	21 15       	cp	r18, r1
    11ba:	31 05       	cpc	r19, r1
    11bc:	41 05       	cpc	r20, r1
    11be:	51 05       	cpc	r21, r1
    11c0:	21 f0       	breq	.+8      	; 0x11ca <_fpadd_parts+0x10c>
    11c2:	21 e0       	ldi	r18, 0x01	; 1
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	79 01       	movw	r14, r18
    11cc:	8a 01       	movw	r16, r20
    11ce:	e6 28       	or	r14, r6
    11d0:	f7 28       	or	r15, r7
    11d2:	08 29       	or	r16, r8
    11d4:	19 29       	or	r17, r9
    11d6:	3c c0       	rjmp	.+120    	; 0x1250 <_fpadd_parts+0x192>
    11d8:	23 2b       	or	r18, r19
    11da:	d1 f1       	breq	.+116    	; 0x1250 <_fpadd_parts+0x192>
    11dc:	26 0e       	add	r2, r22
    11de:	37 1e       	adc	r3, r23
    11e0:	35 01       	movw	r6, r10
    11e2:	46 01       	movw	r8, r12
    11e4:	06 2e       	mov	r0, r22
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <_fpadd_parts+0x132>
    11e8:	96 94       	lsr	r9
    11ea:	87 94       	ror	r8
    11ec:	77 94       	ror	r7
    11ee:	67 94       	ror	r6
    11f0:	0a 94       	dec	r0
    11f2:	d2 f7       	brpl	.-12     	; 0x11e8 <_fpadd_parts+0x12a>
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <_fpadd_parts+0x148>
    11fe:	22 0f       	add	r18, r18
    1200:	33 1f       	adc	r19, r19
    1202:	44 1f       	adc	r20, r20
    1204:	55 1f       	adc	r21, r21
    1206:	6a 95       	dec	r22
    1208:	d2 f7       	brpl	.-12     	; 0x11fe <_fpadd_parts+0x140>
    120a:	21 50       	subi	r18, 0x01	; 1
    120c:	30 40       	sbci	r19, 0x00	; 0
    120e:	40 40       	sbci	r20, 0x00	; 0
    1210:	50 40       	sbci	r21, 0x00	; 0
    1212:	2a 21       	and	r18, r10
    1214:	3b 21       	and	r19, r11
    1216:	4c 21       	and	r20, r12
    1218:	5d 21       	and	r21, r13
    121a:	21 15       	cp	r18, r1
    121c:	31 05       	cpc	r19, r1
    121e:	41 05       	cpc	r20, r1
    1220:	51 05       	cpc	r21, r1
    1222:	21 f0       	breq	.+8      	; 0x122c <_fpadd_parts+0x16e>
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	59 01       	movw	r10, r18
    122e:	6a 01       	movw	r12, r20
    1230:	a6 28       	or	r10, r6
    1232:	b7 28       	or	r11, r7
    1234:	c8 28       	or	r12, r8
    1236:	d9 28       	or	r13, r9
    1238:	0b c0       	rjmp	.+22     	; 0x1250 <_fpadd_parts+0x192>
    123a:	82 15       	cp	r24, r2
    123c:	93 05       	cpc	r25, r3
    123e:	2c f0       	brlt	.+10     	; 0x124a <_fpadd_parts+0x18c>
    1240:	1c 01       	movw	r2, r24
    1242:	aa 24       	eor	r10, r10
    1244:	bb 24       	eor	r11, r11
    1246:	65 01       	movw	r12, r10
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <_fpadd_parts+0x192>
    124a:	ee 24       	eor	r14, r14
    124c:	ff 24       	eor	r15, r15
    124e:	87 01       	movw	r16, r14
    1250:	11 96       	adiw	r26, 0x01	; 1
    1252:	9c 91       	ld	r25, X
    1254:	d2 01       	movw	r26, r4
    1256:	11 96       	adiw	r26, 0x01	; 1
    1258:	8c 91       	ld	r24, X
    125a:	98 17       	cp	r25, r24
    125c:	09 f4       	brne	.+2      	; 0x1260 <_fpadd_parts+0x1a2>
    125e:	45 c0       	rjmp	.+138    	; 0x12ea <_fpadd_parts+0x22c>
    1260:	99 23       	and	r25, r25
    1262:	39 f0       	breq	.+14     	; 0x1272 <_fpadd_parts+0x1b4>
    1264:	a8 01       	movw	r20, r16
    1266:	97 01       	movw	r18, r14
    1268:	2a 19       	sub	r18, r10
    126a:	3b 09       	sbc	r19, r11
    126c:	4c 09       	sbc	r20, r12
    126e:	5d 09       	sbc	r21, r13
    1270:	06 c0       	rjmp	.+12     	; 0x127e <_fpadd_parts+0x1c0>
    1272:	a6 01       	movw	r20, r12
    1274:	95 01       	movw	r18, r10
    1276:	2e 19       	sub	r18, r14
    1278:	3f 09       	sbc	r19, r15
    127a:	40 0b       	sbc	r20, r16
    127c:	51 0b       	sbc	r21, r17
    127e:	57 fd       	sbrc	r21, 7
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <_fpadd_parts+0x1d4>
    1282:	11 82       	std	Z+1, r1	; 0x01
    1284:	33 82       	std	Z+3, r3	; 0x03
    1286:	22 82       	std	Z+2, r2	; 0x02
    1288:	24 83       	std	Z+4, r18	; 0x04
    128a:	35 83       	std	Z+5, r19	; 0x05
    128c:	46 83       	std	Z+6, r20	; 0x06
    128e:	57 83       	std	Z+7, r21	; 0x07
    1290:	1d c0       	rjmp	.+58     	; 0x12cc <_fpadd_parts+0x20e>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	81 83       	std	Z+1, r24	; 0x01
    1296:	33 82       	std	Z+3, r3	; 0x03
    1298:	22 82       	std	Z+2, r2	; 0x02
    129a:	88 27       	eor	r24, r24
    129c:	99 27       	eor	r25, r25
    129e:	dc 01       	movw	r26, r24
    12a0:	82 1b       	sub	r24, r18
    12a2:	93 0b       	sbc	r25, r19
    12a4:	a4 0b       	sbc	r26, r20
    12a6:	b5 0b       	sbc	r27, r21
    12a8:	84 83       	std	Z+4, r24	; 0x04
    12aa:	95 83       	std	Z+5, r25	; 0x05
    12ac:	a6 83       	std	Z+6, r26	; 0x06
    12ae:	b7 83       	std	Z+7, r27	; 0x07
    12b0:	0d c0       	rjmp	.+26     	; 0x12cc <_fpadd_parts+0x20e>
    12b2:	22 0f       	add	r18, r18
    12b4:	33 1f       	adc	r19, r19
    12b6:	44 1f       	adc	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	24 83       	std	Z+4, r18	; 0x04
    12bc:	35 83       	std	Z+5, r19	; 0x05
    12be:	46 83       	std	Z+6, r20	; 0x06
    12c0:	57 83       	std	Z+7, r21	; 0x07
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	93 83       	std	Z+3, r25	; 0x03
    12ca:	82 83       	std	Z+2, r24	; 0x02
    12cc:	24 81       	ldd	r18, Z+4	; 0x04
    12ce:	35 81       	ldd	r19, Z+5	; 0x05
    12d0:	46 81       	ldd	r20, Z+6	; 0x06
    12d2:	57 81       	ldd	r21, Z+7	; 0x07
    12d4:	da 01       	movw	r26, r20
    12d6:	c9 01       	movw	r24, r18
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	a1 09       	sbc	r26, r1
    12dc:	b1 09       	sbc	r27, r1
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	af 4f       	sbci	r26, 0xFF	; 255
    12e4:	bf 43       	sbci	r27, 0x3F	; 63
    12e6:	28 f3       	brcs	.-54     	; 0x12b2 <_fpadd_parts+0x1f4>
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <_fpadd_parts+0x242>
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	33 82       	std	Z+3, r3	; 0x03
    12ee:	22 82       	std	Z+2, r2	; 0x02
    12f0:	ea 0c       	add	r14, r10
    12f2:	fb 1c       	adc	r15, r11
    12f4:	0c 1d       	adc	r16, r12
    12f6:	1d 1d       	adc	r17, r13
    12f8:	e4 82       	std	Z+4, r14	; 0x04
    12fa:	f5 82       	std	Z+5, r15	; 0x05
    12fc:	06 83       	std	Z+6, r16	; 0x06
    12fe:	17 83       	std	Z+7, r17	; 0x07
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	80 83       	st	Z, r24
    1304:	24 81       	ldd	r18, Z+4	; 0x04
    1306:	35 81       	ldd	r19, Z+5	; 0x05
    1308:	46 81       	ldd	r20, Z+6	; 0x06
    130a:	57 81       	ldd	r21, Z+7	; 0x07
    130c:	57 ff       	sbrs	r21, 7
    130e:	1a c0       	rjmp	.+52     	; 0x1344 <_fpadd_parts+0x286>
    1310:	c9 01       	movw	r24, r18
    1312:	aa 27       	eor	r26, r26
    1314:	97 fd       	sbrc	r25, 7
    1316:	a0 95       	com	r26
    1318:	ba 2f       	mov	r27, r26
    131a:	81 70       	andi	r24, 0x01	; 1
    131c:	90 70       	andi	r25, 0x00	; 0
    131e:	a0 70       	andi	r26, 0x00	; 0
    1320:	b0 70       	andi	r27, 0x00	; 0
    1322:	56 95       	lsr	r21
    1324:	47 95       	ror	r20
    1326:	37 95       	ror	r19
    1328:	27 95       	ror	r18
    132a:	82 2b       	or	r24, r18
    132c:	93 2b       	or	r25, r19
    132e:	a4 2b       	or	r26, r20
    1330:	b5 2b       	or	r27, r21
    1332:	84 83       	std	Z+4, r24	; 0x04
    1334:	95 83       	std	Z+5, r25	; 0x05
    1336:	a6 83       	std	Z+6, r26	; 0x06
    1338:	b7 83       	std	Z+7, r27	; 0x07
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	93 83       	std	Z+3, r25	; 0x03
    1342:	82 83       	std	Z+2, r24	; 0x02
    1344:	df 01       	movw	r26, r30
    1346:	01 c0       	rjmp	.+2      	; 0x134a <_fpadd_parts+0x28c>
    1348:	d2 01       	movw	r26, r4
    134a:	cd 01       	movw	r24, r26
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	e2 e1       	ldi	r30, 0x12	; 18
    1352:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__epilogue_restores__>

00001356 <__subsf3>:
    1356:	a0 e2       	ldi	r26, 0x20	; 32
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e1 eb       	ldi	r30, 0xB1	; 177
    135c:	f9 e0       	ldi	r31, 0x09	; 9
    135e:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__prologue_saves__+0x18>
    1362:	69 83       	std	Y+1, r22	; 0x01
    1364:	7a 83       	std	Y+2, r23	; 0x02
    1366:	8b 83       	std	Y+3, r24	; 0x03
    1368:	9c 83       	std	Y+4, r25	; 0x04
    136a:	2d 83       	std	Y+5, r18	; 0x05
    136c:	3e 83       	std	Y+6, r19	; 0x06
    136e:	4f 83       	std	Y+7, r20	; 0x07
    1370:	58 87       	std	Y+8, r21	; 0x08
    1372:	e9 e0       	ldi	r30, 0x09	; 9
    1374:	ee 2e       	mov	r14, r30
    1376:	f1 2c       	mov	r15, r1
    1378:	ec 0e       	add	r14, r28
    137a:	fd 1e       	adc	r15, r29
    137c:	ce 01       	movw	r24, r28
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	b7 01       	movw	r22, r14
    1382:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    1386:	8e 01       	movw	r16, r28
    1388:	0f 5e       	subi	r16, 0xEF	; 239
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	ce 01       	movw	r24, r28
    138e:	05 96       	adiw	r24, 0x05	; 5
    1390:	b8 01       	movw	r22, r16
    1392:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    1396:	8a 89       	ldd	r24, Y+18	; 0x12
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	89 27       	eor	r24, r25
    139c:	8a 8b       	std	Y+18, r24	; 0x12
    139e:	c7 01       	movw	r24, r14
    13a0:	b8 01       	movw	r22, r16
    13a2:	ae 01       	movw	r20, r28
    13a4:	47 5e       	subi	r20, 0xE7	; 231
    13a6:	5f 4f       	sbci	r21, 0xFF	; 255
    13a8:	0e 94 5f 08 	call	0x10be	; 0x10be <_fpadd_parts>
    13ac:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__pack_f>
    13b0:	a0 96       	adiw	r28, 0x20	; 32
    13b2:	e6 e0       	ldi	r30, 0x06	; 6
    13b4:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__epilogue_restores__+0x18>

000013b8 <__addsf3>:
    13b8:	a0 e2       	ldi	r26, 0x20	; 32
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 ee       	ldi	r30, 0xE2	; 226
    13be:	f9 e0       	ldi	r31, 0x09	; 9
    13c0:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__prologue_saves__+0x18>
    13c4:	69 83       	std	Y+1, r22	; 0x01
    13c6:	7a 83       	std	Y+2, r23	; 0x02
    13c8:	8b 83       	std	Y+3, r24	; 0x03
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	2d 83       	std	Y+5, r18	; 0x05
    13ce:	3e 83       	std	Y+6, r19	; 0x06
    13d0:	4f 83       	std	Y+7, r20	; 0x07
    13d2:	58 87       	std	Y+8, r21	; 0x08
    13d4:	f9 e0       	ldi	r31, 0x09	; 9
    13d6:	ef 2e       	mov	r14, r31
    13d8:	f1 2c       	mov	r15, r1
    13da:	ec 0e       	add	r14, r28
    13dc:	fd 1e       	adc	r15, r29
    13de:	ce 01       	movw	r24, r28
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	b7 01       	movw	r22, r14
    13e4:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    13e8:	8e 01       	movw	r16, r28
    13ea:	0f 5e       	subi	r16, 0xEF	; 239
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	ce 01       	movw	r24, r28
    13f0:	05 96       	adiw	r24, 0x05	; 5
    13f2:	b8 01       	movw	r22, r16
    13f4:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    13f8:	c7 01       	movw	r24, r14
    13fa:	b8 01       	movw	r22, r16
    13fc:	ae 01       	movw	r20, r28
    13fe:	47 5e       	subi	r20, 0xE7	; 231
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	0e 94 5f 08 	call	0x10be	; 0x10be <_fpadd_parts>
    1406:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__pack_f>
    140a:	a0 96       	adiw	r28, 0x20	; 32
    140c:	e6 e0       	ldi	r30, 0x06	; 6
    140e:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__epilogue_restores__+0x18>

00001412 <__mulsf3>:
    1412:	a0 e2       	ldi	r26, 0x20	; 32
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ef e0       	ldi	r30, 0x0F	; 15
    1418:	fa e0       	ldi	r31, 0x0A	; 10
    141a:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__prologue_saves__>
    141e:	69 83       	std	Y+1, r22	; 0x01
    1420:	7a 83       	std	Y+2, r23	; 0x02
    1422:	8b 83       	std	Y+3, r24	; 0x03
    1424:	9c 83       	std	Y+4, r25	; 0x04
    1426:	2d 83       	std	Y+5, r18	; 0x05
    1428:	3e 83       	std	Y+6, r19	; 0x06
    142a:	4f 83       	std	Y+7, r20	; 0x07
    142c:	58 87       	std	Y+8, r21	; 0x08
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	be 01       	movw	r22, r28
    1434:	67 5f       	subi	r22, 0xF7	; 247
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    143c:	ce 01       	movw	r24, r28
    143e:	05 96       	adiw	r24, 0x05	; 5
    1440:	be 01       	movw	r22, r28
    1442:	6f 5e       	subi	r22, 0xEF	; 239
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    144a:	99 85       	ldd	r25, Y+9	; 0x09
    144c:	92 30       	cpi	r25, 0x02	; 2
    144e:	88 f0       	brcs	.+34     	; 0x1472 <__mulsf3+0x60>
    1450:	89 89       	ldd	r24, Y+17	; 0x11
    1452:	82 30       	cpi	r24, 0x02	; 2
    1454:	c8 f0       	brcs	.+50     	; 0x1488 <__mulsf3+0x76>
    1456:	94 30       	cpi	r25, 0x04	; 4
    1458:	19 f4       	brne	.+6      	; 0x1460 <__mulsf3+0x4e>
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	51 f4       	brne	.+20     	; 0x1472 <__mulsf3+0x60>
    145e:	04 c0       	rjmp	.+8      	; 0x1468 <__mulsf3+0x56>
    1460:	84 30       	cpi	r24, 0x04	; 4
    1462:	29 f4       	brne	.+10     	; 0x146e <__mulsf3+0x5c>
    1464:	92 30       	cpi	r25, 0x02	; 2
    1466:	81 f4       	brne	.+32     	; 0x1488 <__mulsf3+0x76>
    1468:	88 ea       	ldi	r24, 0xA8	; 168
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	c6 c0       	rjmp	.+396    	; 0x15fa <__mulsf3+0x1e8>
    146e:	92 30       	cpi	r25, 0x02	; 2
    1470:	49 f4       	brne	.+18     	; 0x1484 <__mulsf3+0x72>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	8a 89       	ldd	r24, Y+18	; 0x12
    1478:	98 13       	cpse	r25, r24
    147a:	21 e0       	ldi	r18, 0x01	; 1
    147c:	2a 87       	std	Y+10, r18	; 0x0a
    147e:	ce 01       	movw	r24, r28
    1480:	09 96       	adiw	r24, 0x09	; 9
    1482:	bb c0       	rjmp	.+374    	; 0x15fa <__mulsf3+0x1e8>
    1484:	82 30       	cpi	r24, 0x02	; 2
    1486:	49 f4       	brne	.+18     	; 0x149a <__mulsf3+0x88>
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	9a 85       	ldd	r25, Y+10	; 0x0a
    148c:	8a 89       	ldd	r24, Y+18	; 0x12
    148e:	98 13       	cpse	r25, r24
    1490:	21 e0       	ldi	r18, 0x01	; 1
    1492:	2a 8b       	std	Y+18, r18	; 0x12
    1494:	ce 01       	movw	r24, r28
    1496:	41 96       	adiw	r24, 0x11	; 17
    1498:	b0 c0       	rjmp	.+352    	; 0x15fa <__mulsf3+0x1e8>
    149a:	2d 84       	ldd	r2, Y+13	; 0x0d
    149c:	3e 84       	ldd	r3, Y+14	; 0x0e
    149e:	4f 84       	ldd	r4, Y+15	; 0x0f
    14a0:	58 88       	ldd	r5, Y+16	; 0x10
    14a2:	6d 88       	ldd	r6, Y+21	; 0x15
    14a4:	7e 88       	ldd	r7, Y+22	; 0x16
    14a6:	8f 88       	ldd	r8, Y+23	; 0x17
    14a8:	98 8c       	ldd	r9, Y+24	; 0x18
    14aa:	ee 24       	eor	r14, r14
    14ac:	ff 24       	eor	r15, r15
    14ae:	87 01       	movw	r16, r14
    14b0:	aa 24       	eor	r10, r10
    14b2:	bb 24       	eor	r11, r11
    14b4:	65 01       	movw	r12, r10
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	e0 e0       	ldi	r30, 0x00	; 0
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	c1 01       	movw	r24, r2
    14c4:	81 70       	andi	r24, 0x01	; 1
    14c6:	90 70       	andi	r25, 0x00	; 0
    14c8:	89 2b       	or	r24, r25
    14ca:	e9 f0       	breq	.+58     	; 0x1506 <__mulsf3+0xf4>
    14cc:	e6 0c       	add	r14, r6
    14ce:	f7 1c       	adc	r15, r7
    14d0:	08 1d       	adc	r16, r8
    14d2:	19 1d       	adc	r17, r9
    14d4:	9a 01       	movw	r18, r20
    14d6:	ab 01       	movw	r20, r22
    14d8:	2a 0d       	add	r18, r10
    14da:	3b 1d       	adc	r19, r11
    14dc:	4c 1d       	adc	r20, r12
    14de:	5d 1d       	adc	r21, r13
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e6 14       	cp	r14, r6
    14ea:	f7 04       	cpc	r15, r7
    14ec:	08 05       	cpc	r16, r8
    14ee:	19 05       	cpc	r17, r9
    14f0:	20 f4       	brcc	.+8      	; 0x14fa <__mulsf3+0xe8>
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ba 01       	movw	r22, r20
    14fc:	a9 01       	movw	r20, r18
    14fe:	48 0f       	add	r20, r24
    1500:	59 1f       	adc	r21, r25
    1502:	6a 1f       	adc	r22, r26
    1504:	7b 1f       	adc	r23, r27
    1506:	aa 0c       	add	r10, r10
    1508:	bb 1c       	adc	r11, r11
    150a:	cc 1c       	adc	r12, r12
    150c:	dd 1c       	adc	r13, r13
    150e:	97 fe       	sbrs	r9, 7
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <__mulsf3+0x110>
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a0 e0       	ldi	r26, 0x00	; 0
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	a8 2a       	or	r10, r24
    151c:	b9 2a       	or	r11, r25
    151e:	ca 2a       	or	r12, r26
    1520:	db 2a       	or	r13, r27
    1522:	31 96       	adiw	r30, 0x01	; 1
    1524:	e0 32       	cpi	r30, 0x20	; 32
    1526:	f1 05       	cpc	r31, r1
    1528:	49 f0       	breq	.+18     	; 0x153c <__mulsf3+0x12a>
    152a:	66 0c       	add	r6, r6
    152c:	77 1c       	adc	r7, r7
    152e:	88 1c       	adc	r8, r8
    1530:	99 1c       	adc	r9, r9
    1532:	56 94       	lsr	r5
    1534:	47 94       	ror	r4
    1536:	37 94       	ror	r3
    1538:	27 94       	ror	r2
    153a:	c3 cf       	rjmp	.-122    	; 0x14c2 <__mulsf3+0xb0>
    153c:	fa 85       	ldd	r31, Y+10	; 0x0a
    153e:	ea 89       	ldd	r30, Y+18	; 0x12
    1540:	2b 89       	ldd	r18, Y+19	; 0x13
    1542:	3c 89       	ldd	r19, Y+20	; 0x14
    1544:	8b 85       	ldd	r24, Y+11	; 0x0b
    1546:	9c 85       	ldd	r25, Y+12	; 0x0c
    1548:	28 0f       	add	r18, r24
    154a:	39 1f       	adc	r19, r25
    154c:	2e 5f       	subi	r18, 0xFE	; 254
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	17 c0       	rjmp	.+46     	; 0x1580 <__mulsf3+0x16e>
    1552:	ca 01       	movw	r24, r20
    1554:	81 70       	andi	r24, 0x01	; 1
    1556:	90 70       	andi	r25, 0x00	; 0
    1558:	89 2b       	or	r24, r25
    155a:	61 f0       	breq	.+24     	; 0x1574 <__mulsf3+0x162>
    155c:	16 95       	lsr	r17
    155e:	07 95       	ror	r16
    1560:	f7 94       	ror	r15
    1562:	e7 94       	ror	r14
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a0 e0       	ldi	r26, 0x00	; 0
    156a:	b0 e8       	ldi	r27, 0x80	; 128
    156c:	e8 2a       	or	r14, r24
    156e:	f9 2a       	or	r15, r25
    1570:	0a 2b       	or	r16, r26
    1572:	1b 2b       	or	r17, r27
    1574:	76 95       	lsr	r23
    1576:	67 95       	ror	r22
    1578:	57 95       	ror	r21
    157a:	47 95       	ror	r20
    157c:	2f 5f       	subi	r18, 0xFF	; 255
    157e:	3f 4f       	sbci	r19, 0xFF	; 255
    1580:	77 fd       	sbrc	r23, 7
    1582:	e7 cf       	rjmp	.-50     	; 0x1552 <__mulsf3+0x140>
    1584:	0c c0       	rjmp	.+24     	; 0x159e <__mulsf3+0x18c>
    1586:	44 0f       	add	r20, r20
    1588:	55 1f       	adc	r21, r21
    158a:	66 1f       	adc	r22, r22
    158c:	77 1f       	adc	r23, r23
    158e:	17 fd       	sbrc	r17, 7
    1590:	41 60       	ori	r20, 0x01	; 1
    1592:	ee 0c       	add	r14, r14
    1594:	ff 1c       	adc	r15, r15
    1596:	00 1f       	adc	r16, r16
    1598:	11 1f       	adc	r17, r17
    159a:	21 50       	subi	r18, 0x01	; 1
    159c:	30 40       	sbci	r19, 0x00	; 0
    159e:	40 30       	cpi	r20, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	59 07       	cpc	r21, r25
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	69 07       	cpc	r22, r25
    15a8:	90 e4       	ldi	r25, 0x40	; 64
    15aa:	79 07       	cpc	r23, r25
    15ac:	60 f3       	brcs	.-40     	; 0x1586 <__mulsf3+0x174>
    15ae:	2b 8f       	std	Y+27, r18	; 0x1b
    15b0:	3c 8f       	std	Y+28, r19	; 0x1c
    15b2:	db 01       	movw	r26, r22
    15b4:	ca 01       	movw	r24, r20
    15b6:	8f 77       	andi	r24, 0x7F	; 127
    15b8:	90 70       	andi	r25, 0x00	; 0
    15ba:	a0 70       	andi	r26, 0x00	; 0
    15bc:	b0 70       	andi	r27, 0x00	; 0
    15be:	80 34       	cpi	r24, 0x40	; 64
    15c0:	91 05       	cpc	r25, r1
    15c2:	a1 05       	cpc	r26, r1
    15c4:	b1 05       	cpc	r27, r1
    15c6:	61 f4       	brne	.+24     	; 0x15e0 <__mulsf3+0x1ce>
    15c8:	47 fd       	sbrc	r20, 7
    15ca:	0a c0       	rjmp	.+20     	; 0x15e0 <__mulsf3+0x1ce>
    15cc:	e1 14       	cp	r14, r1
    15ce:	f1 04       	cpc	r15, r1
    15d0:	01 05       	cpc	r16, r1
    15d2:	11 05       	cpc	r17, r1
    15d4:	29 f0       	breq	.+10     	; 0x15e0 <__mulsf3+0x1ce>
    15d6:	40 5c       	subi	r20, 0xC0	; 192
    15d8:	5f 4f       	sbci	r21, 0xFF	; 255
    15da:	6f 4f       	sbci	r22, 0xFF	; 255
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	40 78       	andi	r20, 0x80	; 128
    15e0:	1a 8e       	std	Y+26, r1	; 0x1a
    15e2:	fe 17       	cp	r31, r30
    15e4:	11 f0       	breq	.+4      	; 0x15ea <__mulsf3+0x1d8>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	8a 8f       	std	Y+26, r24	; 0x1a
    15ea:	4d 8f       	std	Y+29, r20	; 0x1d
    15ec:	5e 8f       	std	Y+30, r21	; 0x1e
    15ee:	6f 8f       	std	Y+31, r22	; 0x1f
    15f0:	78 a3       	std	Y+32, r23	; 0x20
    15f2:	83 e0       	ldi	r24, 0x03	; 3
    15f4:	89 8f       	std	Y+25, r24	; 0x19
    15f6:	ce 01       	movw	r24, r28
    15f8:	49 96       	adiw	r24, 0x19	; 25
    15fa:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__pack_f>
    15fe:	a0 96       	adiw	r28, 0x20	; 32
    1600:	e2 e1       	ldi	r30, 0x12	; 18
    1602:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__epilogue_restores__>

00001606 <__gtsf2>:
    1606:	a8 e1       	ldi	r26, 0x18	; 24
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e9 e0       	ldi	r30, 0x09	; 9
    160c:	fb e0       	ldi	r31, 0x0B	; 11
    160e:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__prologue_saves__+0x18>
    1612:	69 83       	std	Y+1, r22	; 0x01
    1614:	7a 83       	std	Y+2, r23	; 0x02
    1616:	8b 83       	std	Y+3, r24	; 0x03
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	2d 83       	std	Y+5, r18	; 0x05
    161c:	3e 83       	std	Y+6, r19	; 0x06
    161e:	4f 83       	std	Y+7, r20	; 0x07
    1620:	58 87       	std	Y+8, r21	; 0x08
    1622:	89 e0       	ldi	r24, 0x09	; 9
    1624:	e8 2e       	mov	r14, r24
    1626:	f1 2c       	mov	r15, r1
    1628:	ec 0e       	add	r14, r28
    162a:	fd 1e       	adc	r15, r29
    162c:	ce 01       	movw	r24, r28
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	b7 01       	movw	r22, r14
    1632:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    1636:	8e 01       	movw	r16, r28
    1638:	0f 5e       	subi	r16, 0xEF	; 239
    163a:	1f 4f       	sbci	r17, 0xFF	; 255
    163c:	ce 01       	movw	r24, r28
    163e:	05 96       	adiw	r24, 0x05	; 5
    1640:	b8 01       	movw	r22, r16
    1642:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	40 f0       	brcs	.+16     	; 0x165c <__gtsf2+0x56>
    164c:	89 89       	ldd	r24, Y+17	; 0x11
    164e:	82 30       	cpi	r24, 0x02	; 2
    1650:	28 f0       	brcs	.+10     	; 0x165c <__gtsf2+0x56>
    1652:	c7 01       	movw	r24, r14
    1654:	b8 01       	movw	r22, r16
    1656:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fpcmp_parts_f>
    165a:	01 c0       	rjmp	.+2      	; 0x165e <__gtsf2+0x58>
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	68 96       	adiw	r28, 0x18	; 24
    1660:	e6 e0       	ldi	r30, 0x06	; 6
    1662:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__epilogue_restores__+0x18>

00001666 <__gesf2>:
    1666:	a8 e1       	ldi	r26, 0x18	; 24
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e9 e3       	ldi	r30, 0x39	; 57
    166c:	fb e0       	ldi	r31, 0x0B	; 11
    166e:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__prologue_saves__+0x18>
    1672:	69 83       	std	Y+1, r22	; 0x01
    1674:	7a 83       	std	Y+2, r23	; 0x02
    1676:	8b 83       	std	Y+3, r24	; 0x03
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	2d 83       	std	Y+5, r18	; 0x05
    167c:	3e 83       	std	Y+6, r19	; 0x06
    167e:	4f 83       	std	Y+7, r20	; 0x07
    1680:	58 87       	std	Y+8, r21	; 0x08
    1682:	89 e0       	ldi	r24, 0x09	; 9
    1684:	e8 2e       	mov	r14, r24
    1686:	f1 2c       	mov	r15, r1
    1688:	ec 0e       	add	r14, r28
    168a:	fd 1e       	adc	r15, r29
    168c:	ce 01       	movw	r24, r28
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	b7 01       	movw	r22, r14
    1692:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    1696:	8e 01       	movw	r16, r28
    1698:	0f 5e       	subi	r16, 0xEF	; 239
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	ce 01       	movw	r24, r28
    169e:	05 96       	adiw	r24, 0x05	; 5
    16a0:	b8 01       	movw	r22, r16
    16a2:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	40 f0       	brcs	.+16     	; 0x16bc <__gesf2+0x56>
    16ac:	89 89       	ldd	r24, Y+17	; 0x11
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	28 f0       	brcs	.+10     	; 0x16bc <__gesf2+0x56>
    16b2:	c7 01       	movw	r24, r14
    16b4:	b8 01       	movw	r22, r16
    16b6:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fpcmp_parts_f>
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <__gesf2+0x58>
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	68 96       	adiw	r28, 0x18	; 24
    16c0:	e6 e0       	ldi	r30, 0x06	; 6
    16c2:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__epilogue_restores__+0x18>

000016c6 <__ltsf2>:
    16c6:	a8 e1       	ldi	r26, 0x18	; 24
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e9 e6       	ldi	r30, 0x69	; 105
    16cc:	fb e0       	ldi	r31, 0x0B	; 11
    16ce:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__prologue_saves__+0x18>
    16d2:	69 83       	std	Y+1, r22	; 0x01
    16d4:	7a 83       	std	Y+2, r23	; 0x02
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	2d 83       	std	Y+5, r18	; 0x05
    16dc:	3e 83       	std	Y+6, r19	; 0x06
    16de:	4f 83       	std	Y+7, r20	; 0x07
    16e0:	58 87       	std	Y+8, r21	; 0x08
    16e2:	89 e0       	ldi	r24, 0x09	; 9
    16e4:	e8 2e       	mov	r14, r24
    16e6:	f1 2c       	mov	r15, r1
    16e8:	ec 0e       	add	r14, r28
    16ea:	fd 1e       	adc	r15, r29
    16ec:	ce 01       	movw	r24, r28
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	b7 01       	movw	r22, r14
    16f2:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    16f6:	8e 01       	movw	r16, r28
    16f8:	0f 5e       	subi	r16, 0xEF	; 239
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	ce 01       	movw	r24, r28
    16fe:	05 96       	adiw	r24, 0x05	; 5
    1700:	b8 01       	movw	r22, r16
    1702:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	40 f0       	brcs	.+16     	; 0x171c <__ltsf2+0x56>
    170c:	89 89       	ldd	r24, Y+17	; 0x11
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	28 f0       	brcs	.+10     	; 0x171c <__ltsf2+0x56>
    1712:	c7 01       	movw	r24, r14
    1714:	b8 01       	movw	r22, r16
    1716:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fpcmp_parts_f>
    171a:	01 c0       	rjmp	.+2      	; 0x171e <__ltsf2+0x58>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	68 96       	adiw	r28, 0x18	; 24
    1720:	e6 e0       	ldi	r30, 0x06	; 6
    1722:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__epilogue_restores__+0x18>

00001726 <__fixsfsi>:
    1726:	ac e0       	ldi	r26, 0x0C	; 12
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e9 e9       	ldi	r30, 0x99	; 153
    172c:	fb e0       	ldi	r31, 0x0B	; 11
    172e:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__prologue_saves__+0x20>
    1732:	69 83       	std	Y+1, r22	; 0x01
    1734:	7a 83       	std	Y+2, r23	; 0x02
    1736:	8b 83       	std	Y+3, r24	; 0x03
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	ce 01       	movw	r24, r28
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	be 01       	movw	r22, r28
    1740:	6b 5f       	subi	r22, 0xFB	; 251
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
    1744:	0e 94 bd 0c 	call	0x197a	; 0x197a <__unpack_f>
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	61 f1       	breq	.+88     	; 0x17a6 <__fixsfsi+0x80>
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	50 f1       	brcs	.+84     	; 0x17a6 <__fixsfsi+0x80>
    1752:	84 30       	cpi	r24, 0x04	; 4
    1754:	21 f4       	brne	.+8      	; 0x175e <__fixsfsi+0x38>
    1756:	8e 81       	ldd	r24, Y+6	; 0x06
    1758:	88 23       	and	r24, r24
    175a:	51 f1       	breq	.+84     	; 0x17b0 <__fixsfsi+0x8a>
    175c:	2e c0       	rjmp	.+92     	; 0x17ba <__fixsfsi+0x94>
    175e:	2f 81       	ldd	r18, Y+7	; 0x07
    1760:	38 85       	ldd	r19, Y+8	; 0x08
    1762:	37 fd       	sbrc	r19, 7
    1764:	20 c0       	rjmp	.+64     	; 0x17a6 <__fixsfsi+0x80>
    1766:	6e 81       	ldd	r22, Y+6	; 0x06
    1768:	2f 31       	cpi	r18, 0x1F	; 31
    176a:	31 05       	cpc	r19, r1
    176c:	1c f0       	brlt	.+6      	; 0x1774 <__fixsfsi+0x4e>
    176e:	66 23       	and	r22, r22
    1770:	f9 f0       	breq	.+62     	; 0x17b0 <__fixsfsi+0x8a>
    1772:	23 c0       	rjmp	.+70     	; 0x17ba <__fixsfsi+0x94>
    1774:	8e e1       	ldi	r24, 0x1E	; 30
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	82 1b       	sub	r24, r18
    177a:	93 0b       	sbc	r25, r19
    177c:	29 85       	ldd	r18, Y+9	; 0x09
    177e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1780:	4b 85       	ldd	r20, Y+11	; 0x0b
    1782:	5c 85       	ldd	r21, Y+12	; 0x0c
    1784:	04 c0       	rjmp	.+8      	; 0x178e <__fixsfsi+0x68>
    1786:	56 95       	lsr	r21
    1788:	47 95       	ror	r20
    178a:	37 95       	ror	r19
    178c:	27 95       	ror	r18
    178e:	8a 95       	dec	r24
    1790:	d2 f7       	brpl	.-12     	; 0x1786 <__fixsfsi+0x60>
    1792:	66 23       	and	r22, r22
    1794:	b1 f0       	breq	.+44     	; 0x17c2 <__fixsfsi+0x9c>
    1796:	50 95       	com	r21
    1798:	40 95       	com	r20
    179a:	30 95       	com	r19
    179c:	21 95       	neg	r18
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	4f 4f       	sbci	r20, 0xFF	; 255
    17a2:	5f 4f       	sbci	r21, 0xFF	; 255
    17a4:	0e c0       	rjmp	.+28     	; 0x17c2 <__fixsfsi+0x9c>
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <__fixsfsi+0x9c>
    17b0:	2f ef       	ldi	r18, 0xFF	; 255
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	4f ef       	ldi	r20, 0xFF	; 255
    17b6:	5f e7       	ldi	r21, 0x7F	; 127
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <__fixsfsi+0x9c>
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	50 e8       	ldi	r21, 0x80	; 128
    17c2:	b9 01       	movw	r22, r18
    17c4:	ca 01       	movw	r24, r20
    17c6:	2c 96       	adiw	r28, 0x0c	; 12
    17c8:	e2 e0       	ldi	r30, 0x02	; 2
    17ca:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__epilogue_restores__+0x20>

000017ce <__pack_f>:
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	fc 01       	movw	r30, r24
    17da:	e4 80       	ldd	r14, Z+4	; 0x04
    17dc:	f5 80       	ldd	r15, Z+5	; 0x05
    17de:	06 81       	ldd	r16, Z+6	; 0x06
    17e0:	17 81       	ldd	r17, Z+7	; 0x07
    17e2:	d1 80       	ldd	r13, Z+1	; 0x01
    17e4:	80 81       	ld	r24, Z
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	58 f4       	brcc	.+22     	; 0x1800 <__pack_f+0x32>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e1       	ldi	r26, 0x10	; 16
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e8 2a       	or	r14, r24
    17f4:	f9 2a       	or	r15, r25
    17f6:	0a 2b       	or	r16, r26
    17f8:	1b 2b       	or	r17, r27
    17fa:	ef ef       	ldi	r30, 0xFF	; 255
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	a6 c0       	rjmp	.+332    	; 0x194c <__pack_f+0x17e>
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	09 f4       	brne	.+2      	; 0x1806 <__pack_f+0x38>
    1804:	9e c0       	rjmp	.+316    	; 0x1942 <__pack_f+0x174>
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	19 f4       	brne	.+6      	; 0x1810 <__pack_f+0x42>
    180a:	e0 e0       	ldi	r30, 0x00	; 0
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	9b c0       	rjmp	.+310    	; 0x1946 <__pack_f+0x178>
    1810:	e1 14       	cp	r14, r1
    1812:	f1 04       	cpc	r15, r1
    1814:	01 05       	cpc	r16, r1
    1816:	11 05       	cpc	r17, r1
    1818:	19 f4       	brne	.+6      	; 0x1820 <__pack_f+0x52>
    181a:	e0 e0       	ldi	r30, 0x00	; 0
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	96 c0       	rjmp	.+300    	; 0x194c <__pack_f+0x17e>
    1820:	62 81       	ldd	r22, Z+2	; 0x02
    1822:	73 81       	ldd	r23, Z+3	; 0x03
    1824:	9f ef       	ldi	r25, 0xFF	; 255
    1826:	62 38       	cpi	r22, 0x82	; 130
    1828:	79 07       	cpc	r23, r25
    182a:	0c f0       	brlt	.+2      	; 0x182e <__pack_f+0x60>
    182c:	5b c0       	rjmp	.+182    	; 0x18e4 <__pack_f+0x116>
    182e:	22 e8       	ldi	r18, 0x82	; 130
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	26 1b       	sub	r18, r22
    1834:	37 0b       	sbc	r19, r23
    1836:	2a 31       	cpi	r18, 0x1A	; 26
    1838:	31 05       	cpc	r19, r1
    183a:	2c f0       	brlt	.+10     	; 0x1846 <__pack_f+0x78>
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	2a c0       	rjmp	.+84     	; 0x189a <__pack_f+0xcc>
    1846:	b8 01       	movw	r22, r16
    1848:	a7 01       	movw	r20, r14
    184a:	02 2e       	mov	r0, r18
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <__pack_f+0x88>
    184e:	76 95       	lsr	r23
    1850:	67 95       	ror	r22
    1852:	57 95       	ror	r21
    1854:	47 95       	ror	r20
    1856:	0a 94       	dec	r0
    1858:	d2 f7       	brpl	.-12     	; 0x184e <__pack_f+0x80>
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	04 c0       	rjmp	.+8      	; 0x186c <__pack_f+0x9e>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	aa 1f       	adc	r26, r26
    186a:	bb 1f       	adc	r27, r27
    186c:	2a 95       	dec	r18
    186e:	d2 f7       	brpl	.-12     	; 0x1864 <__pack_f+0x96>
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	a1 09       	sbc	r26, r1
    1874:	b1 09       	sbc	r27, r1
    1876:	8e 21       	and	r24, r14
    1878:	9f 21       	and	r25, r15
    187a:	a0 23       	and	r26, r16
    187c:	b1 23       	and	r27, r17
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	a1 05       	cpc	r26, r1
    1882:	b1 05       	cpc	r27, r1
    1884:	21 f0       	breq	.+8      	; 0x188e <__pack_f+0xc0>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 e0       	ldi	r26, 0x00	; 0
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	9a 01       	movw	r18, r20
    1890:	ab 01       	movw	r20, r22
    1892:	28 2b       	or	r18, r24
    1894:	39 2b       	or	r19, r25
    1896:	4a 2b       	or	r20, r26
    1898:	5b 2b       	or	r21, r27
    189a:	da 01       	movw	r26, r20
    189c:	c9 01       	movw	r24, r18
    189e:	8f 77       	andi	r24, 0x7F	; 127
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	a0 70       	andi	r26, 0x00	; 0
    18a4:	b0 70       	andi	r27, 0x00	; 0
    18a6:	80 34       	cpi	r24, 0x40	; 64
    18a8:	91 05       	cpc	r25, r1
    18aa:	a1 05       	cpc	r26, r1
    18ac:	b1 05       	cpc	r27, r1
    18ae:	39 f4       	brne	.+14     	; 0x18be <__pack_f+0xf0>
    18b0:	27 ff       	sbrs	r18, 7
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <__pack_f+0xf8>
    18b4:	20 5c       	subi	r18, 0xC0	; 192
    18b6:	3f 4f       	sbci	r19, 0xFF	; 255
    18b8:	4f 4f       	sbci	r20, 0xFF	; 255
    18ba:	5f 4f       	sbci	r21, 0xFF	; 255
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__pack_f+0xf8>
    18be:	21 5c       	subi	r18, 0xC1	; 193
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	4f 4f       	sbci	r20, 0xFF	; 255
    18c4:	5f 4f       	sbci	r21, 0xFF	; 255
    18c6:	e0 e0       	ldi	r30, 0x00	; 0
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	20 30       	cpi	r18, 0x00	; 0
    18cc:	a0 e0       	ldi	r26, 0x00	; 0
    18ce:	3a 07       	cpc	r19, r26
    18d0:	a0 e0       	ldi	r26, 0x00	; 0
    18d2:	4a 07       	cpc	r20, r26
    18d4:	a0 e4       	ldi	r26, 0x40	; 64
    18d6:	5a 07       	cpc	r21, r26
    18d8:	10 f0       	brcs	.+4      	; 0x18de <__pack_f+0x110>
    18da:	e1 e0       	ldi	r30, 0x01	; 1
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	79 01       	movw	r14, r18
    18e0:	8a 01       	movw	r16, r20
    18e2:	27 c0       	rjmp	.+78     	; 0x1932 <__pack_f+0x164>
    18e4:	60 38       	cpi	r22, 0x80	; 128
    18e6:	71 05       	cpc	r23, r1
    18e8:	64 f5       	brge	.+88     	; 0x1942 <__pack_f+0x174>
    18ea:	fb 01       	movw	r30, r22
    18ec:	e1 58       	subi	r30, 0x81	; 129
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	d8 01       	movw	r26, r16
    18f2:	c7 01       	movw	r24, r14
    18f4:	8f 77       	andi	r24, 0x7F	; 127
    18f6:	90 70       	andi	r25, 0x00	; 0
    18f8:	a0 70       	andi	r26, 0x00	; 0
    18fa:	b0 70       	andi	r27, 0x00	; 0
    18fc:	80 34       	cpi	r24, 0x40	; 64
    18fe:	91 05       	cpc	r25, r1
    1900:	a1 05       	cpc	r26, r1
    1902:	b1 05       	cpc	r27, r1
    1904:	39 f4       	brne	.+14     	; 0x1914 <__pack_f+0x146>
    1906:	e7 fe       	sbrs	r14, 7
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <__pack_f+0x156>
    190a:	80 e4       	ldi	r24, 0x40	; 64
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a0 e0       	ldi	r26, 0x00	; 0
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	04 c0       	rjmp	.+8      	; 0x191c <__pack_f+0x14e>
    1914:	8f e3       	ldi	r24, 0x3F	; 63
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a0 e0       	ldi	r26, 0x00	; 0
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e8 0e       	add	r14, r24
    191e:	f9 1e       	adc	r15, r25
    1920:	0a 1f       	adc	r16, r26
    1922:	1b 1f       	adc	r17, r27
    1924:	17 ff       	sbrs	r17, 7
    1926:	05 c0       	rjmp	.+10     	; 0x1932 <__pack_f+0x164>
    1928:	16 95       	lsr	r17
    192a:	07 95       	ror	r16
    192c:	f7 94       	ror	r15
    192e:	e7 94       	ror	r14
    1930:	31 96       	adiw	r30, 0x01	; 1
    1932:	87 e0       	ldi	r24, 0x07	; 7
    1934:	16 95       	lsr	r17
    1936:	07 95       	ror	r16
    1938:	f7 94       	ror	r15
    193a:	e7 94       	ror	r14
    193c:	8a 95       	dec	r24
    193e:	d1 f7       	brne	.-12     	; 0x1934 <__pack_f+0x166>
    1940:	05 c0       	rjmp	.+10     	; 0x194c <__pack_f+0x17e>
    1942:	ef ef       	ldi	r30, 0xFF	; 255
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	ee 24       	eor	r14, r14
    1948:	ff 24       	eor	r15, r15
    194a:	87 01       	movw	r16, r14
    194c:	6e 2f       	mov	r22, r30
    194e:	67 95       	ror	r22
    1950:	66 27       	eor	r22, r22
    1952:	67 95       	ror	r22
    1954:	90 2f       	mov	r25, r16
    1956:	9f 77       	andi	r25, 0x7F	; 127
    1958:	d7 94       	ror	r13
    195a:	dd 24       	eor	r13, r13
    195c:	d7 94       	ror	r13
    195e:	8e 2f       	mov	r24, r30
    1960:	86 95       	lsr	r24
    1962:	49 2f       	mov	r20, r25
    1964:	46 2b       	or	r20, r22
    1966:	58 2f       	mov	r21, r24
    1968:	5d 29       	or	r21, r13
    196a:	b7 01       	movw	r22, r14
    196c:	ca 01       	movw	r24, r20
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	08 95       	ret

0000197a <__unpack_f>:
    197a:	fc 01       	movw	r30, r24
    197c:	db 01       	movw	r26, r22
    197e:	40 81       	ld	r20, Z
    1980:	51 81       	ldd	r21, Z+1	; 0x01
    1982:	22 81       	ldd	r18, Z+2	; 0x02
    1984:	62 2f       	mov	r22, r18
    1986:	6f 77       	andi	r22, 0x7F	; 127
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	22 1f       	adc	r18, r18
    198c:	22 27       	eor	r18, r18
    198e:	22 1f       	adc	r18, r18
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	89 2f       	mov	r24, r25
    1994:	88 0f       	add	r24, r24
    1996:	82 2b       	or	r24, r18
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	99 1f       	adc	r25, r25
    199e:	99 27       	eor	r25, r25
    19a0:	99 1f       	adc	r25, r25
    19a2:	11 96       	adiw	r26, 0x01	; 1
    19a4:	9c 93       	st	X, r25
    19a6:	11 97       	sbiw	r26, 0x01	; 1
    19a8:	21 15       	cp	r18, r1
    19aa:	31 05       	cpc	r19, r1
    19ac:	a9 f5       	brne	.+106    	; 0x1a18 <__unpack_f+0x9e>
    19ae:	41 15       	cp	r20, r1
    19b0:	51 05       	cpc	r21, r1
    19b2:	61 05       	cpc	r22, r1
    19b4:	71 05       	cpc	r23, r1
    19b6:	11 f4       	brne	.+4      	; 0x19bc <__unpack_f+0x42>
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	37 c0       	rjmp	.+110    	; 0x1a2a <__unpack_f+0xb0>
    19bc:	82 e8       	ldi	r24, 0x82	; 130
    19be:	9f ef       	ldi	r25, 0xFF	; 255
    19c0:	13 96       	adiw	r26, 0x03	; 3
    19c2:	9c 93       	st	X, r25
    19c4:	8e 93       	st	-X, r24
    19c6:	12 97       	sbiw	r26, 0x02	; 2
    19c8:	9a 01       	movw	r18, r20
    19ca:	ab 01       	movw	r20, r22
    19cc:	67 e0       	ldi	r22, 0x07	; 7
    19ce:	22 0f       	add	r18, r18
    19d0:	33 1f       	adc	r19, r19
    19d2:	44 1f       	adc	r20, r20
    19d4:	55 1f       	adc	r21, r21
    19d6:	6a 95       	dec	r22
    19d8:	d1 f7       	brne	.-12     	; 0x19ce <__unpack_f+0x54>
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	8c 93       	st	X, r24
    19de:	0d c0       	rjmp	.+26     	; 0x19fa <__unpack_f+0x80>
    19e0:	22 0f       	add	r18, r18
    19e2:	33 1f       	adc	r19, r19
    19e4:	44 1f       	adc	r20, r20
    19e6:	55 1f       	adc	r21, r21
    19e8:	12 96       	adiw	r26, 0x02	; 2
    19ea:	8d 91       	ld	r24, X+
    19ec:	9c 91       	ld	r25, X
    19ee:	13 97       	sbiw	r26, 0x03	; 3
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	13 96       	adiw	r26, 0x03	; 3
    19f4:	9c 93       	st	X, r25
    19f6:	8e 93       	st	-X, r24
    19f8:	12 97       	sbiw	r26, 0x02	; 2
    19fa:	20 30       	cpi	r18, 0x00	; 0
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	38 07       	cpc	r19, r24
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	48 07       	cpc	r20, r24
    1a04:	80 e4       	ldi	r24, 0x40	; 64
    1a06:	58 07       	cpc	r21, r24
    1a08:	58 f3       	brcs	.-42     	; 0x19e0 <__unpack_f+0x66>
    1a0a:	14 96       	adiw	r26, 0x04	; 4
    1a0c:	2d 93       	st	X+, r18
    1a0e:	3d 93       	st	X+, r19
    1a10:	4d 93       	st	X+, r20
    1a12:	5c 93       	st	X, r21
    1a14:	17 97       	sbiw	r26, 0x07	; 7
    1a16:	08 95       	ret
    1a18:	2f 3f       	cpi	r18, 0xFF	; 255
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	79 f4       	brne	.+30     	; 0x1a3c <__unpack_f+0xc2>
    1a1e:	41 15       	cp	r20, r1
    1a20:	51 05       	cpc	r21, r1
    1a22:	61 05       	cpc	r22, r1
    1a24:	71 05       	cpc	r23, r1
    1a26:	19 f4       	brne	.+6      	; 0x1a2e <__unpack_f+0xb4>
    1a28:	84 e0       	ldi	r24, 0x04	; 4
    1a2a:	8c 93       	st	X, r24
    1a2c:	08 95       	ret
    1a2e:	64 ff       	sbrs	r22, 4
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <__unpack_f+0xbe>
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	8c 93       	st	X, r24
    1a36:	12 c0       	rjmp	.+36     	; 0x1a5c <__unpack_f+0xe2>
    1a38:	1c 92       	st	X, r1
    1a3a:	10 c0       	rjmp	.+32     	; 0x1a5c <__unpack_f+0xe2>
    1a3c:	2f 57       	subi	r18, 0x7F	; 127
    1a3e:	30 40       	sbci	r19, 0x00	; 0
    1a40:	13 96       	adiw	r26, 0x03	; 3
    1a42:	3c 93       	st	X, r19
    1a44:	2e 93       	st	-X, r18
    1a46:	12 97       	sbiw	r26, 0x02	; 2
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	8c 93       	st	X, r24
    1a4c:	87 e0       	ldi	r24, 0x07	; 7
    1a4e:	44 0f       	add	r20, r20
    1a50:	55 1f       	adc	r21, r21
    1a52:	66 1f       	adc	r22, r22
    1a54:	77 1f       	adc	r23, r23
    1a56:	8a 95       	dec	r24
    1a58:	d1 f7       	brne	.-12     	; 0x1a4e <__unpack_f+0xd4>
    1a5a:	70 64       	ori	r23, 0x40	; 64
    1a5c:	14 96       	adiw	r26, 0x04	; 4
    1a5e:	4d 93       	st	X+, r20
    1a60:	5d 93       	st	X+, r21
    1a62:	6d 93       	st	X+, r22
    1a64:	7c 93       	st	X, r23
    1a66:	17 97       	sbiw	r26, 0x07	; 7
    1a68:	08 95       	ret

00001a6a <__fpcmp_parts_f>:
    1a6a:	1f 93       	push	r17
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	fb 01       	movw	r30, r22
    1a70:	9c 91       	ld	r25, X
    1a72:	92 30       	cpi	r25, 0x02	; 2
    1a74:	08 f4       	brcc	.+2      	; 0x1a78 <__fpcmp_parts_f+0xe>
    1a76:	47 c0       	rjmp	.+142    	; 0x1b06 <__fpcmp_parts_f+0x9c>
    1a78:	80 81       	ld	r24, Z
    1a7a:	82 30       	cpi	r24, 0x02	; 2
    1a7c:	08 f4       	brcc	.+2      	; 0x1a80 <__fpcmp_parts_f+0x16>
    1a7e:	43 c0       	rjmp	.+134    	; 0x1b06 <__fpcmp_parts_f+0x9c>
    1a80:	94 30       	cpi	r25, 0x04	; 4
    1a82:	51 f4       	brne	.+20     	; 0x1a98 <__fpcmp_parts_f+0x2e>
    1a84:	11 96       	adiw	r26, 0x01	; 1
    1a86:	1c 91       	ld	r17, X
    1a88:	84 30       	cpi	r24, 0x04	; 4
    1a8a:	99 f5       	brne	.+102    	; 0x1af2 <__fpcmp_parts_f+0x88>
    1a8c:	81 81       	ldd	r24, Z+1	; 0x01
    1a8e:	68 2f       	mov	r22, r24
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	61 1b       	sub	r22, r17
    1a94:	71 09       	sbc	r23, r1
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <__fpcmp_parts_f+0xac>
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	21 f0       	breq	.+8      	; 0x1aa4 <__fpcmp_parts_f+0x3a>
    1a9c:	92 30       	cpi	r25, 0x02	; 2
    1a9e:	31 f4       	brne	.+12     	; 0x1aac <__fpcmp_parts_f+0x42>
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	b9 f1       	breq	.+110    	; 0x1b12 <__fpcmp_parts_f+0xa8>
    1aa4:	81 81       	ldd	r24, Z+1	; 0x01
    1aa6:	88 23       	and	r24, r24
    1aa8:	89 f1       	breq	.+98     	; 0x1b0c <__fpcmp_parts_f+0xa2>
    1aaa:	2d c0       	rjmp	.+90     	; 0x1b06 <__fpcmp_parts_f+0x9c>
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	1c 91       	ld	r17, X
    1ab0:	11 97       	sbiw	r26, 0x01	; 1
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	f1 f0       	breq	.+60     	; 0x1af2 <__fpcmp_parts_f+0x88>
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	18 17       	cp	r17, r24
    1aba:	d9 f4       	brne	.+54     	; 0x1af2 <__fpcmp_parts_f+0x88>
    1abc:	12 96       	adiw	r26, 0x02	; 2
    1abe:	2d 91       	ld	r18, X+
    1ac0:	3c 91       	ld	r19, X
    1ac2:	13 97       	sbiw	r26, 0x03	; 3
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	82 17       	cp	r24, r18
    1aca:	93 07       	cpc	r25, r19
    1acc:	94 f0       	brlt	.+36     	; 0x1af2 <__fpcmp_parts_f+0x88>
    1ace:	28 17       	cp	r18, r24
    1ad0:	39 07       	cpc	r19, r25
    1ad2:	bc f0       	brlt	.+46     	; 0x1b02 <__fpcmp_parts_f+0x98>
    1ad4:	14 96       	adiw	r26, 0x04	; 4
    1ad6:	8d 91       	ld	r24, X+
    1ad8:	9d 91       	ld	r25, X+
    1ada:	0d 90       	ld	r0, X+
    1adc:	bc 91       	ld	r27, X
    1ade:	a0 2d       	mov	r26, r0
    1ae0:	24 81       	ldd	r18, Z+4	; 0x04
    1ae2:	35 81       	ldd	r19, Z+5	; 0x05
    1ae4:	46 81       	ldd	r20, Z+6	; 0x06
    1ae6:	57 81       	ldd	r21, Z+7	; 0x07
    1ae8:	28 17       	cp	r18, r24
    1aea:	39 07       	cpc	r19, r25
    1aec:	4a 07       	cpc	r20, r26
    1aee:	5b 07       	cpc	r21, r27
    1af0:	18 f4       	brcc	.+6      	; 0x1af8 <__fpcmp_parts_f+0x8e>
    1af2:	11 23       	and	r17, r17
    1af4:	41 f0       	breq	.+16     	; 0x1b06 <__fpcmp_parts_f+0x9c>
    1af6:	0a c0       	rjmp	.+20     	; 0x1b0c <__fpcmp_parts_f+0xa2>
    1af8:	82 17       	cp	r24, r18
    1afa:	93 07       	cpc	r25, r19
    1afc:	a4 07       	cpc	r26, r20
    1afe:	b5 07       	cpc	r27, r21
    1b00:	40 f4       	brcc	.+16     	; 0x1b12 <__fpcmp_parts_f+0xa8>
    1b02:	11 23       	and	r17, r17
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <__fpcmp_parts_f+0xa2>
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	05 c0       	rjmp	.+10     	; 0x1b16 <__fpcmp_parts_f+0xac>
    1b0c:	6f ef       	ldi	r22, 0xFF	; 255
    1b0e:	7f ef       	ldi	r23, 0xFF	; 255
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <__fpcmp_parts_f+0xac>
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	cb 01       	movw	r24, r22
    1b18:	1f 91       	pop	r17
    1b1a:	08 95       	ret

00001b1c <__udivmodqi4>:
    1b1c:	99 1b       	sub	r25, r25
    1b1e:	79 e0       	ldi	r23, 0x09	; 9
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <__udivmodqi4_ep>

00001b22 <__udivmodqi4_loop>:
    1b22:	99 1f       	adc	r25, r25
    1b24:	96 17       	cp	r25, r22
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <__udivmodqi4_ep>
    1b28:	96 1b       	sub	r25, r22

00001b2a <__udivmodqi4_ep>:
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	7a 95       	dec	r23
    1b2e:	c9 f7       	brne	.-14     	; 0x1b22 <__udivmodqi4_loop>
    1b30:	80 95       	com	r24
    1b32:	08 95       	ret

00001b34 <__prologue_saves__>:
    1b34:	2f 92       	push	r2
    1b36:	3f 92       	push	r3
    1b38:	4f 92       	push	r4
    1b3a:	5f 92       	push	r5
    1b3c:	6f 92       	push	r6
    1b3e:	7f 92       	push	r7
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	ca 1b       	sub	r28, r26
    1b5e:	db 0b       	sbc	r29, r27
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	09 94       	ijmp

00001b6c <__epilogue_restores__>:
    1b6c:	2a 88       	ldd	r2, Y+18	; 0x12
    1b6e:	39 88       	ldd	r3, Y+17	; 0x11
    1b70:	48 88       	ldd	r4, Y+16	; 0x10
    1b72:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b74:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b76:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b78:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b7e:	b9 84       	ldd	r11, Y+9	; 0x09
    1b80:	c8 84       	ldd	r12, Y+8	; 0x08
    1b82:	df 80       	ldd	r13, Y+7	; 0x07
    1b84:	ee 80       	ldd	r14, Y+6	; 0x06
    1b86:	fd 80       	ldd	r15, Y+5	; 0x05
    1b88:	0c 81       	ldd	r16, Y+4	; 0x04
    1b8a:	1b 81       	ldd	r17, Y+3	; 0x03
    1b8c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b8e:	b9 81       	ldd	r27, Y+1	; 0x01
    1b90:	ce 0f       	add	r28, r30
    1b92:	d1 1d       	adc	r29, r1
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	ed 01       	movw	r28, r26
    1ba0:	08 95       	ret

00001ba2 <printf>:
    1ba2:	a0 e0       	ldi	r26, 0x00	; 0
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e7 ed       	ldi	r30, 0xD7	; 215
    1ba8:	fd e0       	ldi	r31, 0x0D	; 13
    1baa:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__prologue_saves__+0x20>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	35 96       	adiw	r30, 0x05	; 5
    1bb2:	61 91       	ld	r22, Z+
    1bb4:	71 91       	ld	r23, Z+
    1bb6:	80 91 b2 01 	lds	r24, 0x01B2
    1bba:	90 91 b3 01 	lds	r25, 0x01B3
    1bbe:	af 01       	movw	r20, r30
    1bc0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <vfprintf>
    1bc4:	20 96       	adiw	r28, 0x00	; 0
    1bc6:	e2 e0       	ldi	r30, 0x02	; 2
    1bc8:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__epilogue_restores__+0x20>

00001bcc <vfprintf>:
    1bcc:	ab e0       	ldi	r26, 0x0B	; 11
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	ec ee       	ldi	r30, 0xEC	; 236
    1bd2:	fd e0       	ldi	r31, 0x0D	; 13
    1bd4:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__prologue_saves__>
    1bd8:	3c 01       	movw	r6, r24
    1bda:	2b 01       	movw	r4, r22
    1bdc:	5a 01       	movw	r10, r20
    1bde:	fc 01       	movw	r30, r24
    1be0:	17 82       	std	Z+7, r1	; 0x07
    1be2:	16 82       	std	Z+6, r1	; 0x06
    1be4:	83 81       	ldd	r24, Z+3	; 0x03
    1be6:	81 fd       	sbrc	r24, 1
    1be8:	03 c0       	rjmp	.+6      	; 0x1bf0 <vfprintf+0x24>
    1bea:	6f ef       	ldi	r22, 0xFF	; 255
    1bec:	7f ef       	ldi	r23, 0xFF	; 255
    1bee:	c6 c1       	rjmp	.+908    	; 0x1f7c <vfprintf+0x3b0>
    1bf0:	9a e0       	ldi	r25, 0x0A	; 10
    1bf2:	89 2e       	mov	r8, r25
    1bf4:	1e 01       	movw	r2, r28
    1bf6:	08 94       	sec
    1bf8:	21 1c       	adc	r2, r1
    1bfa:	31 1c       	adc	r3, r1
    1bfc:	f3 01       	movw	r30, r6
    1bfe:	23 81       	ldd	r18, Z+3	; 0x03
    1c00:	f2 01       	movw	r30, r4
    1c02:	23 fd       	sbrc	r18, 3
    1c04:	85 91       	lpm	r24, Z+
    1c06:	23 ff       	sbrs	r18, 3
    1c08:	81 91       	ld	r24, Z+
    1c0a:	2f 01       	movw	r4, r30
    1c0c:	88 23       	and	r24, r24
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <vfprintf+0x46>
    1c10:	b2 c1       	rjmp	.+868    	; 0x1f76 <vfprintf+0x3aa>
    1c12:	85 32       	cpi	r24, 0x25	; 37
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <vfprintf+0x58>
    1c16:	23 fd       	sbrc	r18, 3
    1c18:	85 91       	lpm	r24, Z+
    1c1a:	23 ff       	sbrs	r18, 3
    1c1c:	81 91       	ld	r24, Z+
    1c1e:	2f 01       	movw	r4, r30
    1c20:	85 32       	cpi	r24, 0x25	; 37
    1c22:	29 f4       	brne	.+10     	; 0x1c2e <vfprintf+0x62>
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	b3 01       	movw	r22, r6
    1c28:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1c2c:	e7 cf       	rjmp	.-50     	; 0x1bfc <vfprintf+0x30>
    1c2e:	98 2f       	mov	r25, r24
    1c30:	ff 24       	eor	r15, r15
    1c32:	ee 24       	eor	r14, r14
    1c34:	99 24       	eor	r9, r9
    1c36:	ff e1       	ldi	r31, 0x1F	; 31
    1c38:	ff 15       	cp	r31, r15
    1c3a:	d0 f0       	brcs	.+52     	; 0x1c70 <vfprintf+0xa4>
    1c3c:	9b 32       	cpi	r25, 0x2B	; 43
    1c3e:	69 f0       	breq	.+26     	; 0x1c5a <vfprintf+0x8e>
    1c40:	9c 32       	cpi	r25, 0x2C	; 44
    1c42:	28 f4       	brcc	.+10     	; 0x1c4e <vfprintf+0x82>
    1c44:	90 32       	cpi	r25, 0x20	; 32
    1c46:	59 f0       	breq	.+22     	; 0x1c5e <vfprintf+0x92>
    1c48:	93 32       	cpi	r25, 0x23	; 35
    1c4a:	91 f4       	brne	.+36     	; 0x1c70 <vfprintf+0xa4>
    1c4c:	0e c0       	rjmp	.+28     	; 0x1c6a <vfprintf+0x9e>
    1c4e:	9d 32       	cpi	r25, 0x2D	; 45
    1c50:	49 f0       	breq	.+18     	; 0x1c64 <vfprintf+0x98>
    1c52:	90 33       	cpi	r25, 0x30	; 48
    1c54:	69 f4       	brne	.+26     	; 0x1c70 <vfprintf+0xa4>
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	24 c0       	rjmp	.+72     	; 0x1ca2 <vfprintf+0xd6>
    1c5a:	52 e0       	ldi	r21, 0x02	; 2
    1c5c:	f5 2a       	or	r15, r21
    1c5e:	84 e0       	ldi	r24, 0x04	; 4
    1c60:	f8 2a       	or	r15, r24
    1c62:	28 c0       	rjmp	.+80     	; 0x1cb4 <vfprintf+0xe8>
    1c64:	98 e0       	ldi	r25, 0x08	; 8
    1c66:	f9 2a       	or	r15, r25
    1c68:	25 c0       	rjmp	.+74     	; 0x1cb4 <vfprintf+0xe8>
    1c6a:	e0 e1       	ldi	r30, 0x10	; 16
    1c6c:	fe 2a       	or	r15, r30
    1c6e:	22 c0       	rjmp	.+68     	; 0x1cb4 <vfprintf+0xe8>
    1c70:	f7 fc       	sbrc	r15, 7
    1c72:	29 c0       	rjmp	.+82     	; 0x1cc6 <vfprintf+0xfa>
    1c74:	89 2f       	mov	r24, r25
    1c76:	80 53       	subi	r24, 0x30	; 48
    1c78:	8a 30       	cpi	r24, 0x0A	; 10
    1c7a:	70 f4       	brcc	.+28     	; 0x1c98 <vfprintf+0xcc>
    1c7c:	f6 fe       	sbrs	r15, 6
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <vfprintf+0xbe>
    1c80:	98 9c       	mul	r9, r8
    1c82:	90 2c       	mov	r9, r0
    1c84:	11 24       	eor	r1, r1
    1c86:	98 0e       	add	r9, r24
    1c88:	15 c0       	rjmp	.+42     	; 0x1cb4 <vfprintf+0xe8>
    1c8a:	e8 9c       	mul	r14, r8
    1c8c:	e0 2c       	mov	r14, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	e8 0e       	add	r14, r24
    1c92:	f0 e2       	ldi	r31, 0x20	; 32
    1c94:	ff 2a       	or	r15, r31
    1c96:	0e c0       	rjmp	.+28     	; 0x1cb4 <vfprintf+0xe8>
    1c98:	9e 32       	cpi	r25, 0x2E	; 46
    1c9a:	29 f4       	brne	.+10     	; 0x1ca6 <vfprintf+0xda>
    1c9c:	f6 fc       	sbrc	r15, 6
    1c9e:	6b c1       	rjmp	.+726    	; 0x1f76 <vfprintf+0x3aa>
    1ca0:	40 e4       	ldi	r20, 0x40	; 64
    1ca2:	f4 2a       	or	r15, r20
    1ca4:	07 c0       	rjmp	.+14     	; 0x1cb4 <vfprintf+0xe8>
    1ca6:	9c 36       	cpi	r25, 0x6C	; 108
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <vfprintf+0xe4>
    1caa:	50 e8       	ldi	r21, 0x80	; 128
    1cac:	f5 2a       	or	r15, r21
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <vfprintf+0xe8>
    1cb0:	98 36       	cpi	r25, 0x68	; 104
    1cb2:	49 f4       	brne	.+18     	; 0x1cc6 <vfprintf+0xfa>
    1cb4:	f2 01       	movw	r30, r4
    1cb6:	23 fd       	sbrc	r18, 3
    1cb8:	95 91       	lpm	r25, Z+
    1cba:	23 ff       	sbrs	r18, 3
    1cbc:	91 91       	ld	r25, Z+
    1cbe:	2f 01       	movw	r4, r30
    1cc0:	99 23       	and	r25, r25
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <vfprintf+0xfa>
    1cc4:	b8 cf       	rjmp	.-144    	; 0x1c36 <vfprintf+0x6a>
    1cc6:	89 2f       	mov	r24, r25
    1cc8:	85 54       	subi	r24, 0x45	; 69
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	18 f0       	brcs	.+6      	; 0x1cd4 <vfprintf+0x108>
    1cce:	80 52       	subi	r24, 0x20	; 32
    1cd0:	83 30       	cpi	r24, 0x03	; 3
    1cd2:	38 f4       	brcc	.+14     	; 0x1ce2 <vfprintf+0x116>
    1cd4:	44 e0       	ldi	r20, 0x04	; 4
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	a4 0e       	add	r10, r20
    1cda:	b5 1e       	adc	r11, r21
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	59 83       	std	Y+1, r21	; 0x01
    1ce0:	0f c0       	rjmp	.+30     	; 0x1d00 <vfprintf+0x134>
    1ce2:	93 36       	cpi	r25, 0x63	; 99
    1ce4:	31 f0       	breq	.+12     	; 0x1cf2 <vfprintf+0x126>
    1ce6:	93 37       	cpi	r25, 0x73	; 115
    1ce8:	79 f0       	breq	.+30     	; 0x1d08 <vfprintf+0x13c>
    1cea:	93 35       	cpi	r25, 0x53	; 83
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <vfprintf+0x124>
    1cee:	56 c0       	rjmp	.+172    	; 0x1d9c <vfprintf+0x1d0>
    1cf0:	20 c0       	rjmp	.+64     	; 0x1d32 <vfprintf+0x166>
    1cf2:	f5 01       	movw	r30, r10
    1cf4:	80 81       	ld	r24, Z
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	42 e0       	ldi	r20, 0x02	; 2
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	a4 0e       	add	r10, r20
    1cfe:	b5 1e       	adc	r11, r21
    1d00:	61 01       	movw	r12, r2
    1d02:	01 e0       	ldi	r16, 0x01	; 1
    1d04:	10 e0       	ldi	r17, 0x00	; 0
    1d06:	12 c0       	rjmp	.+36     	; 0x1d2c <vfprintf+0x160>
    1d08:	f5 01       	movw	r30, r10
    1d0a:	c0 80       	ld	r12, Z
    1d0c:	d1 80       	ldd	r13, Z+1	; 0x01
    1d0e:	f6 fc       	sbrc	r15, 6
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <vfprintf+0x14c>
    1d12:	6f ef       	ldi	r22, 0xFF	; 255
    1d14:	7f ef       	ldi	r23, 0xFF	; 255
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <vfprintf+0x150>
    1d18:	69 2d       	mov	r22, r9
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	42 e0       	ldi	r20, 0x02	; 2
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	a4 0e       	add	r10, r20
    1d22:	b5 1e       	adc	r11, r21
    1d24:	c6 01       	movw	r24, r12
    1d26:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <strnlen>
    1d2a:	8c 01       	movw	r16, r24
    1d2c:	5f e7       	ldi	r21, 0x7F	; 127
    1d2e:	f5 22       	and	r15, r21
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <vfprintf+0x18e>
    1d32:	f5 01       	movw	r30, r10
    1d34:	c0 80       	ld	r12, Z
    1d36:	d1 80       	ldd	r13, Z+1	; 0x01
    1d38:	f6 fc       	sbrc	r15, 6
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <vfprintf+0x176>
    1d3c:	6f ef       	ldi	r22, 0xFF	; 255
    1d3e:	7f ef       	ldi	r23, 0xFF	; 255
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <vfprintf+0x17a>
    1d42:	69 2d       	mov	r22, r9
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	42 e0       	ldi	r20, 0x02	; 2
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	a4 0e       	add	r10, r20
    1d4c:	b5 1e       	adc	r11, r21
    1d4e:	c6 01       	movw	r24, r12
    1d50:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strnlen_P>
    1d54:	8c 01       	movw	r16, r24
    1d56:	50 e8       	ldi	r21, 0x80	; 128
    1d58:	f5 2a       	or	r15, r21
    1d5a:	f3 fe       	sbrs	r15, 3
    1d5c:	07 c0       	rjmp	.+14     	; 0x1d6c <vfprintf+0x1a0>
    1d5e:	1a c0       	rjmp	.+52     	; 0x1d94 <vfprintf+0x1c8>
    1d60:	80 e2       	ldi	r24, 0x20	; 32
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	b3 01       	movw	r22, r6
    1d66:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1d6a:	ea 94       	dec	r14
    1d6c:	8e 2d       	mov	r24, r14
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	08 17       	cp	r16, r24
    1d72:	19 07       	cpc	r17, r25
    1d74:	a8 f3       	brcs	.-22     	; 0x1d60 <vfprintf+0x194>
    1d76:	0e c0       	rjmp	.+28     	; 0x1d94 <vfprintf+0x1c8>
    1d78:	f6 01       	movw	r30, r12
    1d7a:	f7 fc       	sbrc	r15, 7
    1d7c:	85 91       	lpm	r24, Z+
    1d7e:	f7 fe       	sbrs	r15, 7
    1d80:	81 91       	ld	r24, Z+
    1d82:	6f 01       	movw	r12, r30
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	b3 01       	movw	r22, r6
    1d88:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1d8c:	e1 10       	cpse	r14, r1
    1d8e:	ea 94       	dec	r14
    1d90:	01 50       	subi	r16, 0x01	; 1
    1d92:	10 40       	sbci	r17, 0x00	; 0
    1d94:	01 15       	cp	r16, r1
    1d96:	11 05       	cpc	r17, r1
    1d98:	79 f7       	brne	.-34     	; 0x1d78 <vfprintf+0x1ac>
    1d9a:	ea c0       	rjmp	.+468    	; 0x1f70 <vfprintf+0x3a4>
    1d9c:	94 36       	cpi	r25, 0x64	; 100
    1d9e:	11 f0       	breq	.+4      	; 0x1da4 <vfprintf+0x1d8>
    1da0:	99 36       	cpi	r25, 0x69	; 105
    1da2:	69 f5       	brne	.+90     	; 0x1dfe <vfprintf+0x232>
    1da4:	f7 fe       	sbrs	r15, 7
    1da6:	08 c0       	rjmp	.+16     	; 0x1db8 <vfprintf+0x1ec>
    1da8:	f5 01       	movw	r30, r10
    1daa:	20 81       	ld	r18, Z
    1dac:	31 81       	ldd	r19, Z+1	; 0x01
    1dae:	42 81       	ldd	r20, Z+2	; 0x02
    1db0:	53 81       	ldd	r21, Z+3	; 0x03
    1db2:	84 e0       	ldi	r24, 0x04	; 4
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0a c0       	rjmp	.+20     	; 0x1dcc <vfprintf+0x200>
    1db8:	f5 01       	movw	r30, r10
    1dba:	80 81       	ld	r24, Z
    1dbc:	91 81       	ldd	r25, Z+1	; 0x01
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	44 27       	eor	r20, r20
    1dc2:	37 fd       	sbrc	r19, 7
    1dc4:	40 95       	com	r20
    1dc6:	54 2f       	mov	r21, r20
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a8 0e       	add	r10, r24
    1dce:	b9 1e       	adc	r11, r25
    1dd0:	9f e6       	ldi	r25, 0x6F	; 111
    1dd2:	f9 22       	and	r15, r25
    1dd4:	57 ff       	sbrs	r21, 7
    1dd6:	09 c0       	rjmp	.+18     	; 0x1dea <vfprintf+0x21e>
    1dd8:	50 95       	com	r21
    1dda:	40 95       	com	r20
    1ddc:	30 95       	com	r19
    1dde:	21 95       	neg	r18
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	4f 4f       	sbci	r20, 0xFF	; 255
    1de4:	5f 4f       	sbci	r21, 0xFF	; 255
    1de6:	e0 e8       	ldi	r30, 0x80	; 128
    1de8:	fe 2a       	or	r15, r30
    1dea:	ca 01       	movw	r24, r20
    1dec:	b9 01       	movw	r22, r18
    1dee:	a1 01       	movw	r20, r2
    1df0:	2a e0       	ldi	r18, 0x0A	; 10
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	0e 94 05 10 	call	0x200a	; 0x200a <__ultoa_invert>
    1df8:	d8 2e       	mov	r13, r24
    1dfa:	d2 18       	sub	r13, r2
    1dfc:	40 c0       	rjmp	.+128    	; 0x1e7e <vfprintf+0x2b2>
    1dfe:	95 37       	cpi	r25, 0x75	; 117
    1e00:	29 f4       	brne	.+10     	; 0x1e0c <vfprintf+0x240>
    1e02:	1f 2d       	mov	r17, r15
    1e04:	1f 7e       	andi	r17, 0xEF	; 239
    1e06:	2a e0       	ldi	r18, 0x0A	; 10
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	1d c0       	rjmp	.+58     	; 0x1e46 <vfprintf+0x27a>
    1e0c:	1f 2d       	mov	r17, r15
    1e0e:	19 7f       	andi	r17, 0xF9	; 249
    1e10:	9f 36       	cpi	r25, 0x6F	; 111
    1e12:	61 f0       	breq	.+24     	; 0x1e2c <vfprintf+0x260>
    1e14:	90 37       	cpi	r25, 0x70	; 112
    1e16:	20 f4       	brcc	.+8      	; 0x1e20 <vfprintf+0x254>
    1e18:	98 35       	cpi	r25, 0x58	; 88
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <vfprintf+0x252>
    1e1c:	ac c0       	rjmp	.+344    	; 0x1f76 <vfprintf+0x3aa>
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <vfprintf+0x272>
    1e20:	90 37       	cpi	r25, 0x70	; 112
    1e22:	39 f0       	breq	.+14     	; 0x1e32 <vfprintf+0x266>
    1e24:	98 37       	cpi	r25, 0x78	; 120
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <vfprintf+0x25e>
    1e28:	a6 c0       	rjmp	.+332    	; 0x1f76 <vfprintf+0x3aa>
    1e2a:	04 c0       	rjmp	.+8      	; 0x1e34 <vfprintf+0x268>
    1e2c:	28 e0       	ldi	r18, 0x08	; 8
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	0a c0       	rjmp	.+20     	; 0x1e46 <vfprintf+0x27a>
    1e32:	10 61       	ori	r17, 0x10	; 16
    1e34:	14 fd       	sbrc	r17, 4
    1e36:	14 60       	ori	r17, 0x04	; 4
    1e38:	20 e1       	ldi	r18, 0x10	; 16
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <vfprintf+0x27a>
    1e3e:	14 fd       	sbrc	r17, 4
    1e40:	16 60       	ori	r17, 0x06	; 6
    1e42:	20 e1       	ldi	r18, 0x10	; 16
    1e44:	32 e0       	ldi	r19, 0x02	; 2
    1e46:	17 ff       	sbrs	r17, 7
    1e48:	08 c0       	rjmp	.+16     	; 0x1e5a <vfprintf+0x28e>
    1e4a:	f5 01       	movw	r30, r10
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	44 e0       	ldi	r20, 0x04	; 4
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	08 c0       	rjmp	.+16     	; 0x1e6a <vfprintf+0x29e>
    1e5a:	f5 01       	movw	r30, r10
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	bc 01       	movw	r22, r24
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	42 e0       	ldi	r20, 0x02	; 2
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	a4 0e       	add	r10, r20
    1e6c:	b5 1e       	adc	r11, r21
    1e6e:	a1 01       	movw	r20, r2
    1e70:	0e 94 05 10 	call	0x200a	; 0x200a <__ultoa_invert>
    1e74:	d8 2e       	mov	r13, r24
    1e76:	d2 18       	sub	r13, r2
    1e78:	8f e7       	ldi	r24, 0x7F	; 127
    1e7a:	f8 2e       	mov	r15, r24
    1e7c:	f1 22       	and	r15, r17
    1e7e:	f6 fe       	sbrs	r15, 6
    1e80:	0b c0       	rjmp	.+22     	; 0x1e98 <vfprintf+0x2cc>
    1e82:	5e ef       	ldi	r21, 0xFE	; 254
    1e84:	f5 22       	and	r15, r21
    1e86:	d9 14       	cp	r13, r9
    1e88:	38 f4       	brcc	.+14     	; 0x1e98 <vfprintf+0x2cc>
    1e8a:	f4 fe       	sbrs	r15, 4
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <vfprintf+0x2d0>
    1e8e:	f2 fc       	sbrc	r15, 2
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <vfprintf+0x2d0>
    1e92:	8f ee       	ldi	r24, 0xEF	; 239
    1e94:	f8 22       	and	r15, r24
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <vfprintf+0x2d0>
    1e98:	1d 2d       	mov	r17, r13
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <vfprintf+0x2d2>
    1e9c:	19 2d       	mov	r17, r9
    1e9e:	f4 fe       	sbrs	r15, 4
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <vfprintf+0x2f0>
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ed 0d       	add	r30, r13
    1ea6:	f1 1d       	adc	r31, r1
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 33       	cpi	r24, 0x30	; 48
    1eac:	19 f4       	brne	.+6      	; 0x1eb4 <vfprintf+0x2e8>
    1eae:	99 ee       	ldi	r25, 0xE9	; 233
    1eb0:	f9 22       	and	r15, r25
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <vfprintf+0x2f8>
    1eb4:	1f 5f       	subi	r17, 0xFF	; 255
    1eb6:	f2 fe       	sbrs	r15, 2
    1eb8:	05 c0       	rjmp	.+10     	; 0x1ec4 <vfprintf+0x2f8>
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <vfprintf+0x2f6>
    1ebc:	8f 2d       	mov	r24, r15
    1ebe:	86 78       	andi	r24, 0x86	; 134
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <vfprintf+0x2f8>
    1ec2:	1f 5f       	subi	r17, 0xFF	; 255
    1ec4:	0f 2d       	mov	r16, r15
    1ec6:	f3 fc       	sbrc	r15, 3
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <vfprintf+0x326>
    1eca:	f0 fe       	sbrs	r15, 0
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <vfprintf+0x320>
    1ece:	1e 15       	cp	r17, r14
    1ed0:	10 f0       	brcs	.+4      	; 0x1ed6 <vfprintf+0x30a>
    1ed2:	9d 2c       	mov	r9, r13
    1ed4:	0b c0       	rjmp	.+22     	; 0x1eec <vfprintf+0x320>
    1ed6:	9d 2c       	mov	r9, r13
    1ed8:	9e 0c       	add	r9, r14
    1eda:	91 1a       	sub	r9, r17
    1edc:	1e 2d       	mov	r17, r14
    1ede:	06 c0       	rjmp	.+12     	; 0x1eec <vfprintf+0x320>
    1ee0:	80 e2       	ldi	r24, 0x20	; 32
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	b3 01       	movw	r22, r6
    1ee6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1eea:	1f 5f       	subi	r17, 0xFF	; 255
    1eec:	1e 15       	cp	r17, r14
    1eee:	c0 f3       	brcs	.-16     	; 0x1ee0 <vfprintf+0x314>
    1ef0:	04 c0       	rjmp	.+8      	; 0x1efa <vfprintf+0x32e>
    1ef2:	1e 15       	cp	r17, r14
    1ef4:	10 f4       	brcc	.+4      	; 0x1efa <vfprintf+0x32e>
    1ef6:	e1 1a       	sub	r14, r17
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <vfprintf+0x330>
    1efa:	ee 24       	eor	r14, r14
    1efc:	04 ff       	sbrs	r16, 4
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <vfprintf+0x352>
    1f00:	80 e3       	ldi	r24, 0x30	; 48
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	b3 01       	movw	r22, r6
    1f06:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1f0a:	02 ff       	sbrs	r16, 2
    1f0c:	1d c0       	rjmp	.+58     	; 0x1f48 <vfprintf+0x37c>
    1f0e:	01 fd       	sbrc	r16, 1
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <vfprintf+0x34c>
    1f12:	88 e7       	ldi	r24, 0x78	; 120
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e c0       	rjmp	.+28     	; 0x1f34 <vfprintf+0x368>
    1f18:	88 e5       	ldi	r24, 0x58	; 88
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0b c0       	rjmp	.+22     	; 0x1f34 <vfprintf+0x368>
    1f1e:	80 2f       	mov	r24, r16
    1f20:	86 78       	andi	r24, 0x86	; 134
    1f22:	91 f0       	breq	.+36     	; 0x1f48 <vfprintf+0x37c>
    1f24:	01 ff       	sbrs	r16, 1
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <vfprintf+0x360>
    1f28:	8b e2       	ldi	r24, 0x2B	; 43
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <vfprintf+0x362>
    1f2c:	80 e2       	ldi	r24, 0x20	; 32
    1f2e:	f7 fc       	sbrc	r15, 7
    1f30:	8d e2       	ldi	r24, 0x2D	; 45
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	b3 01       	movw	r22, r6
    1f36:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <vfprintf+0x37c>
    1f3c:	80 e3       	ldi	r24, 0x30	; 48
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	b3 01       	movw	r22, r6
    1f42:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1f46:	9a 94       	dec	r9
    1f48:	d9 14       	cp	r13, r9
    1f4a:	c0 f3       	brcs	.-16     	; 0x1f3c <vfprintf+0x370>
    1f4c:	da 94       	dec	r13
    1f4e:	f1 01       	movw	r30, r2
    1f50:	ed 0d       	add	r30, r13
    1f52:	f1 1d       	adc	r31, r1
    1f54:	80 81       	ld	r24, Z
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	b3 01       	movw	r22, r6
    1f5a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1f5e:	dd 20       	and	r13, r13
    1f60:	a9 f7       	brne	.-22     	; 0x1f4c <vfprintf+0x380>
    1f62:	06 c0       	rjmp	.+12     	; 0x1f70 <vfprintf+0x3a4>
    1f64:	80 e2       	ldi	r24, 0x20	; 32
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	b3 01       	movw	r22, r6
    1f6a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1f6e:	ea 94       	dec	r14
    1f70:	ee 20       	and	r14, r14
    1f72:	c1 f7       	brne	.-16     	; 0x1f64 <vfprintf+0x398>
    1f74:	43 ce       	rjmp	.-890    	; 0x1bfc <vfprintf+0x30>
    1f76:	f3 01       	movw	r30, r6
    1f78:	66 81       	ldd	r22, Z+6	; 0x06
    1f7a:	77 81       	ldd	r23, Z+7	; 0x07
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	2b 96       	adiw	r28, 0x0b	; 11
    1f80:	e2 e1       	ldi	r30, 0x12	; 18
    1f82:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__epilogue_restores__>

00001f86 <strnlen_P>:
    1f86:	fc 01       	movw	r30, r24
    1f88:	05 90       	lpm	r0, Z+
    1f8a:	61 50       	subi	r22, 0x01	; 1
    1f8c:	70 40       	sbci	r23, 0x00	; 0
    1f8e:	01 10       	cpse	r0, r1
    1f90:	d8 f7       	brcc	.-10     	; 0x1f88 <strnlen_P+0x2>
    1f92:	80 95       	com	r24
    1f94:	90 95       	com	r25
    1f96:	8e 0f       	add	r24, r30
    1f98:	9f 1f       	adc	r25, r31
    1f9a:	08 95       	ret

00001f9c <strnlen>:
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	61 50       	subi	r22, 0x01	; 1
    1fa0:	70 40       	sbci	r23, 0x00	; 0
    1fa2:	01 90       	ld	r0, Z+
    1fa4:	01 10       	cpse	r0, r1
    1fa6:	d8 f7       	brcc	.-10     	; 0x1f9e <strnlen+0x2>
    1fa8:	80 95       	com	r24
    1faa:	90 95       	com	r25
    1fac:	8e 0f       	add	r24, r30
    1fae:	9f 1f       	adc	r25, r31
    1fb0:	08 95       	ret

00001fb2 <fputc>:
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	8c 01       	movw	r16, r24
    1fbc:	eb 01       	movw	r28, r22
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	81 ff       	sbrs	r24, 1
    1fc2:	1b c0       	rjmp	.+54     	; 0x1ffa <fputc+0x48>
    1fc4:	82 ff       	sbrs	r24, 2
    1fc6:	0d c0       	rjmp	.+26     	; 0x1fe2 <fputc+0x30>
    1fc8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fca:	3f 81       	ldd	r19, Y+7	; 0x07
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	28 17       	cp	r18, r24
    1fd2:	39 07       	cpc	r19, r25
    1fd4:	64 f4       	brge	.+24     	; 0x1fee <fputc+0x3c>
    1fd6:	e8 81       	ld	r30, Y
    1fd8:	f9 81       	ldd	r31, Y+1	; 0x01
    1fda:	01 93       	st	Z+, r16
    1fdc:	f9 83       	std	Y+1, r31	; 0x01
    1fde:	e8 83       	st	Y, r30
    1fe0:	06 c0       	rjmp	.+12     	; 0x1fee <fputc+0x3c>
    1fe2:	e8 85       	ldd	r30, Y+8	; 0x08
    1fe4:	f9 85       	ldd	r31, Y+9	; 0x09
    1fe6:	80 2f       	mov	r24, r16
    1fe8:	09 95       	icall
    1fea:	89 2b       	or	r24, r25
    1fec:	31 f4       	brne	.+12     	; 0x1ffa <fputc+0x48>
    1fee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	9f 83       	std	Y+7, r25	; 0x07
    1ff6:	8e 83       	std	Y+6, r24	; 0x06
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <fputc+0x4c>
    1ffa:	0f ef       	ldi	r16, 0xFF	; 255
    1ffc:	1f ef       	ldi	r17, 0xFF	; 255
    1ffe:	c8 01       	movw	r24, r16
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <__ultoa_invert>:
    200a:	fa 01       	movw	r30, r20
    200c:	aa 27       	eor	r26, r26
    200e:	28 30       	cpi	r18, 0x08	; 8
    2010:	51 f1       	breq	.+84     	; 0x2066 <__ultoa_invert+0x5c>
    2012:	20 31       	cpi	r18, 0x10	; 16
    2014:	81 f1       	breq	.+96     	; 0x2076 <__ultoa_invert+0x6c>
    2016:	e8 94       	clt
    2018:	6f 93       	push	r22
    201a:	6e 7f       	andi	r22, 0xFE	; 254
    201c:	6e 5f       	subi	r22, 0xFE	; 254
    201e:	7f 4f       	sbci	r23, 0xFF	; 255
    2020:	8f 4f       	sbci	r24, 0xFF	; 255
    2022:	9f 4f       	sbci	r25, 0xFF	; 255
    2024:	af 4f       	sbci	r26, 0xFF	; 255
    2026:	b1 e0       	ldi	r27, 0x01	; 1
    2028:	3e d0       	rcall	.+124    	; 0x20a6 <__ultoa_invert+0x9c>
    202a:	b4 e0       	ldi	r27, 0x04	; 4
    202c:	3c d0       	rcall	.+120    	; 0x20a6 <__ultoa_invert+0x9c>
    202e:	67 0f       	add	r22, r23
    2030:	78 1f       	adc	r23, r24
    2032:	89 1f       	adc	r24, r25
    2034:	9a 1f       	adc	r25, r26
    2036:	a1 1d       	adc	r26, r1
    2038:	68 0f       	add	r22, r24
    203a:	79 1f       	adc	r23, r25
    203c:	8a 1f       	adc	r24, r26
    203e:	91 1d       	adc	r25, r1
    2040:	a1 1d       	adc	r26, r1
    2042:	6a 0f       	add	r22, r26
    2044:	71 1d       	adc	r23, r1
    2046:	81 1d       	adc	r24, r1
    2048:	91 1d       	adc	r25, r1
    204a:	a1 1d       	adc	r26, r1
    204c:	20 d0       	rcall	.+64     	; 0x208e <__ultoa_invert+0x84>
    204e:	09 f4       	brne	.+2      	; 0x2052 <__ultoa_invert+0x48>
    2050:	68 94       	set
    2052:	3f 91       	pop	r19
    2054:	2a e0       	ldi	r18, 0x0A	; 10
    2056:	26 9f       	mul	r18, r22
    2058:	11 24       	eor	r1, r1
    205a:	30 19       	sub	r19, r0
    205c:	30 5d       	subi	r19, 0xD0	; 208
    205e:	31 93       	st	Z+, r19
    2060:	de f6       	brtc	.-74     	; 0x2018 <__ultoa_invert+0xe>
    2062:	cf 01       	movw	r24, r30
    2064:	08 95       	ret
    2066:	46 2f       	mov	r20, r22
    2068:	47 70       	andi	r20, 0x07	; 7
    206a:	40 5d       	subi	r20, 0xD0	; 208
    206c:	41 93       	st	Z+, r20
    206e:	b3 e0       	ldi	r27, 0x03	; 3
    2070:	0f d0       	rcall	.+30     	; 0x2090 <__ultoa_invert+0x86>
    2072:	c9 f7       	brne	.-14     	; 0x2066 <__ultoa_invert+0x5c>
    2074:	f6 cf       	rjmp	.-20     	; 0x2062 <__ultoa_invert+0x58>
    2076:	46 2f       	mov	r20, r22
    2078:	4f 70       	andi	r20, 0x0F	; 15
    207a:	40 5d       	subi	r20, 0xD0	; 208
    207c:	4a 33       	cpi	r20, 0x3A	; 58
    207e:	18 f0       	brcs	.+6      	; 0x2086 <__ultoa_invert+0x7c>
    2080:	49 5d       	subi	r20, 0xD9	; 217
    2082:	31 fd       	sbrc	r19, 1
    2084:	40 52       	subi	r20, 0x20	; 32
    2086:	41 93       	st	Z+, r20
    2088:	02 d0       	rcall	.+4      	; 0x208e <__ultoa_invert+0x84>
    208a:	a9 f7       	brne	.-22     	; 0x2076 <__ultoa_invert+0x6c>
    208c:	ea cf       	rjmp	.-44     	; 0x2062 <__ultoa_invert+0x58>
    208e:	b4 e0       	ldi	r27, 0x04	; 4
    2090:	a6 95       	lsr	r26
    2092:	97 95       	ror	r25
    2094:	87 95       	ror	r24
    2096:	77 95       	ror	r23
    2098:	67 95       	ror	r22
    209a:	ba 95       	dec	r27
    209c:	c9 f7       	brne	.-14     	; 0x2090 <__ultoa_invert+0x86>
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	61 05       	cpc	r22, r1
    20a2:	71 05       	cpc	r23, r1
    20a4:	08 95       	ret
    20a6:	9b 01       	movw	r18, r22
    20a8:	ac 01       	movw	r20, r24
    20aa:	0a 2e       	mov	r0, r26
    20ac:	06 94       	lsr	r0
    20ae:	57 95       	ror	r21
    20b0:	47 95       	ror	r20
    20b2:	37 95       	ror	r19
    20b4:	27 95       	ror	r18
    20b6:	ba 95       	dec	r27
    20b8:	c9 f7       	brne	.-14     	; 0x20ac <__ultoa_invert+0xa2>
    20ba:	62 0f       	add	r22, r18
    20bc:	73 1f       	adc	r23, r19
    20be:	84 1f       	adc	r24, r20
    20c0:	95 1f       	adc	r25, r21
    20c2:	a0 1d       	adc	r26, r0
    20c4:	08 95       	ret

000020c6 <_exit>:
    20c6:	f8 94       	cli

000020c8 <__stop_program>:
    20c8:	ff cf       	rjmp	.-2      	; 0x20c8 <__stop_program>

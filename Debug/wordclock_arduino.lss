
wordclock_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000ba4  00000c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800154  00800154  00000c8c  2**0
                  ALLOC
  3 .stab         00003600  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019d3  00000000  00000000  0000428c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 02 	call	0x544	; 0x544 <main>
  9e:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <shiftOut>:
#include <avr/io.h>
#include <util/delay.h>

void shiftOut(uint8_t val) {
	uint8_t i;
	DS1302_CLK_0;
  a6:	28 98       	cbi	0x05, 0	; 5
  a8:	48 2f       	mov	r20, r24
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	60 ea       	ldi	r22, 0xA0	; 160
  b2:	7f e0       	ldi	r23, 0x0F	; 15
  b4:	0b c0       	rjmp	.+22     	; 0xcc <shiftOut+0x26>
	for (i = 0; i < 8; i++) {
		if (val & (1 << i))
			DS1302_IO_1;
  b6:	29 9a       	sbi	0x05, 1	; 5
		else
			DS1302_IO_0;
		DS1302_CLK_1;
  b8:	28 9a       	sbi	0x05, 0	; 5
  ba:	cb 01       	movw	r24, r22
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <shiftOut+0x16>
		_delay_ms(1);
		DS1302_CLK_0;
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
#include <util/delay.h>

void shiftOut(uint8_t val) {
	uint8_t i;
	DS1302_CLK_0;
	for (i = 0; i < 8; i++) {
  c6:	28 30       	cpi	r18, 0x08	; 8
  c8:	31 05       	cpc	r19, r1
  ca:	59 f0       	breq	.+22     	; 0xe2 <shiftOut+0x3c>
		if (val & (1 << i))
  cc:	ca 01       	movw	r24, r20
  ce:	02 2e       	mov	r0, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <shiftOut+0x30>
  d2:	95 95       	asr	r25
  d4:	87 95       	ror	r24
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <shiftOut+0x2c>
  da:	80 fd       	sbrc	r24, 0
  dc:	ec cf       	rjmp	.-40     	; 0xb6 <shiftOut+0x10>
			DS1302_IO_1;
		else
			DS1302_IO_0;
  de:	29 98       	cbi	0x05, 1	; 5
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <shiftOut+0x12>
		DS1302_CLK_1;
		_delay_ms(1);
		DS1302_CLK_0;
	}
}
  e2:	08 95       	ret

000000e4 <_write_out>:

void _write_out(uint8_t value) {
	DS1302_IO_DIR_OUT;
  e4:	21 9a       	sbi	0x04, 1	; 4
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	40 ea       	ldi	r20, 0xA0	; 160
  ec:	5f e0       	ldi	r21, 0x0F	; 15
  ee:	0e c0       	rjmp	.+28     	; 0x10c <_write_out+0x28>
	for (int i = 0; i < 8; i++) {
		DS1302_CLK_0;
		_delay_ms(1);
		if (value & 0x01)
			DS1302_IO_1;
  f0:	29 9a       	sbi	0x05, 1	; 5
  f2:	fa 01       	movw	r30, r20
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <_write_out+0x10>
		else
			DS1302_IO_0;
		_delay_ms(1);
		DS1302_CLK_1;
  f8:	28 9a       	sbi	0x05, 0	; 5
  fa:	fa 01       	movw	r30, r20
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <_write_out+0x18>
	}
}

void _write_out(uint8_t value) {
	DS1302_IO_DIR_OUT;
	for (int i = 0; i < 8; i++) {
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	28 30       	cpi	r18, 0x08	; 8
 106:	31 05       	cpc	r19, r1
 108:	49 f0       	breq	.+18     	; 0x11c <_write_out+0x38>
		else
			DS1302_IO_0;
		_delay_ms(1);
		DS1302_CLK_1;
		_delay_ms(1);
		value >>= 1;
 10a:	86 95       	lsr	r24
}

void _write_out(uint8_t value) {
	DS1302_IO_DIR_OUT;
	for (int i = 0; i < 8; i++) {
		DS1302_CLK_0;
 10c:	28 98       	cbi	0x05, 0	; 5
 10e:	fa 01       	movw	r30, r20
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <_write_out+0x2c>
		_delay_ms(1);
		if (value & 0x01)
 114:	80 fd       	sbrc	r24, 0
 116:	ec cf       	rjmp	.-40     	; 0xf0 <_write_out+0xc>
			DS1302_IO_1;
		else
			DS1302_IO_0;
 118:	29 98       	cbi	0x05, 1	; 5
 11a:	eb cf       	rjmp	.-42     	; 0xf2 <_write_out+0xe>
 11c:	08 95       	ret

0000011e <init>:
//	DS1302_IO_DIR_OUT;
//	shiftOut(value);
}

void init() {
	DS1302_CLK_DIR_OUT;
 11e:	20 9a       	sbi	0x04, 0	; 4
	DS1302_RST_DIR_OUT;
 120:	84 b1       	in	r24, 0x04	; 4
 122:	84 b9       	out	0x04, r24	; 4
}
 124:	08 95       	ret

00000126 <_read_in>:

uint8_t _read_in() {
	uint8_t input_value = 0;
	uint8_t bit = 0;
	DS1302_IO_DIR_IN;
 126:	21 98       	cbi	0x04, 1	; 4
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	60 ea       	ldi	r22, 0xA0	; 160
 130:	7f e0       	ldi	r23, 0x0F	; 15

	for (int i = 0; i < 8; ++i) {
		bit = DS1302_IO_IN;
 132:	83 b1       	in	r24, 0x03	; 3
		input_value |= (bit << i);
 134:	84 70       	andi	r24, 0x04	; 4
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <_read_in+0x1a>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <_read_in+0x16>
 144:	48 2b       	or	r20, r24

		DS1302_CLK_1;
 146:	28 9a       	sbi	0x05, 0	; 5
 148:	cb 01       	movw	r24, r22
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <_read_in+0x24>
		_delay_ms(1);
		DS1302_CLK_0;
 14e:	28 98       	cbi	0x05, 0	; 5
uint8_t _read_in() {
	uint8_t input_value = 0;
	uint8_t bit = 0;
	DS1302_IO_DIR_IN;

	for (int i = 0; i < 8; ++i) {
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	28 30       	cpi	r18, 0x08	; 8
 156:	31 05       	cpc	r19, r1
 158:	61 f7       	brne	.-40     	; 0x132 <_read_in+0xc>
		_delay_ms(1);
		DS1302_CLK_0;
	}

	return input_value;
}
 15a:	84 2f       	mov	r24, r20
 15c:	08 95       	ret

0000015e <read_register>:
uint8_t read_register(uint8_t reg) {
	uint8_t cmd_byte = 129; /* 1000 0001 */
	uint8_t reg_value;
	cmd_byte |= (reg << 1);

	DS1302_CLK_0;
 15e:	28 98       	cbi	0x05, 0	; 5
	DS1302_RST_1;
 160:	95 b1       	in	r25, 0x05	; 5
 162:	95 b9       	out	0x05, r25	; 5
//  digitalWrite(_ce_pin, HIGH);

	_write_out(cmd_byte);
 164:	88 0f       	add	r24, r24
 166:	81 68       	ori	r24, 0x81	; 129
 168:	0e 94 72 00 	call	0xe4	; 0xe4 <_write_out>
	reg_value = _read_in();
 16c:	0e 94 93 00 	call	0x126	; 0x126 <_read_in>

	DS1302_RST_0;
 170:	95 b1       	in	r25, 0x05	; 5
 172:	95 b9       	out	0x05, r25	; 5
//  digitalWrite(_ce_pin, LOW);

	return reg_value;
}
 174:	08 95       	ret

00000176 <_register_bcd_to_dec_>:
	}

	return input_value;
}

uint8_t _register_bcd_to_dec_(uint8_t reg, uint8_t high_bit) {
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	06 2f       	mov	r16, r22
	uint8_t val = read_register(reg);
 17c:	0e 94 af 00 	call	0x15e	; 0x15e <read_register>
	uint8_t mask = (1 << (high_bit + 1)) - 1;
	val &= mask;
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	0f 5f       	subi	r16, 0xFF	; 255
 184:	1f 4f       	sbci	r17, 0xFF	; 255
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <_register_bcd_to_dec_+0x1a>
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	0a 95       	dec	r16
 192:	e2 f7       	brpl	.-8      	; 0x18c <_register_bcd_to_dec_+0x16>
 194:	21 50       	subi	r18, 0x01	; 1
 196:	28 23       	and	r18, r24
	val = (val & 15) + 10 * ((val & (15 << 4)) >> 4);
 198:	82 2f       	mov	r24, r18
 19a:	82 95       	swap	r24
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	ac 01       	movw	r20, r24
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	44 0f       	add	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	84 0f       	add	r24, r20
 1b4:	2f 70       	andi	r18, 0x0F	; 15
	return val;
}
 1b6:	82 0f       	add	r24, r18
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <_register_bcd_to_dec>:

uint8_t _register_bcd_to_dec(uint8_t reg) {
	return _register_bcd_to_dec_(reg, 7);
 1be:	67 e0       	ldi	r22, 0x07	; 7
 1c0:	0e 94 bb 00 	call	0x176	; 0x176 <_register_bcd_to_dec_>
}
 1c4:	08 95       	ret

000001c6 <write_register>:
//  digitalWrite(_ce_pin, LOW);

	return reg_value;
}

void write_register(uint8_t reg, uint8_t value) {
 1c6:	1f 93       	push	r17
 1c8:	16 2f       	mov	r17, r22
	uint8_t cmd_byte = (128 | (reg << 1));

	DS1302_CLK_0;
 1ca:	28 98       	cbi	0x05, 0	; 5
	DS1302_RST_1;
 1cc:	95 b1       	in	r25, 0x05	; 5
 1ce:	95 b9       	out	0x05, r25	; 5

	_write_out(cmd_byte);
 1d0:	88 0f       	add	r24, r24
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	0e 94 72 00 	call	0xe4	; 0xe4 <_write_out>
	_write_out(value);
 1d8:	81 2f       	mov	r24, r17
 1da:	0e 94 72 00 	call	0xe4	; 0xe4 <_write_out>

	DS1302_RST_0;
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	85 b9       	out	0x05, r24	; 5
}
 1e2:	1f 91       	pop	r17
 1e4:	08 95       	ret

000001e6 <_register_dec_to_bcd_>:

uint8_t _register_bcd_to_dec(uint8_t reg) {
	return _register_bcd_to_dec_(reg, 7);
}

void _register_dec_to_bcd_(uint8_t reg, uint8_t value, uint8_t high_bit) {
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	e8 2e       	mov	r14, r24
 1f0:	f6 2e       	mov	r15, r22
 1f2:	04 2f       	mov	r16, r20
	uint8_t regv = read_register(reg);
 1f4:	0e 94 af 00 	call	0x15e	; 0x15e <read_register>
 1f8:	e8 2f       	mov	r30, r24
	uint8_t mask = (1 << (high_bit + 1)) - 1;
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <_register_dec_to_bcd_+0x24>
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	0a 95       	dec	r16
 20c:	e2 f7       	brpl	.-8      	; 0x206 <_register_dec_to_bcd_+0x20>
 20e:	21 50       	subi	r18, 0x01	; 1

	/* convert value to bcd in place */
	uint8_t tvalue = value / 10;
	value = value % 10;
	value |= (tvalue << 4);
 210:	8f 2d       	mov	r24, r15
 212:	6a e0       	ldi	r22, 0x0A	; 10
 214:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodqi4>
 218:	48 2f       	mov	r20, r24
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	42 95       	swap	r20
 21e:	52 95       	swap	r21
 220:	50 7f       	andi	r21, 0xF0	; 240
 222:	54 27       	eor	r21, r20
 224:	40 7f       	andi	r20, 0xF0	; 240
 226:	54 27       	eor	r21, r20
 228:	8f 2d       	mov	r24, r15
 22a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodqi4>
 22e:	94 2b       	or	r25, r20

	/* replace high bits of value if needed */
	value &= mask;
 230:	92 23       	and	r25, r18
	value |= (regv &= ~mask);
 232:	20 95       	com	r18
 234:	2e 23       	and	r18, r30

	write_register(reg, value);
 236:	29 2b       	or	r18, r25
 238:	8e 2d       	mov	r24, r14
 23a:	62 2f       	mov	r22, r18
 23c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write_register>
}
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	08 95       	ret

0000024a <_register_dec_to_bcd>:

void _register_dec_to_bcd(uint8_t reg, uint8_t value) {
	_register_dec_to_bcd_(reg, value, 7);
 24a:	47 e0       	ldi	r20, 0x07	; 7
 24c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_register_dec_to_bcd_>
}
 250:	08 95       	ret

00000252 <getSeconds>:
//}

/*** Get time ***/

uint8_t getSeconds() {
	return _register_bcd_to_dec_(SEC_REG, 6);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	66 e0       	ldi	r22, 0x06	; 6
 256:	0e 94 bb 00 	call	0x176	; 0x176 <_register_bcd_to_dec_>
}
 25a:	08 95       	ret

0000025c <getMinutes>:

uint8_t getMinutes() {
	return _register_bcd_to_dec(MIN_REG);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 df 00 	call	0x1be	; 0x1be <_register_bcd_to_dec>
}
 262:	08 95       	ret

00000264 <getHour>:

uint8_t getHour() {
	uint8_t hr = read_register(HR_REG);
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 af 00 	call	0x15e	; 0x15e <read_register>
 26a:	48 2f       	mov	r20, r24
	uint8_t adj;
	if (hr & 128) /* 12-hour mode */
 26c:	87 fd       	sbrc	r24, 7
 26e:	18 c0       	rjmp	.+48     	; 0x2a0 <getHour+0x3c>
		adj = 12 * ((hr & 32) >> 5);
	else
		/* 24-hour mode */
		adj = 10 * ((hr & (32 + 16)) >> 4);
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	80 73       	andi	r24, 0x30	; 48
 274:	90 70       	andi	r25, 0x00	; 0
 276:	95 95       	asr	r25
 278:	87 95       	ror	r24
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	95 95       	asr	r25
 280:	87 95       	ror	r24
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	9c 01       	movw	r18, r24
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	82 0f       	add	r24, r18
	hr = (hr & 15) + adj;
 29a:	4f 70       	andi	r20, 0x0F	; 15
	return hr;
}
 29c:	84 0f       	add	r24, r20
 29e:	08 95       	ret

uint8_t getHour() {
	uint8_t hr = read_register(HR_REG);
	uint8_t adj;
	if (hr & 128) /* 12-hour mode */
		adj = 12 * ((hr & 32) >> 5);
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	20 72       	andi	r18, 0x20	; 32
 2a6:	30 70       	andi	r19, 0x00	; 0
 2a8:	35 95       	asr	r19
 2aa:	27 95       	ror	r18
 2ac:	35 95       	asr	r19
 2ae:	27 95       	ror	r18
 2b0:	35 95       	asr	r19
 2b2:	27 95       	ror	r18
 2b4:	35 95       	asr	r19
 2b6:	27 95       	ror	r18
 2b8:	35 95       	asr	r19
 2ba:	27 95       	ror	r18
 2bc:	c9 01       	movw	r24, r18
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	82 0f       	add	r24, r18
 2c4:	93 1f       	adc	r25, r19
 2c6:	88 0f       	add	r24, r24
 2c8:	88 0f       	add	r24, r24
	else
		/* 24-hour mode */
		adj = 10 * ((hr & (32 + 16)) >> 4);
	hr = (hr & 15) + adj;
 2ca:	4f 70       	andi	r20, 0x0F	; 15
	return hr;
}
 2cc:	84 0f       	add	r24, r20
 2ce:	08 95       	ret

000002d0 <getDate>:

uint8_t getDate() {
	return _register_bcd_to_dec_(DATE_REG, 5);
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	65 e0       	ldi	r22, 0x05	; 5
 2d4:	0e 94 bb 00 	call	0x176	; 0x176 <_register_bcd_to_dec_>
}
 2d8:	08 95       	ret

000002da <getMonth>:

uint8_t getMonth() {
	return _register_bcd_to_dec_(MON_REG, 4);
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	64 e0       	ldi	r22, 0x04	; 4
 2de:	0e 94 bb 00 	call	0x176	; 0x176 <_register_bcd_to_dec_>
}
 2e2:	08 95       	ret

000002e4 <getDay>:

uint8_t getDay() {
	return _register_bcd_to_dec_(DAY_REG, 2);
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	0e 94 bb 00 	call	0x176	; 0x176 <_register_bcd_to_dec_>
}
 2ec:	08 95       	ret

000002ee <getYear>:

uint16_t getYear() {
	return 2000 + _register_bcd_to_dec(YR_REG);
 2ee:	86 e0       	ldi	r24, 0x06	; 6
 2f0:	0e 94 df 00 	call	0x1be	; 0x1be <_register_bcd_to_dec>
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	20 53       	subi	r18, 0x30	; 48
 2fa:	38 4f       	sbci	r19, 0xF8	; 248
}
 2fc:	c9 01       	movw	r24, r18
 2fe:	08 95       	ret

00000300 <seconds>:
//	return t;
//}

/*** Set time ***/

void seconds(uint8_t sec) {
 300:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(SEC_REG, sec, 6);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	46 e0       	ldi	r20, 0x06	; 6
 306:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_register_dec_to_bcd_>
}
 30a:	08 95       	ret

0000030c <minutes>:

void minutes(uint8_t min) {
 30c:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(MIN_REG, min, 6);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	46 e0       	ldi	r20, 0x06	; 6
 312:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_register_dec_to_bcd_>
}
 316:	08 95       	ret

00000318 <hour>:

void hour(uint8_t hr) {
 318:	1f 93       	push	r17
 31a:	18 2f       	mov	r17, r24
	write_register(HR_REG, 0); /* set 24-hour mode */
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write_register>
	_register_dec_to_bcd_(HR_REG, hr, 5);
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	61 2f       	mov	r22, r17
 328:	45 e0       	ldi	r20, 0x05	; 5
 32a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_register_dec_to_bcd_>
}
 32e:	1f 91       	pop	r17
 330:	08 95       	ret

00000332 <date>:

void date(uint8_t date) {
 332:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(DATE_REG, date, 5);
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	45 e0       	ldi	r20, 0x05	; 5
 338:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_register_dec_to_bcd_>
}
 33c:	08 95       	ret

0000033e <month>:

void month(uint8_t mon) {
 33e:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(MON_REG, mon, 4);
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	44 e0       	ldi	r20, 0x04	; 4
 344:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_register_dec_to_bcd_>
}
 348:	08 95       	ret

0000034a <day>:

void day(uint8_t day) {
 34a:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(DAY_REG, day, 2);
 34c:	85 e0       	ldi	r24, 0x05	; 5
 34e:	42 e0       	ldi	r20, 0x02	; 2
 350:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_register_dec_to_bcd_>
}
 354:	08 95       	ret

00000356 <year>:

void year(uint16_t yr) {
	yr -= 2000;
	_register_dec_to_bcd(YR_REG, yr);
 356:	bc 01       	movw	r22, r24
 358:	60 5d       	subi	r22, 0xD0	; 208
 35a:	77 40       	sbci	r23, 0x07	; 7
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	0e 94 25 01 	call	0x24a	; 0x24a <_register_dec_to_bcd>
}
 362:	08 95       	ret

00000364 <initOutput>:
#include "macro.h"



void initOutput() {
	DDRD = (1 << DDD3) | (1 << DDD4) | (1 << DDD5);
 364:	88 e3       	ldi	r24, 0x38	; 56
 366:	8a b9       	out	0x0a, r24	; 10
}
 368:	08 95       	ret

0000036a <setRegisters>:

void setRegisters(char word) {
	SET(PORTD, PD4);
 36a:	5c 9a       	sbi	0x0b, 4	; 11
 36c:	48 2f       	mov	r20, r24
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	07 c0       	rjmp	.+14     	; 0x384 <setRegisters+0x1a>
		CLR(PORTD, PD5);
		char data = word << i;
		if (data & 0x80) {
			SET(PORTD, PD3);
		} else {
			CLR(PORTD, PD3);
 376:	5b 98       	cbi	0x0b, 3	; 11
		}
		SET(PORTD, PD5);
 378:	5d 9a       	sbi	0x0b, 5	; 11
	DDRD = (1 << DDD3) | (1 << DDD4) | (1 << DDD5);
}

void setRegisters(char word) {
	SET(PORTD, PD4);
	for (int i = 0; i < 8; i++) {
 37a:	2f 5f       	subi	r18, 0xFF	; 255
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	28 30       	cpi	r18, 0x08	; 8
 380:	31 05       	cpc	r19, r1
 382:	89 f0       	breq	.+34     	; 0x3a6 <setRegisters+0x3c>
		CLR(PORTD, PD5);
 384:	5d 98       	cbi	0x0b, 5	; 11
		char data = word << i;
		if (data & 0x80) {
 386:	ca 01       	movw	r24, r20
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <setRegisters+0x26>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <setRegisters+0x22>
 394:	87 ff       	sbrs	r24, 7
 396:	ef cf       	rjmp	.-34     	; 0x376 <setRegisters+0xc>
			SET(PORTD, PD3);
 398:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			CLR(PORTD, PD3);
		}
		SET(PORTD, PD5);
 39a:	5d 9a       	sbi	0x0b, 5	; 11
	DDRD = (1 << DDD3) | (1 << DDD4) | (1 << DDD5);
}

void setRegisters(char word) {
	SET(PORTD, PD4);
	for (int i = 0; i < 8; i++) {
 39c:	2f 5f       	subi	r18, 0xFF	; 255
 39e:	3f 4f       	sbci	r19, 0xFF	; 255
 3a0:	28 30       	cpi	r18, 0x08	; 8
 3a2:	31 05       	cpc	r19, r1
 3a4:	79 f7       	brne	.-34     	; 0x384 <setRegisters+0x1a>
		} else {
			CLR(PORTD, PD3);
		}
		SET(PORTD, PD5);
	}
}
 3a6:	08 95       	ret

000003a8 <setTime>:

void setTime(char reg1, char reg2, char reg3) {
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	08 2f       	mov	r16, r24
 3ae:	16 2f       	mov	r17, r22
 3b0:	84 2f       	mov	r24, r20
	setRegisters(reg3);
 3b2:	0e 94 b5 01 	call	0x36a	; 0x36a <setRegisters>
	setRegisters(reg2);
 3b6:	81 2f       	mov	r24, r17
 3b8:	0e 94 b5 01 	call	0x36a	; 0x36a <setRegisters>
	setRegisters(reg1);
 3bc:	80 2f       	mov	r24, r16
 3be:	0e 94 b5 01 	call	0x36a	; 0x36a <setRegisters>
}
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	08 95       	ret

000003c8 <__read_in>:
		value >>= 1;

	}
}

uint8_t __read_in() {
 3c8:	af 92       	push	r10
 3ca:	bf 92       	push	r11
 3cc:	cf 92       	push	r12
 3ce:	df 92       	push	r13
 3d0:	ef 92       	push	r14
 3d2:	ff 92       	push	r15
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
	uint8_t input_value = 0;
	CLR(DDRB, DDB2);
 3da:	22 98       	cbi	0x04, 2	; 4

	CLR(PORTB, PB1);
 3dc:	29 98       	cbi	0x05, 1	; 5
 3de:	c0 e0       	ldi	r28, 0x00	; 0
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
 3e2:	10 e0       	ldi	r17, 0x00	; 0
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	c2 2e       	mov	r12, r18
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	d2 2e       	mov	r13, r18
	for (int i = 0; i < 8; ++i) {
		printf("%x ", PINB);
		if (PINB & (1 << PB2))
			input_value |= (1 << i);
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	a9 2e       	mov	r10, r25
 3f0:	b1 2c       	mov	r11, r1
 3f2:	80 ea       	ldi	r24, 0xA0	; 160
 3f4:	e8 2e       	mov	r14, r24
 3f6:	8f e0       	ldi	r24, 0x0F	; 15
 3f8:	f8 2e       	mov	r15, r24
	uint8_t input_value = 0;
	CLR(DDRB, DDB2);

	CLR(PORTB, PB1);
	for (int i = 0; i < 8; ++i) {
		printf("%x ", PINB);
 3fa:	83 b1       	in	r24, 0x03	; 3
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <__read_in+0x36>
 3fe:	00 d0       	rcall	.+0      	; 0x400 <__read_in+0x38>
 400:	ed b7       	in	r30, 0x3d	; 61
 402:	fe b7       	in	r31, 0x3e	; 62
 404:	31 96       	adiw	r30, 0x01	; 1
 406:	ad b7       	in	r26, 0x3d	; 61
 408:	be b7       	in	r27, 0x3e	; 62
 40a:	12 96       	adiw	r26, 0x02	; 2
 40c:	dc 92       	st	X, r13
 40e:	ce 92       	st	-X, r12
 410:	11 97       	sbiw	r26, 0x01	; 1
 412:	82 83       	std	Z+2, r24	; 0x02
 414:	13 82       	std	Z+3, r1	; 0x03
 416:	0e 94 00 03 	call	0x600	; 0x600 <printf>
		if (PINB & (1 << PB2))
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	1a 9b       	sbis	0x03, 2	; 3
 424:	08 c0       	rjmp	.+16     	; 0x436 <__read_in+0x6e>
			input_value |= (1 << i);
 426:	c5 01       	movw	r24, r10
 428:	0c 2e       	mov	r0, r28
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__read_in+0x68>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <__read_in+0x64>
 434:	18 2b       	or	r17, r24
		printf("\n");
 436:	8a e0       	ldi	r24, 0x0A	; 10
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 15 03 	call	0x62a	; 0x62a <putchar>
		SET(PORTB, PB1);
 43e:	29 9a       	sbi	0x05, 1	; 5
 440:	c7 01       	movw	r24, r14
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__read_in+0x7a>
		_delay_ms(1);
		CLR(PORTB, PB1);
 446:	29 98       	cbi	0x05, 1	; 5
uint8_t __read_in() {
	uint8_t input_value = 0;
	CLR(DDRB, DDB2);

	CLR(PORTB, PB1);
	for (int i = 0; i < 8; ++i) {
 448:	21 96       	adiw	r28, 0x01	; 1
 44a:	c8 30       	cpi	r28, 0x08	; 8
 44c:	d1 05       	cpc	r29, r1
 44e:	a9 f6       	brne	.-86     	; 0x3fa <__read_in+0x32>
		CLR(PORTB, PB1);
//		DS1302_CLK_1;
	}

	return input_value;
}
 450:	81 2f       	mov	r24, r17
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	df 90       	pop	r13
 45e:	cf 90       	pop	r12
 460:	bf 90       	pop	r11
 462:	af 90       	pop	r10
 464:	08 95       	ret

00000466 <__write_out>:
#include "display.h"
#include "DS1302.h"
#include  "uart.h"
#include  "macro.h"

void __write_out(uint8_t value) {
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	f8 2e       	mov	r15, r24
	SET(DDRB, DDB2);
 472:	22 9a       	sbi	0x04, 2	; 4
 474:	c0 e0       	ldi	r28, 0x00	; 0
 476:	d0 e0       	ldi	r29, 0x00	; 0
 478:	00 ea       	ldi	r16, 0xA0	; 160
 47a:	1f e0       	ldi	r17, 0x0F	; 15
 47c:	15 c0       	rjmp	.+42     	; 0x4a8 <__write_out+0x42>
	for (int i = 0; i < 8; i++) {
//		DS1302_CLK_0;
		CLR(PORTB, PB1);
		_delay_ms(1);
		if (value & 0x01) {
			SET(PORTB, PB2);
 47e:	2a 9a       	sbi	0x05, 2	; 5
//			DS1302_IO_1;
			printf("1");
 480:	81 e3       	ldi	r24, 0x31	; 49
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 15 03 	call	0x62a	; 0x62a <putchar>
		} else {
//			DS1302_IO_0;
			CLR(PORTB, PB2);
			printf("0");
		}
		printf("\n");
 488:	8a e0       	ldi	r24, 0x0A	; 10
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 15 03 	call	0x62a	; 0x62a <putchar>
 490:	c8 01       	movw	r24, r16
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <__write_out+0x2c>
		_delay_ms(1);
//		DS1302_CLK_1;
		SET(PORTB, PB1);
 496:	29 9a       	sbi	0x05, 1	; 5
 498:	c8 01       	movw	r24, r16
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__write_out+0x34>
#include  "uart.h"
#include  "macro.h"

void __write_out(uint8_t value) {
	SET(DDRB, DDB2);
	for (int i = 0; i < 8; i++) {
 49e:	21 96       	adiw	r28, 0x01	; 1
 4a0:	c8 30       	cpi	r28, 0x08	; 8
 4a2:	d1 05       	cpc	r29, r1
 4a4:	69 f0       	breq	.+26     	; 0x4c0 <__write_out+0x5a>
		printf("\n");
		_delay_ms(1);
//		DS1302_CLK_1;
		SET(PORTB, PB1);
		_delay_ms(1);
		value >>= 1;
 4a6:	f6 94       	lsr	r15

void __write_out(uint8_t value) {
	SET(DDRB, DDB2);
	for (int i = 0; i < 8; i++) {
//		DS1302_CLK_0;
		CLR(PORTB, PB1);
 4a8:	29 98       	cbi	0x05, 1	; 5
 4aa:	c8 01       	movw	r24, r16
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__write_out+0x46>
		_delay_ms(1);
		if (value & 0x01) {
 4b0:	f0 fc       	sbrc	r15, 0
 4b2:	e5 cf       	rjmp	.-54     	; 0x47e <__write_out+0x18>
			SET(PORTB, PB2);
//			DS1302_IO_1;
			printf("1");
		} else {
//			DS1302_IO_0;
			CLR(PORTB, PB2);
 4b4:	2a 98       	cbi	0x05, 2	; 5
			printf("0");
 4b6:	80 e3       	ldi	r24, 0x30	; 48
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 15 03 	call	0x62a	; 0x62a <putchar>
 4be:	e4 cf       	rjmp	.-56     	; 0x488 <__write_out+0x22>
		SET(PORTB, PB1);
		_delay_ms(1);
		value >>= 1;

	}
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	08 95       	ret

000004cc <_read_register>:
	}

	return input_value;
}

uint8_t _read_register(uint8_t reg) {
 4cc:	1f 93       	push	r17
	uint8_t cmd_byte = 129; /* 1000 0001 */
	uint8_t reg_value;
	cmd_byte |= (reg << 1);
 4ce:	18 2f       	mov	r17, r24
 4d0:	11 0f       	add	r17, r17
 4d2:	11 68       	ori	r17, 0x81	; 129

	printf("cmd_byte %x\n", cmd_byte);
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <_read_register+0xa>
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <_read_register+0xc>
 4d8:	ed b7       	in	r30, 0x3d	; 61
 4da:	fe b7       	in	r31, 0x3e	; 62
 4dc:	31 96       	adiw	r30, 0x01	; 1
 4de:	84 e0       	ldi	r24, 0x04	; 4
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	ad b7       	in	r26, 0x3d	; 61
 4e4:	be b7       	in	r27, 0x3e	; 62
 4e6:	12 96       	adiw	r26, 0x02	; 2
 4e8:	9c 93       	st	X, r25
 4ea:	8e 93       	st	-X, r24
 4ec:	11 97       	sbiw	r26, 0x01	; 1
 4ee:	12 83       	std	Z+2, r17	; 0x02
 4f0:	13 82       	std	Z+3, r1	; 0x03
 4f2:	0e 94 00 03 	call	0x600	; 0x600 <printf>

//	DS1302_CLK_0;
	CLR(PORTB, PB1);
 4f6:	29 98       	cbi	0x05, 1	; 5

	DS1302_RST_1;
 4f8:	85 b1       	in	r24, 0x05	; 5
 4fa:	85 b9       	out	0x05, r24	; 5
	SET(PORTB, PB0);
 4fc:	28 9a       	sbi	0x05, 0	; 5
	__write_out(cmd_byte);
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	81 2f       	mov	r24, r17
 508:	0e 94 33 02 	call	0x466	; 0x466 <__write_out>
	reg_value = __read_in();
 50c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__read_in>
 510:	18 2f       	mov	r17, r24

	printf("reg_value %x\n", reg_value);
 512:	00 d0       	rcall	.+0      	; 0x514 <_read_register+0x48>
 514:	00 d0       	rcall	.+0      	; 0x516 <_read_register+0x4a>
 516:	ed b7       	in	r30, 0x3d	; 61
 518:	fe b7       	in	r31, 0x3e	; 62
 51a:	31 96       	adiw	r30, 0x01	; 1
 51c:	81 e1       	ldi	r24, 0x11	; 17
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	ad b7       	in	r26, 0x3d	; 61
 522:	be b7       	in	r27, 0x3e	; 62
 524:	12 96       	adiw	r26, 0x02	; 2
 526:	9c 93       	st	X, r25
 528:	8e 93       	st	-X, r24
 52a:	11 97       	sbiw	r26, 0x01	; 1
 52c:	12 83       	std	Z+2, r17	; 0x02
 52e:	13 82       	std	Z+3, r1	; 0x03
 530:	0e 94 00 03 	call	0x600	; 0x600 <printf>

//	DS1302_RST_0;
	CLR(PORTB, PB0);
 534:	28 98       	cbi	0x05, 0	; 5
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0

	return reg_value;
}
 53e:	81 2f       	mov	r24, r17
 540:	1f 91       	pop	r17
 542:	08 95       	ret

00000544 <main>:

int main(void) {
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
	initOutput();
 548:	0e 94 b2 01 	call	0x364	; 0x364 <initOutput>
	uart_init();
 54c:	0e 94 cc 02 	call	0x598	; 0x598 <uart_init>
	stdout= &uart_output;
 550:	87 e3       	ldi	r24, 0x37	; 55
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	90 93 57 01 	sts	0x0157, r25
 558:	80 93 56 01 	sts	0x0156, r24
	stdin= &uart_input;
 55c:	85 e4       	ldi	r24, 0x45	; 69
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	90 93 55 01 	sts	0x0155, r25
 564:	80 93 54 01 	sts	0x0154, r24
	init();
 568:	0e 94 8f 00 	call	0x11e	; 0x11e <init>
	SET(DDRB, DDB0);
 56c:	20 9a       	sbi	0x04, 0	; 4
	SET(DDRB, DDB1);
 56e:	21 9a       	sbi	0x04, 1	; 4
 570:	c0 e9       	ldi	r28, 0x90	; 144
 572:	d1 e0       	ldi	r29, 0x01	; 1
	while (1) {
		_read_register(0);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 66 02 	call	0x4cc	; 0x4cc <_read_register>
		_read_register(1);
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 66 02 	call	0x4cc	; 0x4cc <_read_register>
		_read_register(2);
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	0e 94 66 02 	call	0x4cc	; 0x4cc <_read_register>
 586:	20 e1       	ldi	r18, 0x10	; 16
 588:	37 e2       	ldi	r19, 0x27	; 39
 58a:	ce 01       	movw	r24, r28
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 590:	21 50       	subi	r18, 0x01	; 1
 592:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 594:	d1 f7       	brne	.-12     	; 0x58a <main+0x46>
 596:	ee cf       	rjmp	.-36     	; 0x574 <main+0x30>

00000598 <uart_init>:
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    UBRR0H = UBRRH_VALUE;
 598:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
 59c:	87 e6       	ldi	r24, 0x67	; 103
 59e:	80 93 c4 00 	sts	0x00C4, r24
    
#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
 5a2:	e0 ec       	ldi	r30, 0xC0	; 192
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	8d 7f       	andi	r24, 0xFD	; 253
 5aa:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
 5ac:	86 e0       	ldi	r24, 0x06	; 6
 5ae:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
 5b2:	88 e1       	ldi	r24, 0x18	; 24
 5b4:	80 93 c1 00 	sts	0x00C1, r24
}
 5b8:	08 95       	ret

000005ba <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
 5ba:	1f 93       	push	r17
 5bc:	18 2f       	mov	r17, r24
    if (c == '\n') {
 5be:	8a 30       	cpi	r24, 0x0A	; 10
 5c0:	41 f0       	breq	.+16     	; 0x5d2 <uart_putchar+0x18>
        uart_putchar('\r', stream);
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
 5c2:	80 91 c0 00 	lds	r24, 0x00C0
 5c6:	85 ff       	sbrs	r24, 5
 5c8:	fc cf       	rjmp	.-8      	; 0x5c2 <uart_putchar+0x8>
    UDR0 = c;
 5ca:	10 93 c6 00 	sts	0x00C6, r17
}
 5ce:	1f 91       	pop	r17
 5d0:	08 95       	ret
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
}

void uart_putchar(char c, FILE *stream) {
    if (c == '\n') {
        uart_putchar('\r', stream);
 5d2:	8d e0       	ldi	r24, 0x0D	; 13
 5d4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <uart_putchar>
 5d8:	f4 cf       	rjmp	.-24     	; 0x5c2 <uart_putchar+0x8>

000005da <uart_getchar>:
    loop_until_bit_is_set(UCSR0A, UDRE0);
    UDR0 = c;
}

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
 5da:	80 91 c0 00 	lds	r24, 0x00C0
 5de:	87 ff       	sbrs	r24, 7
 5e0:	fc cf       	rjmp	.-8      	; 0x5da <uart_getchar>
    return UDR0;
 5e2:	80 91 c6 00 	lds	r24, 0x00C6
}
 5e6:	08 95       	ret

000005e8 <__udivmodqi4>:
 5e8:	99 1b       	sub	r25, r25
 5ea:	79 e0       	ldi	r23, 0x09	; 9
 5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <__udivmodqi4_ep>

000005ee <__udivmodqi4_loop>:
 5ee:	99 1f       	adc	r25, r25
 5f0:	96 17       	cp	r25, r22
 5f2:	08 f0       	brcs	.+2      	; 0x5f6 <__udivmodqi4_ep>
 5f4:	96 1b       	sub	r25, r22

000005f6 <__udivmodqi4_ep>:
 5f6:	88 1f       	adc	r24, r24
 5f8:	7a 95       	dec	r23
 5fa:	c9 f7       	brne	.-14     	; 0x5ee <__udivmodqi4_loop>
 5fc:	80 95       	com	r24
 5fe:	08 95       	ret

00000600 <printf>:
 600:	a0 e0       	ldi	r26, 0x00	; 0
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e6 e0       	ldi	r30, 0x06	; 6
 606:	f3 e0       	ldi	r31, 0x03	; 3
 608:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__prologue_saves__+0x20>
 60c:	fe 01       	movw	r30, r28
 60e:	35 96       	adiw	r30, 0x05	; 5
 610:	61 91       	ld	r22, Z+
 612:	71 91       	ld	r23, Z+
 614:	80 91 56 01 	lds	r24, 0x0156
 618:	90 91 57 01 	lds	r25, 0x0157
 61c:	af 01       	movw	r20, r30
 61e:	0e 94 1c 03 	call	0x638	; 0x638 <vfprintf>
 622:	20 96       	adiw	r28, 0x00	; 0
 624:	e2 e0       	ldi	r30, 0x02	; 2
 626:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__epilogue_restores__+0x20>

0000062a <putchar>:
 62a:	60 91 56 01 	lds	r22, 0x0156
 62e:	70 91 57 01 	lds	r23, 0x0157
 632:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 636:	08 95       	ret

00000638 <vfprintf>:
 638:	ab e0       	ldi	r26, 0x0B	; 11
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	e2 e2       	ldi	r30, 0x22	; 34
 63e:	f3 e0       	ldi	r31, 0x03	; 3
 640:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__prologue_saves__>
 644:	3c 01       	movw	r6, r24
 646:	2b 01       	movw	r4, r22
 648:	5a 01       	movw	r10, r20
 64a:	fc 01       	movw	r30, r24
 64c:	17 82       	std	Z+7, r1	; 0x07
 64e:	16 82       	std	Z+6, r1	; 0x06
 650:	83 81       	ldd	r24, Z+3	; 0x03
 652:	81 fd       	sbrc	r24, 1
 654:	03 c0       	rjmp	.+6      	; 0x65c <vfprintf+0x24>
 656:	6f ef       	ldi	r22, 0xFF	; 255
 658:	7f ef       	ldi	r23, 0xFF	; 255
 65a:	c6 c1       	rjmp	.+908    	; 0x9e8 <__stack+0xe9>
 65c:	9a e0       	ldi	r25, 0x0A	; 10
 65e:	89 2e       	mov	r8, r25
 660:	1e 01       	movw	r2, r28
 662:	08 94       	sec
 664:	21 1c       	adc	r2, r1
 666:	31 1c       	adc	r3, r1
 668:	f3 01       	movw	r30, r6
 66a:	23 81       	ldd	r18, Z+3	; 0x03
 66c:	f2 01       	movw	r30, r4
 66e:	23 fd       	sbrc	r18, 3
 670:	85 91       	lpm	r24, Z+
 672:	23 ff       	sbrs	r18, 3
 674:	81 91       	ld	r24, Z+
 676:	2f 01       	movw	r4, r30
 678:	88 23       	and	r24, r24
 67a:	09 f4       	brne	.+2      	; 0x67e <vfprintf+0x46>
 67c:	b2 c1       	rjmp	.+868    	; 0x9e2 <__stack+0xe3>
 67e:	85 32       	cpi	r24, 0x25	; 37
 680:	39 f4       	brne	.+14     	; 0x690 <vfprintf+0x58>
 682:	23 fd       	sbrc	r18, 3
 684:	85 91       	lpm	r24, Z+
 686:	23 ff       	sbrs	r18, 3
 688:	81 91       	ld	r24, Z+
 68a:	2f 01       	movw	r4, r30
 68c:	85 32       	cpi	r24, 0x25	; 37
 68e:	29 f4       	brne	.+10     	; 0x69a <vfprintf+0x62>
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	b3 01       	movw	r22, r6
 694:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 698:	e7 cf       	rjmp	.-50     	; 0x668 <vfprintf+0x30>
 69a:	98 2f       	mov	r25, r24
 69c:	ff 24       	eor	r15, r15
 69e:	ee 24       	eor	r14, r14
 6a0:	99 24       	eor	r9, r9
 6a2:	ff e1       	ldi	r31, 0x1F	; 31
 6a4:	ff 15       	cp	r31, r15
 6a6:	d0 f0       	brcs	.+52     	; 0x6dc <vfprintf+0xa4>
 6a8:	9b 32       	cpi	r25, 0x2B	; 43
 6aa:	69 f0       	breq	.+26     	; 0x6c6 <vfprintf+0x8e>
 6ac:	9c 32       	cpi	r25, 0x2C	; 44
 6ae:	28 f4       	brcc	.+10     	; 0x6ba <vfprintf+0x82>
 6b0:	90 32       	cpi	r25, 0x20	; 32
 6b2:	59 f0       	breq	.+22     	; 0x6ca <vfprintf+0x92>
 6b4:	93 32       	cpi	r25, 0x23	; 35
 6b6:	91 f4       	brne	.+36     	; 0x6dc <vfprintf+0xa4>
 6b8:	0e c0       	rjmp	.+28     	; 0x6d6 <vfprintf+0x9e>
 6ba:	9d 32       	cpi	r25, 0x2D	; 45
 6bc:	49 f0       	breq	.+18     	; 0x6d0 <vfprintf+0x98>
 6be:	90 33       	cpi	r25, 0x30	; 48
 6c0:	69 f4       	brne	.+26     	; 0x6dc <vfprintf+0xa4>
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	24 c0       	rjmp	.+72     	; 0x70e <vfprintf+0xd6>
 6c6:	52 e0       	ldi	r21, 0x02	; 2
 6c8:	f5 2a       	or	r15, r21
 6ca:	84 e0       	ldi	r24, 0x04	; 4
 6cc:	f8 2a       	or	r15, r24
 6ce:	28 c0       	rjmp	.+80     	; 0x720 <vfprintf+0xe8>
 6d0:	98 e0       	ldi	r25, 0x08	; 8
 6d2:	f9 2a       	or	r15, r25
 6d4:	25 c0       	rjmp	.+74     	; 0x720 <vfprintf+0xe8>
 6d6:	e0 e1       	ldi	r30, 0x10	; 16
 6d8:	fe 2a       	or	r15, r30
 6da:	22 c0       	rjmp	.+68     	; 0x720 <vfprintf+0xe8>
 6dc:	f7 fc       	sbrc	r15, 7
 6de:	29 c0       	rjmp	.+82     	; 0x732 <vfprintf+0xfa>
 6e0:	89 2f       	mov	r24, r25
 6e2:	80 53       	subi	r24, 0x30	; 48
 6e4:	8a 30       	cpi	r24, 0x0A	; 10
 6e6:	70 f4       	brcc	.+28     	; 0x704 <vfprintf+0xcc>
 6e8:	f6 fe       	sbrs	r15, 6
 6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <vfprintf+0xbe>
 6ec:	98 9c       	mul	r9, r8
 6ee:	90 2c       	mov	r9, r0
 6f0:	11 24       	eor	r1, r1
 6f2:	98 0e       	add	r9, r24
 6f4:	15 c0       	rjmp	.+42     	; 0x720 <vfprintf+0xe8>
 6f6:	e8 9c       	mul	r14, r8
 6f8:	e0 2c       	mov	r14, r0
 6fa:	11 24       	eor	r1, r1
 6fc:	e8 0e       	add	r14, r24
 6fe:	f0 e2       	ldi	r31, 0x20	; 32
 700:	ff 2a       	or	r15, r31
 702:	0e c0       	rjmp	.+28     	; 0x720 <vfprintf+0xe8>
 704:	9e 32       	cpi	r25, 0x2E	; 46
 706:	29 f4       	brne	.+10     	; 0x712 <vfprintf+0xda>
 708:	f6 fc       	sbrc	r15, 6
 70a:	6b c1       	rjmp	.+726    	; 0x9e2 <__stack+0xe3>
 70c:	40 e4       	ldi	r20, 0x40	; 64
 70e:	f4 2a       	or	r15, r20
 710:	07 c0       	rjmp	.+14     	; 0x720 <vfprintf+0xe8>
 712:	9c 36       	cpi	r25, 0x6C	; 108
 714:	19 f4       	brne	.+6      	; 0x71c <vfprintf+0xe4>
 716:	50 e8       	ldi	r21, 0x80	; 128
 718:	f5 2a       	or	r15, r21
 71a:	02 c0       	rjmp	.+4      	; 0x720 <vfprintf+0xe8>
 71c:	98 36       	cpi	r25, 0x68	; 104
 71e:	49 f4       	brne	.+18     	; 0x732 <vfprintf+0xfa>
 720:	f2 01       	movw	r30, r4
 722:	23 fd       	sbrc	r18, 3
 724:	95 91       	lpm	r25, Z+
 726:	23 ff       	sbrs	r18, 3
 728:	91 91       	ld	r25, Z+
 72a:	2f 01       	movw	r4, r30
 72c:	99 23       	and	r25, r25
 72e:	09 f0       	breq	.+2      	; 0x732 <vfprintf+0xfa>
 730:	b8 cf       	rjmp	.-144    	; 0x6a2 <vfprintf+0x6a>
 732:	89 2f       	mov	r24, r25
 734:	85 54       	subi	r24, 0x45	; 69
 736:	83 30       	cpi	r24, 0x03	; 3
 738:	18 f0       	brcs	.+6      	; 0x740 <vfprintf+0x108>
 73a:	80 52       	subi	r24, 0x20	; 32
 73c:	83 30       	cpi	r24, 0x03	; 3
 73e:	38 f4       	brcc	.+14     	; 0x74e <vfprintf+0x116>
 740:	44 e0       	ldi	r20, 0x04	; 4
 742:	50 e0       	ldi	r21, 0x00	; 0
 744:	a4 0e       	add	r10, r20
 746:	b5 1e       	adc	r11, r21
 748:	5f e3       	ldi	r21, 0x3F	; 63
 74a:	59 83       	std	Y+1, r21	; 0x01
 74c:	0f c0       	rjmp	.+30     	; 0x76c <vfprintf+0x134>
 74e:	93 36       	cpi	r25, 0x63	; 99
 750:	31 f0       	breq	.+12     	; 0x75e <vfprintf+0x126>
 752:	93 37       	cpi	r25, 0x73	; 115
 754:	79 f0       	breq	.+30     	; 0x774 <vfprintf+0x13c>
 756:	93 35       	cpi	r25, 0x53	; 83
 758:	09 f0       	breq	.+2      	; 0x75c <vfprintf+0x124>
 75a:	56 c0       	rjmp	.+172    	; 0x808 <vfprintf+0x1d0>
 75c:	20 c0       	rjmp	.+64     	; 0x79e <vfprintf+0x166>
 75e:	f5 01       	movw	r30, r10
 760:	80 81       	ld	r24, Z
 762:	89 83       	std	Y+1, r24	; 0x01
 764:	42 e0       	ldi	r20, 0x02	; 2
 766:	50 e0       	ldi	r21, 0x00	; 0
 768:	a4 0e       	add	r10, r20
 76a:	b5 1e       	adc	r11, r21
 76c:	61 01       	movw	r12, r2
 76e:	01 e0       	ldi	r16, 0x01	; 1
 770:	10 e0       	ldi	r17, 0x00	; 0
 772:	12 c0       	rjmp	.+36     	; 0x798 <vfprintf+0x160>
 774:	f5 01       	movw	r30, r10
 776:	c0 80       	ld	r12, Z
 778:	d1 80       	ldd	r13, Z+1	; 0x01
 77a:	f6 fc       	sbrc	r15, 6
 77c:	03 c0       	rjmp	.+6      	; 0x784 <vfprintf+0x14c>
 77e:	6f ef       	ldi	r22, 0xFF	; 255
 780:	7f ef       	ldi	r23, 0xFF	; 255
 782:	02 c0       	rjmp	.+4      	; 0x788 <vfprintf+0x150>
 784:	69 2d       	mov	r22, r9
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	42 e0       	ldi	r20, 0x02	; 2
 78a:	50 e0       	ldi	r21, 0x00	; 0
 78c:	a4 0e       	add	r10, r20
 78e:	b5 1e       	adc	r11, r21
 790:	c6 01       	movw	r24, r12
 792:	0e 94 04 05 	call	0xa08	; 0xa08 <strnlen>
 796:	8c 01       	movw	r16, r24
 798:	5f e7       	ldi	r21, 0x7F	; 127
 79a:	f5 22       	and	r15, r21
 79c:	14 c0       	rjmp	.+40     	; 0x7c6 <vfprintf+0x18e>
 79e:	f5 01       	movw	r30, r10
 7a0:	c0 80       	ld	r12, Z
 7a2:	d1 80       	ldd	r13, Z+1	; 0x01
 7a4:	f6 fc       	sbrc	r15, 6
 7a6:	03 c0       	rjmp	.+6      	; 0x7ae <vfprintf+0x176>
 7a8:	6f ef       	ldi	r22, 0xFF	; 255
 7aa:	7f ef       	ldi	r23, 0xFF	; 255
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <vfprintf+0x17a>
 7ae:	69 2d       	mov	r22, r9
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	42 e0       	ldi	r20, 0x02	; 2
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	a4 0e       	add	r10, r20
 7b8:	b5 1e       	adc	r11, r21
 7ba:	c6 01       	movw	r24, r12
 7bc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <strnlen_P>
 7c0:	8c 01       	movw	r16, r24
 7c2:	50 e8       	ldi	r21, 0x80	; 128
 7c4:	f5 2a       	or	r15, r21
 7c6:	f3 fe       	sbrs	r15, 3
 7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <vfprintf+0x1a0>
 7ca:	1a c0       	rjmp	.+52     	; 0x800 <vfprintf+0x1c8>
 7cc:	80 e2       	ldi	r24, 0x20	; 32
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	b3 01       	movw	r22, r6
 7d2:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 7d6:	ea 94       	dec	r14
 7d8:	8e 2d       	mov	r24, r14
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	08 17       	cp	r16, r24
 7de:	19 07       	cpc	r17, r25
 7e0:	a8 f3       	brcs	.-22     	; 0x7cc <vfprintf+0x194>
 7e2:	0e c0       	rjmp	.+28     	; 0x800 <vfprintf+0x1c8>
 7e4:	f6 01       	movw	r30, r12
 7e6:	f7 fc       	sbrc	r15, 7
 7e8:	85 91       	lpm	r24, Z+
 7ea:	f7 fe       	sbrs	r15, 7
 7ec:	81 91       	ld	r24, Z+
 7ee:	6f 01       	movw	r12, r30
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	b3 01       	movw	r22, r6
 7f4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 7f8:	e1 10       	cpse	r14, r1
 7fa:	ea 94       	dec	r14
 7fc:	01 50       	subi	r16, 0x01	; 1
 7fe:	10 40       	sbci	r17, 0x00	; 0
 800:	01 15       	cp	r16, r1
 802:	11 05       	cpc	r17, r1
 804:	79 f7       	brne	.-34     	; 0x7e4 <vfprintf+0x1ac>
 806:	ea c0       	rjmp	.+468    	; 0x9dc <__stack+0xdd>
 808:	94 36       	cpi	r25, 0x64	; 100
 80a:	11 f0       	breq	.+4      	; 0x810 <vfprintf+0x1d8>
 80c:	99 36       	cpi	r25, 0x69	; 105
 80e:	69 f5       	brne	.+90     	; 0x86a <vfprintf+0x232>
 810:	f7 fe       	sbrs	r15, 7
 812:	08 c0       	rjmp	.+16     	; 0x824 <vfprintf+0x1ec>
 814:	f5 01       	movw	r30, r10
 816:	20 81       	ld	r18, Z
 818:	31 81       	ldd	r19, Z+1	; 0x01
 81a:	42 81       	ldd	r20, Z+2	; 0x02
 81c:	53 81       	ldd	r21, Z+3	; 0x03
 81e:	84 e0       	ldi	r24, 0x04	; 4
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0a c0       	rjmp	.+20     	; 0x838 <vfprintf+0x200>
 824:	f5 01       	movw	r30, r10
 826:	80 81       	ld	r24, Z
 828:	91 81       	ldd	r25, Z+1	; 0x01
 82a:	9c 01       	movw	r18, r24
 82c:	44 27       	eor	r20, r20
 82e:	37 fd       	sbrc	r19, 7
 830:	40 95       	com	r20
 832:	54 2f       	mov	r21, r20
 834:	82 e0       	ldi	r24, 0x02	; 2
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	a8 0e       	add	r10, r24
 83a:	b9 1e       	adc	r11, r25
 83c:	9f e6       	ldi	r25, 0x6F	; 111
 83e:	f9 22       	and	r15, r25
 840:	57 ff       	sbrs	r21, 7
 842:	09 c0       	rjmp	.+18     	; 0x856 <vfprintf+0x21e>
 844:	50 95       	com	r21
 846:	40 95       	com	r20
 848:	30 95       	com	r19
 84a:	21 95       	neg	r18
 84c:	3f 4f       	sbci	r19, 0xFF	; 255
 84e:	4f 4f       	sbci	r20, 0xFF	; 255
 850:	5f 4f       	sbci	r21, 0xFF	; 255
 852:	e0 e8       	ldi	r30, 0x80	; 128
 854:	fe 2a       	or	r15, r30
 856:	ca 01       	movw	r24, r20
 858:	b9 01       	movw	r22, r18
 85a:	a1 01       	movw	r20, r2
 85c:	2a e0       	ldi	r18, 0x0A	; 10
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	0e 94 3b 05 	call	0xa76	; 0xa76 <__ultoa_invert>
 864:	d8 2e       	mov	r13, r24
 866:	d2 18       	sub	r13, r2
 868:	40 c0       	rjmp	.+128    	; 0x8ea <vfprintf+0x2b2>
 86a:	95 37       	cpi	r25, 0x75	; 117
 86c:	29 f4       	brne	.+10     	; 0x878 <vfprintf+0x240>
 86e:	1f 2d       	mov	r17, r15
 870:	1f 7e       	andi	r17, 0xEF	; 239
 872:	2a e0       	ldi	r18, 0x0A	; 10
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	1d c0       	rjmp	.+58     	; 0x8b2 <vfprintf+0x27a>
 878:	1f 2d       	mov	r17, r15
 87a:	19 7f       	andi	r17, 0xF9	; 249
 87c:	9f 36       	cpi	r25, 0x6F	; 111
 87e:	61 f0       	breq	.+24     	; 0x898 <vfprintf+0x260>
 880:	90 37       	cpi	r25, 0x70	; 112
 882:	20 f4       	brcc	.+8      	; 0x88c <vfprintf+0x254>
 884:	98 35       	cpi	r25, 0x58	; 88
 886:	09 f0       	breq	.+2      	; 0x88a <vfprintf+0x252>
 888:	ac c0       	rjmp	.+344    	; 0x9e2 <__stack+0xe3>
 88a:	0f c0       	rjmp	.+30     	; 0x8aa <vfprintf+0x272>
 88c:	90 37       	cpi	r25, 0x70	; 112
 88e:	39 f0       	breq	.+14     	; 0x89e <vfprintf+0x266>
 890:	98 37       	cpi	r25, 0x78	; 120
 892:	09 f0       	breq	.+2      	; 0x896 <vfprintf+0x25e>
 894:	a6 c0       	rjmp	.+332    	; 0x9e2 <__stack+0xe3>
 896:	04 c0       	rjmp	.+8      	; 0x8a0 <vfprintf+0x268>
 898:	28 e0       	ldi	r18, 0x08	; 8
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	0a c0       	rjmp	.+20     	; 0x8b2 <vfprintf+0x27a>
 89e:	10 61       	ori	r17, 0x10	; 16
 8a0:	14 fd       	sbrc	r17, 4
 8a2:	14 60       	ori	r17, 0x04	; 4
 8a4:	20 e1       	ldi	r18, 0x10	; 16
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <vfprintf+0x27a>
 8aa:	14 fd       	sbrc	r17, 4
 8ac:	16 60       	ori	r17, 0x06	; 6
 8ae:	20 e1       	ldi	r18, 0x10	; 16
 8b0:	32 e0       	ldi	r19, 0x02	; 2
 8b2:	17 ff       	sbrs	r17, 7
 8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <vfprintf+0x28e>
 8b6:	f5 01       	movw	r30, r10
 8b8:	60 81       	ld	r22, Z
 8ba:	71 81       	ldd	r23, Z+1	; 0x01
 8bc:	82 81       	ldd	r24, Z+2	; 0x02
 8be:	93 81       	ldd	r25, Z+3	; 0x03
 8c0:	44 e0       	ldi	r20, 0x04	; 4
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <vfprintf+0x29e>
 8c6:	f5 01       	movw	r30, r10
 8c8:	80 81       	ld	r24, Z
 8ca:	91 81       	ldd	r25, Z+1	; 0x01
 8cc:	bc 01       	movw	r22, r24
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	42 e0       	ldi	r20, 0x02	; 2
 8d4:	50 e0       	ldi	r21, 0x00	; 0
 8d6:	a4 0e       	add	r10, r20
 8d8:	b5 1e       	adc	r11, r21
 8da:	a1 01       	movw	r20, r2
 8dc:	0e 94 3b 05 	call	0xa76	; 0xa76 <__ultoa_invert>
 8e0:	d8 2e       	mov	r13, r24
 8e2:	d2 18       	sub	r13, r2
 8e4:	8f e7       	ldi	r24, 0x7F	; 127
 8e6:	f8 2e       	mov	r15, r24
 8e8:	f1 22       	and	r15, r17
 8ea:	f6 fe       	sbrs	r15, 6
 8ec:	0b c0       	rjmp	.+22     	; 0x904 <__stack+0x5>
 8ee:	5e ef       	ldi	r21, 0xFE	; 254
 8f0:	f5 22       	and	r15, r21
 8f2:	d9 14       	cp	r13, r9
 8f4:	38 f4       	brcc	.+14     	; 0x904 <__stack+0x5>
 8f6:	f4 fe       	sbrs	r15, 4
 8f8:	07 c0       	rjmp	.+14     	; 0x908 <__stack+0x9>
 8fa:	f2 fc       	sbrc	r15, 2
 8fc:	05 c0       	rjmp	.+10     	; 0x908 <__stack+0x9>
 8fe:	8f ee       	ldi	r24, 0xEF	; 239
 900:	f8 22       	and	r15, r24
 902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
 904:	1d 2d       	mov	r17, r13
 906:	01 c0       	rjmp	.+2      	; 0x90a <__stack+0xb>
 908:	19 2d       	mov	r17, r9
 90a:	f4 fe       	sbrs	r15, 4
 90c:	0d c0       	rjmp	.+26     	; 0x928 <__stack+0x29>
 90e:	fe 01       	movw	r30, r28
 910:	ed 0d       	add	r30, r13
 912:	f1 1d       	adc	r31, r1
 914:	80 81       	ld	r24, Z
 916:	80 33       	cpi	r24, 0x30	; 48
 918:	19 f4       	brne	.+6      	; 0x920 <__stack+0x21>
 91a:	99 ee       	ldi	r25, 0xE9	; 233
 91c:	f9 22       	and	r15, r25
 91e:	08 c0       	rjmp	.+16     	; 0x930 <__stack+0x31>
 920:	1f 5f       	subi	r17, 0xFF	; 255
 922:	f2 fe       	sbrs	r15, 2
 924:	05 c0       	rjmp	.+10     	; 0x930 <__stack+0x31>
 926:	03 c0       	rjmp	.+6      	; 0x92e <__stack+0x2f>
 928:	8f 2d       	mov	r24, r15
 92a:	86 78       	andi	r24, 0x86	; 134
 92c:	09 f0       	breq	.+2      	; 0x930 <__stack+0x31>
 92e:	1f 5f       	subi	r17, 0xFF	; 255
 930:	0f 2d       	mov	r16, r15
 932:	f3 fc       	sbrc	r15, 3
 934:	14 c0       	rjmp	.+40     	; 0x95e <__stack+0x5f>
 936:	f0 fe       	sbrs	r15, 0
 938:	0f c0       	rjmp	.+30     	; 0x958 <__stack+0x59>
 93a:	1e 15       	cp	r17, r14
 93c:	10 f0       	brcs	.+4      	; 0x942 <__stack+0x43>
 93e:	9d 2c       	mov	r9, r13
 940:	0b c0       	rjmp	.+22     	; 0x958 <__stack+0x59>
 942:	9d 2c       	mov	r9, r13
 944:	9e 0c       	add	r9, r14
 946:	91 1a       	sub	r9, r17
 948:	1e 2d       	mov	r17, r14
 94a:	06 c0       	rjmp	.+12     	; 0x958 <__stack+0x59>
 94c:	80 e2       	ldi	r24, 0x20	; 32
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	b3 01       	movw	r22, r6
 952:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 956:	1f 5f       	subi	r17, 0xFF	; 255
 958:	1e 15       	cp	r17, r14
 95a:	c0 f3       	brcs	.-16     	; 0x94c <__stack+0x4d>
 95c:	04 c0       	rjmp	.+8      	; 0x966 <__stack+0x67>
 95e:	1e 15       	cp	r17, r14
 960:	10 f4       	brcc	.+4      	; 0x966 <__stack+0x67>
 962:	e1 1a       	sub	r14, r17
 964:	01 c0       	rjmp	.+2      	; 0x968 <__stack+0x69>
 966:	ee 24       	eor	r14, r14
 968:	04 ff       	sbrs	r16, 4
 96a:	0f c0       	rjmp	.+30     	; 0x98a <__stack+0x8b>
 96c:	80 e3       	ldi	r24, 0x30	; 48
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	b3 01       	movw	r22, r6
 972:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 976:	02 ff       	sbrs	r16, 2
 978:	1d c0       	rjmp	.+58     	; 0x9b4 <__stack+0xb5>
 97a:	01 fd       	sbrc	r16, 1
 97c:	03 c0       	rjmp	.+6      	; 0x984 <__stack+0x85>
 97e:	88 e7       	ldi	r24, 0x78	; 120
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e c0       	rjmp	.+28     	; 0x9a0 <__stack+0xa1>
 984:	88 e5       	ldi	r24, 0x58	; 88
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0b c0       	rjmp	.+22     	; 0x9a0 <__stack+0xa1>
 98a:	80 2f       	mov	r24, r16
 98c:	86 78       	andi	r24, 0x86	; 134
 98e:	91 f0       	breq	.+36     	; 0x9b4 <__stack+0xb5>
 990:	01 ff       	sbrs	r16, 1
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x99>
 994:	8b e2       	ldi	r24, 0x2B	; 43
 996:	01 c0       	rjmp	.+2      	; 0x99a <__stack+0x9b>
 998:	80 e2       	ldi	r24, 0x20	; 32
 99a:	f7 fc       	sbrc	r15, 7
 99c:	8d e2       	ldi	r24, 0x2D	; 45
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	b3 01       	movw	r22, r6
 9a2:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <__stack+0xb5>
 9a8:	80 e3       	ldi	r24, 0x30	; 48
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	b3 01       	movw	r22, r6
 9ae:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 9b2:	9a 94       	dec	r9
 9b4:	d9 14       	cp	r13, r9
 9b6:	c0 f3       	brcs	.-16     	; 0x9a8 <__stack+0xa9>
 9b8:	da 94       	dec	r13
 9ba:	f1 01       	movw	r30, r2
 9bc:	ed 0d       	add	r30, r13
 9be:	f1 1d       	adc	r31, r1
 9c0:	80 81       	ld	r24, Z
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	b3 01       	movw	r22, r6
 9c6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 9ca:	dd 20       	and	r13, r13
 9cc:	a9 f7       	brne	.-22     	; 0x9b8 <__stack+0xb9>
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <__stack+0xdd>
 9d0:	80 e2       	ldi	r24, 0x20	; 32
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	b3 01       	movw	r22, r6
 9d6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <fputc>
 9da:	ea 94       	dec	r14
 9dc:	ee 20       	and	r14, r14
 9de:	c1 f7       	brne	.-16     	; 0x9d0 <__stack+0xd1>
 9e0:	43 ce       	rjmp	.-890    	; 0x668 <vfprintf+0x30>
 9e2:	f3 01       	movw	r30, r6
 9e4:	66 81       	ldd	r22, Z+6	; 0x06
 9e6:	77 81       	ldd	r23, Z+7	; 0x07
 9e8:	cb 01       	movw	r24, r22
 9ea:	2b 96       	adiw	r28, 0x0b	; 11
 9ec:	e2 e1       	ldi	r30, 0x12	; 18
 9ee:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__epilogue_restores__>

000009f2 <strnlen_P>:
 9f2:	fc 01       	movw	r30, r24
 9f4:	05 90       	lpm	r0, Z+
 9f6:	61 50       	subi	r22, 0x01	; 1
 9f8:	70 40       	sbci	r23, 0x00	; 0
 9fa:	01 10       	cpse	r0, r1
 9fc:	d8 f7       	brcc	.-10     	; 0x9f4 <strnlen_P+0x2>
 9fe:	80 95       	com	r24
 a00:	90 95       	com	r25
 a02:	8e 0f       	add	r24, r30
 a04:	9f 1f       	adc	r25, r31
 a06:	08 95       	ret

00000a08 <strnlen>:
 a08:	fc 01       	movw	r30, r24
 a0a:	61 50       	subi	r22, 0x01	; 1
 a0c:	70 40       	sbci	r23, 0x00	; 0
 a0e:	01 90       	ld	r0, Z+
 a10:	01 10       	cpse	r0, r1
 a12:	d8 f7       	brcc	.-10     	; 0xa0a <strnlen+0x2>
 a14:	80 95       	com	r24
 a16:	90 95       	com	r25
 a18:	8e 0f       	add	r24, r30
 a1a:	9f 1f       	adc	r25, r31
 a1c:	08 95       	ret

00000a1e <fputc>:
 a1e:	0f 93       	push	r16
 a20:	1f 93       	push	r17
 a22:	cf 93       	push	r28
 a24:	df 93       	push	r29
 a26:	8c 01       	movw	r16, r24
 a28:	eb 01       	movw	r28, r22
 a2a:	8b 81       	ldd	r24, Y+3	; 0x03
 a2c:	81 ff       	sbrs	r24, 1
 a2e:	1b c0       	rjmp	.+54     	; 0xa66 <fputc+0x48>
 a30:	82 ff       	sbrs	r24, 2
 a32:	0d c0       	rjmp	.+26     	; 0xa4e <fputc+0x30>
 a34:	2e 81       	ldd	r18, Y+6	; 0x06
 a36:	3f 81       	ldd	r19, Y+7	; 0x07
 a38:	8c 81       	ldd	r24, Y+4	; 0x04
 a3a:	9d 81       	ldd	r25, Y+5	; 0x05
 a3c:	28 17       	cp	r18, r24
 a3e:	39 07       	cpc	r19, r25
 a40:	64 f4       	brge	.+24     	; 0xa5a <fputc+0x3c>
 a42:	e8 81       	ld	r30, Y
 a44:	f9 81       	ldd	r31, Y+1	; 0x01
 a46:	01 93       	st	Z+, r16
 a48:	f9 83       	std	Y+1, r31	; 0x01
 a4a:	e8 83       	st	Y, r30
 a4c:	06 c0       	rjmp	.+12     	; 0xa5a <fputc+0x3c>
 a4e:	e8 85       	ldd	r30, Y+8	; 0x08
 a50:	f9 85       	ldd	r31, Y+9	; 0x09
 a52:	80 2f       	mov	r24, r16
 a54:	09 95       	icall
 a56:	89 2b       	or	r24, r25
 a58:	31 f4       	brne	.+12     	; 0xa66 <fputc+0x48>
 a5a:	8e 81       	ldd	r24, Y+6	; 0x06
 a5c:	9f 81       	ldd	r25, Y+7	; 0x07
 a5e:	01 96       	adiw	r24, 0x01	; 1
 a60:	9f 83       	std	Y+7, r25	; 0x07
 a62:	8e 83       	std	Y+6, r24	; 0x06
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <fputc+0x4c>
 a66:	0f ef       	ldi	r16, 0xFF	; 255
 a68:	1f ef       	ldi	r17, 0xFF	; 255
 a6a:	c8 01       	movw	r24, r16
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	1f 91       	pop	r17
 a72:	0f 91       	pop	r16
 a74:	08 95       	ret

00000a76 <__ultoa_invert>:
 a76:	fa 01       	movw	r30, r20
 a78:	aa 27       	eor	r26, r26
 a7a:	28 30       	cpi	r18, 0x08	; 8
 a7c:	51 f1       	breq	.+84     	; 0xad2 <__ultoa_invert+0x5c>
 a7e:	20 31       	cpi	r18, 0x10	; 16
 a80:	81 f1       	breq	.+96     	; 0xae2 <__ultoa_invert+0x6c>
 a82:	e8 94       	clt
 a84:	6f 93       	push	r22
 a86:	6e 7f       	andi	r22, 0xFE	; 254
 a88:	6e 5f       	subi	r22, 0xFE	; 254
 a8a:	7f 4f       	sbci	r23, 0xFF	; 255
 a8c:	8f 4f       	sbci	r24, 0xFF	; 255
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	af 4f       	sbci	r26, 0xFF	; 255
 a92:	b1 e0       	ldi	r27, 0x01	; 1
 a94:	3e d0       	rcall	.+124    	; 0xb12 <__ultoa_invert+0x9c>
 a96:	b4 e0       	ldi	r27, 0x04	; 4
 a98:	3c d0       	rcall	.+120    	; 0xb12 <__ultoa_invert+0x9c>
 a9a:	67 0f       	add	r22, r23
 a9c:	78 1f       	adc	r23, r24
 a9e:	89 1f       	adc	r24, r25
 aa0:	9a 1f       	adc	r25, r26
 aa2:	a1 1d       	adc	r26, r1
 aa4:	68 0f       	add	r22, r24
 aa6:	79 1f       	adc	r23, r25
 aa8:	8a 1f       	adc	r24, r26
 aaa:	91 1d       	adc	r25, r1
 aac:	a1 1d       	adc	r26, r1
 aae:	6a 0f       	add	r22, r26
 ab0:	71 1d       	adc	r23, r1
 ab2:	81 1d       	adc	r24, r1
 ab4:	91 1d       	adc	r25, r1
 ab6:	a1 1d       	adc	r26, r1
 ab8:	20 d0       	rcall	.+64     	; 0xafa <__ultoa_invert+0x84>
 aba:	09 f4       	brne	.+2      	; 0xabe <__ultoa_invert+0x48>
 abc:	68 94       	set
 abe:	3f 91       	pop	r19
 ac0:	2a e0       	ldi	r18, 0x0A	; 10
 ac2:	26 9f       	mul	r18, r22
 ac4:	11 24       	eor	r1, r1
 ac6:	30 19       	sub	r19, r0
 ac8:	30 5d       	subi	r19, 0xD0	; 208
 aca:	31 93       	st	Z+, r19
 acc:	de f6       	brtc	.-74     	; 0xa84 <__ultoa_invert+0xe>
 ace:	cf 01       	movw	r24, r30
 ad0:	08 95       	ret
 ad2:	46 2f       	mov	r20, r22
 ad4:	47 70       	andi	r20, 0x07	; 7
 ad6:	40 5d       	subi	r20, 0xD0	; 208
 ad8:	41 93       	st	Z+, r20
 ada:	b3 e0       	ldi	r27, 0x03	; 3
 adc:	0f d0       	rcall	.+30     	; 0xafc <__ultoa_invert+0x86>
 ade:	c9 f7       	brne	.-14     	; 0xad2 <__ultoa_invert+0x5c>
 ae0:	f6 cf       	rjmp	.-20     	; 0xace <__ultoa_invert+0x58>
 ae2:	46 2f       	mov	r20, r22
 ae4:	4f 70       	andi	r20, 0x0F	; 15
 ae6:	40 5d       	subi	r20, 0xD0	; 208
 ae8:	4a 33       	cpi	r20, 0x3A	; 58
 aea:	18 f0       	brcs	.+6      	; 0xaf2 <__ultoa_invert+0x7c>
 aec:	49 5d       	subi	r20, 0xD9	; 217
 aee:	31 fd       	sbrc	r19, 1
 af0:	40 52       	subi	r20, 0x20	; 32
 af2:	41 93       	st	Z+, r20
 af4:	02 d0       	rcall	.+4      	; 0xafa <__ultoa_invert+0x84>
 af6:	a9 f7       	brne	.-22     	; 0xae2 <__ultoa_invert+0x6c>
 af8:	ea cf       	rjmp	.-44     	; 0xace <__ultoa_invert+0x58>
 afa:	b4 e0       	ldi	r27, 0x04	; 4
 afc:	a6 95       	lsr	r26
 afe:	97 95       	ror	r25
 b00:	87 95       	ror	r24
 b02:	77 95       	ror	r23
 b04:	67 95       	ror	r22
 b06:	ba 95       	dec	r27
 b08:	c9 f7       	brne	.-14     	; 0xafc <__ultoa_invert+0x86>
 b0a:	00 97       	sbiw	r24, 0x00	; 0
 b0c:	61 05       	cpc	r22, r1
 b0e:	71 05       	cpc	r23, r1
 b10:	08 95       	ret
 b12:	9b 01       	movw	r18, r22
 b14:	ac 01       	movw	r20, r24
 b16:	0a 2e       	mov	r0, r26
 b18:	06 94       	lsr	r0
 b1a:	57 95       	ror	r21
 b1c:	47 95       	ror	r20
 b1e:	37 95       	ror	r19
 b20:	27 95       	ror	r18
 b22:	ba 95       	dec	r27
 b24:	c9 f7       	brne	.-14     	; 0xb18 <__ultoa_invert+0xa2>
 b26:	62 0f       	add	r22, r18
 b28:	73 1f       	adc	r23, r19
 b2a:	84 1f       	adc	r24, r20
 b2c:	95 1f       	adc	r25, r21
 b2e:	a0 1d       	adc	r26, r0
 b30:	08 95       	ret

00000b32 <__prologue_saves__>:
 b32:	2f 92       	push	r2
 b34:	3f 92       	push	r3
 b36:	4f 92       	push	r4
 b38:	5f 92       	push	r5
 b3a:	6f 92       	push	r6
 b3c:	7f 92       	push	r7
 b3e:	8f 92       	push	r8
 b40:	9f 92       	push	r9
 b42:	af 92       	push	r10
 b44:	bf 92       	push	r11
 b46:	cf 92       	push	r12
 b48:	df 92       	push	r13
 b4a:	ef 92       	push	r14
 b4c:	ff 92       	push	r15
 b4e:	0f 93       	push	r16
 b50:	1f 93       	push	r17
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
 b56:	cd b7       	in	r28, 0x3d	; 61
 b58:	de b7       	in	r29, 0x3e	; 62
 b5a:	ca 1b       	sub	r28, r26
 b5c:	db 0b       	sbc	r29, r27
 b5e:	0f b6       	in	r0, 0x3f	; 63
 b60:	f8 94       	cli
 b62:	de bf       	out	0x3e, r29	; 62
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	cd bf       	out	0x3d, r28	; 61
 b68:	09 94       	ijmp

00000b6a <__epilogue_restores__>:
 b6a:	2a 88       	ldd	r2, Y+18	; 0x12
 b6c:	39 88       	ldd	r3, Y+17	; 0x11
 b6e:	48 88       	ldd	r4, Y+16	; 0x10
 b70:	5f 84       	ldd	r5, Y+15	; 0x0f
 b72:	6e 84       	ldd	r6, Y+14	; 0x0e
 b74:	7d 84       	ldd	r7, Y+13	; 0x0d
 b76:	8c 84       	ldd	r8, Y+12	; 0x0c
 b78:	9b 84       	ldd	r9, Y+11	; 0x0b
 b7a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b7c:	b9 84       	ldd	r11, Y+9	; 0x09
 b7e:	c8 84       	ldd	r12, Y+8	; 0x08
 b80:	df 80       	ldd	r13, Y+7	; 0x07
 b82:	ee 80       	ldd	r14, Y+6	; 0x06
 b84:	fd 80       	ldd	r15, Y+5	; 0x05
 b86:	0c 81       	ldd	r16, Y+4	; 0x04
 b88:	1b 81       	ldd	r17, Y+3	; 0x03
 b8a:	aa 81       	ldd	r26, Y+2	; 0x02
 b8c:	b9 81       	ldd	r27, Y+1	; 0x01
 b8e:	ce 0f       	add	r28, r30
 b90:	d1 1d       	adc	r29, r1
 b92:	0f b6       	in	r0, 0x3f	; 63
 b94:	f8 94       	cli
 b96:	de bf       	out	0x3e, r29	; 62
 b98:	0f be       	out	0x3f, r0	; 63
 b9a:	cd bf       	out	0x3d, r28	; 61
 b9c:	ed 01       	movw	r28, r26
 b9e:	08 95       	ret

00000ba0 <_exit>:
 ba0:	f8 94       	cli

00000ba2 <__stop_program>:
 ba2:	ff cf       	rjmp	.-2      	; 0xba2 <__stop_program>

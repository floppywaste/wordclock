
wordclock_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000aac  00000b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  00000b5c  2**0
                  ALLOC
  3 .stab         00002958  00000000  00000000  00000b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ec  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <main>
  9e:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initClock>:
#include <avr/io.h>
#include <util/delay.h>
#include "macro.h"

void initClock() {
	DS1302_CLK_DIR_OUT;
  a6:	e4 e2       	ldi	r30, 0x24	; 36
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	DS1302_RST_DIR_OUT;
  b0:	80 81       	ld	r24, Z
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	80 83       	st	Z, r24
}
  b6:	08 95       	ret

000000b8 <_write_out>:

void _write_out(uint8_t value) {
  b8:	68 2f       	mov	r22, r24
	SET(DDRB, DDB2);
  ba:	e4 e2       	ldi	r30, 0x24	; 36
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	80 83       	st	Z, r24
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < 8; i++) {
		DS1302_CLK_0
  c8:	e5 e2       	ldi	r30, 0x25	; 37
  ca:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  cc:	4a ef       	ldi	r20, 0xFA	; 250
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	80 83       	st	Z, r24
  d6:	ca 01       	movw	r24, r20
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <_write_out+0x20>
		_delay_ms(1);
		if (value & 0x01) {
  dc:	60 ff       	sbrs	r22, 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <_write_out+0x30>
			DS1302_IO_1
  e0:	80 81       	ld	r24, Z
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 83       	st	Z, r24
  e6:	03 c0       	rjmp	.+6      	; 0xee <_write_out+0x36>
		} else {
			DS1302_IO_0
  e8:	80 81       	ld	r24, Z
  ea:	8b 7f       	andi	r24, 0xFB	; 251
  ec:	80 83       	st	Z, r24
  ee:	ca 01       	movw	r24, r20
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <_write_out+0x38>
		}
		_delay_ms(1);
		DS1302_CLK_1
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
  fa:	ca 01       	movw	r24, r20
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <_write_out+0x44>
	DS1302_RST_DIR_OUT;
}

void _write_out(uint8_t value) {
	SET(DDRB, DDB2);
	for (int i = 0; i < 8; i++) {
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	28 30       	cpi	r18, 0x08	; 8
 106:	31 05       	cpc	r19, r1
 108:	11 f0       	breq	.+4      	; 0x10e <_write_out+0x56>
			DS1302_IO_0
		}
		_delay_ms(1);
		DS1302_CLK_1
		_delay_ms(1);
		value >>= 1;
 10a:	66 95       	lsr	r22
 10c:	e1 cf       	rjmp	.-62     	; 0xd0 <_write_out+0x18>
 10e:	08 95       	ret

00000110 <_read_in>:

void _register_dec_to_bcd(uint8_t reg, uint8_t value) {
	_register_dec_to_bcd_(reg, value, 7);
}

uint8_t _read_in() {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
	uint8_t input_value = 0;
	DS1302_IO_DIR_IN
 114:	e4 e2       	ldi	r30, 0x24	; 36
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	80 83       	st	Z, r24
	DS1302_CLK_0
 11e:	e5 e2       	ldi	r30, 0x25	; 37
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	80 83       	st	Z, r24
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < 8; ++i) {
		if (DS1302_IO_IN_1)
 12e:	a3 e2       	ldi	r26, 0x23	; 35
 130:	b0 e0       	ldi	r27, 0x00	; 0
			input_value |= (1 << i);
 132:	c1 e0       	ldi	r28, 0x01	; 1
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	6a ef       	ldi	r22, 0xFA	; 250
 138:	70 e0       	ldi	r23, 0x00	; 0
uint8_t _read_in() {
	uint8_t input_value = 0;
	DS1302_IO_DIR_IN
	DS1302_CLK_0
	for (int i = 0; i < 8; ++i) {
		if (DS1302_IO_IN_1)
 13a:	8c 91       	ld	r24, X
 13c:	82 ff       	sbrs	r24, 2
 13e:	08 c0       	rjmp	.+16     	; 0x150 <_read_in+0x40>
			input_value |= (1 << i);
 140:	ce 01       	movw	r24, r28
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <_read_in+0x3a>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <_read_in+0x36>
 14e:	48 2b       	or	r20, r24
		DS1302_CLK_1
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24
 156:	cb 01       	movw	r24, r22
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <_read_in+0x48>
		_delay_ms(1);
		DS1302_CLK_0
 15c:	80 81       	ld	r24, Z
 15e:	8d 7f       	andi	r24, 0xFD	; 253
 160:	80 83       	st	Z, r24

uint8_t _read_in() {
	uint8_t input_value = 0;
	DS1302_IO_DIR_IN
	DS1302_CLK_0
	for (int i = 0; i < 8; ++i) {
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	28 30       	cpi	r18, 0x08	; 8
 168:	31 05       	cpc	r19, r1
 16a:	39 f7       	brne	.-50     	; 0x13a <_read_in+0x2a>
		_delay_ms(1);
		DS1302_CLK_0
	}

	return input_value;
}
 16c:	84 2f       	mov	r24, r20
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <read_register>:

uint8_t read_register(uint8_t reg) {
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
	uint8_t cmd_byte = 129; /* 1000 0001 */
	uint8_t reg_value;
	cmd_byte |= (reg << 1);

	DS1302_CLK_0
 178:	05 e2       	ldi	r16, 0x25	; 37
 17a:	10 e0       	ldi	r17, 0x00	; 0
 17c:	f8 01       	movw	r30, r16
 17e:	90 81       	ld	r25, Z
 180:	9d 7f       	andi	r25, 0xFD	; 253
 182:	90 83       	st	Z, r25
	DS1302_RST_1
 184:	90 81       	ld	r25, Z
 186:	91 60       	ori	r25, 0x01	; 1
 188:	90 83       	st	Z, r25
	_write_out(cmd_byte);
 18a:	88 0f       	add	r24, r24
 18c:	81 68       	ori	r24, 0x81	; 129
 18e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_write_out>
	reg_value = _read_in();
 192:	0e 94 88 00 	call	0x110	; 0x110 <_read_in>

	DS1302_RST_0
 196:	f8 01       	movw	r30, r16
 198:	90 81       	ld	r25, Z
 19a:	9e 7f       	andi	r25, 0xFE	; 254
 19c:	90 83       	st	Z, r25

	return reg_value;
}
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <_register_bcd_to_dec_>:
		_delay_ms(1);
		value >>= 1;
	}
}

uint8_t _register_bcd_to_dec_(uint8_t reg, uint8_t high_bit) {
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	06 2f       	mov	r16, r22
	uint8_t val = read_register(reg);
 1aa:	0e 94 ba 00 	call	0x174	; 0x174 <read_register>
	uint8_t mask = (1 << (high_bit + 1)) - 1;
	val &= mask;
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	0f 5f       	subi	r16, 0xFF	; 255
 1b2:	1f 4f       	sbci	r17, 0xFF	; 255
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <_register_bcd_to_dec_+0x1a>
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	0a 95       	dec	r16
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <_register_bcd_to_dec_+0x16>
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	28 23       	and	r18, r24
	val = (val & 15) + 10 * ((val & (15 << 4)) >> 4);
 1c6:	42 2f       	mov	r20, r18
 1c8:	4f 70       	andi	r20, 0x0F	; 15
 1ca:	22 95       	swap	r18
 1cc:	2f 70       	andi	r18, 0x0F	; 15
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	c9 01       	movw	r24, r18
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	82 0f       	add	r24, r18
	return val;
}
 1e4:	84 0f       	add	r24, r20
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <_register_bcd_to_dec>:

uint8_t _register_bcd_to_dec(uint8_t reg) {
	return _register_bcd_to_dec_(reg, 7);
 1ec:	67 e0       	ldi	r22, 0x07	; 7
 1ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_register_bcd_to_dec_>
}
 1f2:	08 95       	ret

000001f4 <write_register>:
	DS1302_RST_0

	return reg_value;
}

void write_register(uint8_t reg, uint8_t value) {
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	f6 2e       	mov	r15, r22
	uint8_t cmd_byte = (128 | (reg << 1));

	DS1302_CLK_0
 1fc:	05 e2       	ldi	r16, 0x25	; 37
 1fe:	10 e0       	ldi	r17, 0x00	; 0
 200:	f8 01       	movw	r30, r16
 202:	90 81       	ld	r25, Z
 204:	9d 7f       	andi	r25, 0xFD	; 253
 206:	90 83       	st	Z, r25
	DS1302_RST_1
 208:	90 81       	ld	r25, Z
 20a:	91 60       	ori	r25, 0x01	; 1
 20c:	90 83       	st	Z, r25

	_write_out(cmd_byte);
 20e:	88 0f       	add	r24, r24
 210:	80 68       	ori	r24, 0x80	; 128
 212:	0e 94 5c 00 	call	0xb8	; 0xb8 <_write_out>
	_write_out(value);
 216:	8f 2d       	mov	r24, r15
 218:	0e 94 5c 00 	call	0xb8	; 0xb8 <_write_out>

	DS1302_RST_0
 21c:	f8 01       	movw	r30, r16
 21e:	80 81       	ld	r24, Z
 220:	8e 7f       	andi	r24, 0xFE	; 254
 222:	80 83       	st	Z, r24
}
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	08 95       	ret

0000022c <_register_dec_to_bcd_>:

uint8_t _register_bcd_to_dec(uint8_t reg) {
	return _register_bcd_to_dec_(reg, 7);
}

void _register_dec_to_bcd_(uint8_t reg, uint8_t value, uint8_t high_bit) {
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	e8 2e       	mov	r14, r24
 236:	f6 2e       	mov	r15, r22
 238:	04 2f       	mov	r16, r20
	uint8_t regv = read_register(reg);
 23a:	0e 94 ba 00 	call	0x174	; 0x174 <read_register>
 23e:	e8 2f       	mov	r30, r24
	uint8_t mask = (1 << (high_bit + 1)) - 1;
 240:	10 e0       	ldi	r17, 0x00	; 0
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	1f 4f       	sbci	r17, 0xFF	; 255
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <_register_dec_to_bcd_+0x24>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	0a 95       	dec	r16
 252:	e2 f7       	brpl	.-8      	; 0x24c <_register_dec_to_bcd_+0x20>
 254:	21 50       	subi	r18, 0x01	; 1

	/* convert value to bcd in place */
	uint8_t tvalue = value / 10;
	value = value % 10;
	value |= (tvalue << 4);
 256:	8f 2d       	mov	r24, r15
 258:	6a e0       	ldi	r22, 0x0A	; 10
 25a:	0e 94 21 05 	call	0xa42	; 0xa42 <__udivmodqi4>
 25e:	48 2f       	mov	r20, r24
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	42 95       	swap	r20
 264:	52 95       	swap	r21
 266:	50 7f       	andi	r21, 0xF0	; 240
 268:	54 27       	eor	r21, r20
 26a:	40 7f       	andi	r20, 0xF0	; 240
 26c:	54 27       	eor	r21, r20
 26e:	8f 2d       	mov	r24, r15
 270:	0e 94 21 05 	call	0xa42	; 0xa42 <__udivmodqi4>
 274:	94 2b       	or	r25, r20

	/* replace high bits of value if needed */
	value &= mask;
 276:	92 23       	and	r25, r18
	value |= (regv &= ~mask);
 278:	20 95       	com	r18
 27a:	2e 23       	and	r18, r30

	write_register(reg, value);
 27c:	29 2b       	or	r18, r25
 27e:	8e 2d       	mov	r24, r14
 280:	62 2f       	mov	r22, r18
 282:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <write_register>
}
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	08 95       	ret

00000290 <_register_dec_to_bcd>:

void _register_dec_to_bcd(uint8_t reg, uint8_t value) {
	_register_dec_to_bcd_(reg, value, 7);
 290:	47 e0       	ldi	r20, 0x07	; 7
 292:	0e 94 16 01 	call	0x22c	; 0x22c <_register_dec_to_bcd_>
}
 296:	08 95       	ret

00000298 <halt>:
	_write_out(value);

	DS1302_RST_0
}

void halt(bool enable) {
 298:	1f 93       	push	r17
 29a:	18 2f       	mov	r17, r24
	uint8_t sec = read_register(SEC_REG);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 ba 00 	call	0x174	; 0x174 <read_register>
	sec &= ~(1 << 7);
	sec |= (enable << 7);
 2a2:	17 95       	ror	r17
 2a4:	11 27       	eor	r17, r17
 2a6:	17 95       	ror	r17
 2a8:	8f 77       	andi	r24, 0x7F	; 127
 2aa:	18 2b       	or	r17, r24
	write_register(SEC_REG, sec);
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	61 2f       	mov	r22, r17
 2b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <write_register>
}
 2b4:	1f 91       	pop	r17
 2b6:	08 95       	ret

000002b8 <getSeconds>:

/*** Get time ***/

uint8_t getSeconds() {
	return _register_bcd_to_dec_(SEC_REG, 6);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	66 e0       	ldi	r22, 0x06	; 6
 2bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_register_bcd_to_dec_>
}
 2c0:	08 95       	ret

000002c2 <getMinutes>:

uint8_t getMinutes() {
	return _register_bcd_to_dec(MIN_REG);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_register_bcd_to_dec>
}
 2c8:	08 95       	ret

000002ca <getHour>:

uint8_t getHour() {
	uint8_t hr = read_register(HR_REG);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 ba 00 	call	0x174	; 0x174 <read_register>
 2d0:	48 2f       	mov	r20, r24
	uint8_t adj;
	if (hr & 128) /* 12-hour mode */
 2d2:	88 23       	and	r24, r24
 2d4:	bc f4       	brge	.+46     	; 0x304 <getHour+0x3a>
		adj = 12 * ((hr & 32) >> 5);
 2d6:	28 2f       	mov	r18, r24
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	20 72       	andi	r18, 0x20	; 32
 2dc:	30 70       	andi	r19, 0x00	; 0
 2de:	35 95       	asr	r19
 2e0:	27 95       	ror	r18
 2e2:	35 95       	asr	r19
 2e4:	27 95       	ror	r18
 2e6:	35 95       	asr	r19
 2e8:	27 95       	ror	r18
 2ea:	35 95       	asr	r19
 2ec:	27 95       	ror	r18
 2ee:	35 95       	asr	r19
 2f0:	27 95       	ror	r18
 2f2:	c9 01       	movw	r24, r18
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	28 2f       	mov	r18, r24
 2fe:	22 0f       	add	r18, r18
 300:	22 0f       	add	r18, r18
 302:	15 c0       	rjmp	.+42     	; 0x32e <getHour+0x64>
	else
		/* 24-hour mode */
		adj = 10 * ((hr & (32 + 16)) >> 4);
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	80 73       	andi	r24, 0x30	; 48
 308:	90 70       	andi	r25, 0x00	; 0
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	95 95       	asr	r25
 310:	87 95       	ror	r24
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	9c 01       	movw	r18, r24
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	28 0f       	add	r18, r24
	hr = (hr & 15) + adj;
 32e:	84 2f       	mov	r24, r20
 330:	8f 70       	andi	r24, 0x0F	; 15
	return hr;
}
 332:	82 0f       	add	r24, r18
 334:	08 95       	ret

00000336 <getDate>:

uint8_t getDate() {
	return _register_bcd_to_dec_(DATE_REG, 5);
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	65 e0       	ldi	r22, 0x05	; 5
 33a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_register_bcd_to_dec_>
}
 33e:	08 95       	ret

00000340 <getMonth>:

uint8_t getMonth() {
	return _register_bcd_to_dec_(MON_REG, 4);
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	64 e0       	ldi	r22, 0x04	; 4
 344:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_register_bcd_to_dec_>
}
 348:	08 95       	ret

0000034a <getDay>:

uint8_t getDay() {
	return _register_bcd_to_dec_(DAY_REG, 2);
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_register_bcd_to_dec_>
}
 352:	08 95       	ret

00000354 <getYear>:

uint16_t getYear() {
	return 2000 + _register_bcd_to_dec(YR_REG);
 354:	86 e0       	ldi	r24, 0x06	; 6
 356:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_register_bcd_to_dec>
 35a:	28 2f       	mov	r18, r24
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	20 53       	subi	r18, 0x30	; 48
 360:	38 4f       	sbci	r19, 0xF8	; 248
}
 362:	82 2f       	mov	r24, r18
 364:	93 2f       	mov	r25, r19
 366:	08 95       	ret

00000368 <seconds>:

/*** Set time ***/

void seconds(uint8_t sec) {
 368:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(SEC_REG, sec, 6);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	46 e0       	ldi	r20, 0x06	; 6
 36e:	0e 94 16 01 	call	0x22c	; 0x22c <_register_dec_to_bcd_>
}
 372:	08 95       	ret

00000374 <minutes>:

void minutes(uint8_t min) {
 374:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(MIN_REG, min, 6);
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	46 e0       	ldi	r20, 0x06	; 6
 37a:	0e 94 16 01 	call	0x22c	; 0x22c <_register_dec_to_bcd_>
}
 37e:	08 95       	ret

00000380 <hour>:

void hour(uint8_t hr) {
 380:	1f 93       	push	r17
 382:	18 2f       	mov	r17, r24
	write_register(HR_REG, 0); /* set 24-hour mode */
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <write_register>
	_register_dec_to_bcd_(HR_REG, hr, 5);
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	61 2f       	mov	r22, r17
 390:	45 e0       	ldi	r20, 0x05	; 5
 392:	0e 94 16 01 	call	0x22c	; 0x22c <_register_dec_to_bcd_>
}
 396:	1f 91       	pop	r17
 398:	08 95       	ret

0000039a <date>:

void date(uint8_t date) {
 39a:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(DATE_REG, date, 5);
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	45 e0       	ldi	r20, 0x05	; 5
 3a0:	0e 94 16 01 	call	0x22c	; 0x22c <_register_dec_to_bcd_>
}
 3a4:	08 95       	ret

000003a6 <month>:

void month(uint8_t mon) {
 3a6:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(MON_REG, mon, 4);
 3a8:	84 e0       	ldi	r24, 0x04	; 4
 3aa:	44 e0       	ldi	r20, 0x04	; 4
 3ac:	0e 94 16 01 	call	0x22c	; 0x22c <_register_dec_to_bcd_>
}
 3b0:	08 95       	ret

000003b2 <day>:

void day(uint8_t day) {
 3b2:	68 2f       	mov	r22, r24
	_register_dec_to_bcd_(DAY_REG, day, 2);
 3b4:	85 e0       	ldi	r24, 0x05	; 5
 3b6:	42 e0       	ldi	r20, 0x02	; 2
 3b8:	0e 94 16 01 	call	0x22c	; 0x22c <_register_dec_to_bcd_>
}
 3bc:	08 95       	ret

000003be <year>:

void year(uint16_t yr) {
	yr -= 2000;
	_register_dec_to_bcd(YR_REG, yr);
 3be:	bc 01       	movw	r22, r24
 3c0:	60 5d       	subi	r22, 0xD0	; 208
 3c2:	77 40       	sbci	r23, 0x07	; 7
 3c4:	86 e0       	ldi	r24, 0x06	; 6
 3c6:	0e 94 48 01 	call	0x290	; 0x290 <_register_dec_to_bcd>
}
 3ca:	08 95       	ret

000003cc <addMinutes>:

void addMinutes(uint8_t mins) {
 3cc:	1f 93       	push	r17
 3ce:	18 2f       	mov	r17, r24
	uint8_t newMinutes = getMinutes() + mins;
 3d0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <getMinutes>
 3d4:	81 0f       	add	r24, r17
	if (newMinutes > 59)
 3d6:	8c 33       	cpi	r24, 0x3C	; 60
 3d8:	08 f0       	brcs	.+2      	; 0x3dc <addMinutes+0x10>
		newMinutes -= 60;
 3da:	8c 53       	subi	r24, 0x3C	; 60
	minutes(newMinutes);
 3dc:	0e 94 ba 01 	call	0x374	; 0x374 <minutes>
}
 3e0:	1f 91       	pop	r17
 3e2:	08 95       	ret

000003e4 <addHours>:

void addHours(uint8_t hours) {
 3e4:	1f 93       	push	r17
 3e6:	18 2f       	mov	r17, r24
	uint8_t newHours = getHour() + hours;
 3e8:	0e 94 65 01 	call	0x2ca	; 0x2ca <getHour>
 3ec:	81 0f       	add	r24, r17
	if (newHours > 23)
 3ee:	88 31       	cpi	r24, 0x18	; 24
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <addHours+0x10>
		newHours -= 24;
 3f2:	88 51       	subi	r24, 0x18	; 24
	hour(newHours);
 3f4:	0e 94 c0 01 	call	0x380	; 0x380 <hour>
}
 3f8:	1f 91       	pop	r17
 3fa:	08 95       	ret

000003fc <incHour>:

void incHour() {
	hour((getHour() + 1) % 24);
 3fc:	0e 94 65 01 	call	0x2ca	; 0x2ca <getHour>
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	68 e1       	ldi	r22, 0x18	; 24
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__divmodhi4>
 40c:	0e 94 c0 01 	call	0x380	; 0x380 <hour>
 410:	84 ec       	ldi	r24, 0xC4	; 196
 412:	99 e0       	ldi	r25, 0x09	; 9
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <incHour+0x18>
	_delay_ms(10);
}
 418:	08 95       	ret

0000041a <incMinute>:

void incMinute() {
	minutes((getMinutes() + 1) % 60);
 41a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <getMinutes>
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	6c e3       	ldi	r22, 0x3C	; 60
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__divmodhi4>
 42a:	0e 94 ba 01 	call	0x374	; 0x374 <minutes>
 42e:	84 ec       	ldi	r24, 0xC4	; 196
 430:	99 e0       	ldi	r25, 0x09	; 9
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <incMinute+0x18>
	_delay_ms(10);
}
 436:	08 95       	ret

00000438 <enableButtons>:
#include <avr/interrupt.h>

#include "buttons.h"

void enableButtons() {
	DDRD &= ~(1 << DDD6);
 438:	ea e2       	ldi	r30, 0x2A	; 42
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	8f 7b       	andi	r24, 0xBF	; 191
 440:	80 83       	st	Z, r24
	DDRD &= ~(1 << DDD7);
 442:	80 81       	ld	r24, Z
 444:	8f 77       	andi	r24, 0x7F	; 127
 446:	80 83       	st	Z, r24
	/*
	 * Pull buttons high
	 */
	BUTTON_PORT |= _BV(HOUR_BTN);
 448:	eb e2       	ldi	r30, 0x2B	; 43
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	80 64       	ori	r24, 0x40	; 64
 450:	80 83       	st	Z, r24
	BUTTON_PORT |= _BV(MINUTE_BTN);
 452:	80 81       	ld	r24, Z
 454:	80 68       	ori	r24, 0x80	; 128
 456:	80 83       	st	Z, r24
}
 458:	08 95       	ret

0000045a <enableButtonInterrupts>:
/*
 * enable hour and minute buttons for external interrupt
 */
void enableButtonInterrupts() {

	PCICR |= (1 << PCIE2);
 45a:	e8 e6       	ldi	r30, 0x68	; 104
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	84 60       	ori	r24, 0x04	; 4
 462:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT22);
 464:	ed e6       	ldi	r30, 0x6D	; 109
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	80 64       	ori	r24, 0x40	; 64
 46c:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT23);
 46e:	80 81       	ld	r24, Z
 470:	80 68       	ori	r24, 0x80	; 128
 472:	80 83       	st	Z, r24

	sei();
 474:	78 94       	sei
}
 476:	08 95       	ret

00000478 <delay_ms>:
	}

	return 0;
}

void delay_ms(uint16_t ms) {
 478:	9c 01       	movw	r18, r24
	while (ms) {
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	41 f0       	breq	.+16     	; 0x48e <delay_ms+0x16>
 47e:	4a ef       	ldi	r20, 0xFA	; 250
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	ca 01       	movw	r24, r20
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <delay_ms+0xc>
		_delay_ms(1);
		ms--;
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	30 40       	sbci	r19, 0x00	; 0

	return 0;
}

void delay_ms(uint16_t ms) {
	while (ms) {
 48c:	d1 f7       	brne	.-12     	; 0x482 <delay_ms+0xa>
 48e:	08 95       	ret

00000490 <button_is_pressed>:
}

/*
 * Returns 1 if the specified button was pressed, 0 otherwise.
 */
int button_is_pressed(uint8_t btn) {
 490:	1f 93       	push	r17
	if (bit_is_clear(BUTTON_PIN, btn)) {
 492:	29 b1       	in	r18, 0x09	; 9
 494:	18 2f       	mov	r17, r24
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	08 2e       	mov	r0, r24
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <button_is_pressed+0x10>
 49c:	35 95       	asr	r19
 49e:	27 95       	ror	r18
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <button_is_pressed+0xc>
 4a4:	20 ff       	sbrs	r18, 0
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <button_is_pressed+0x1e>
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	10 c0       	rjmp	.+32     	; 0x4ce <button_is_pressed+0x3e>
		delay_ms(DEBOUNCE_TIME);
 4ae:	89 e1       	ldi	r24, 0x19	; 25
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 3c 02 	call	0x478	; 0x478 <delay_ms>
		if (bit_is_clear(BUTTON_PIN, btn))
 4b6:	89 b1       	in	r24, 0x09	; 9
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <button_is_pressed+0x30>
 4bc:	95 95       	asr	r25
 4be:	87 95       	ror	r24
 4c0:	1a 95       	dec	r17
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <button_is_pressed+0x2c>
 4c4:	80 95       	com	r24
 4c6:	90 95       	com	r25
 4c8:	9c 01       	movw	r18, r24
 4ca:	21 70       	andi	r18, 0x01	; 1
 4cc:	30 70       	andi	r19, 0x00	; 0
			return 1;
	}

	return 0;
}
 4ce:	82 2f       	mov	r24, r18
 4d0:	93 2f       	mov	r25, r19
 4d2:	1f 91       	pop	r17
 4d4:	08 95       	ret

000004d6 <initOutput>:
#include <avr/io.h>
#include "macro.h"
#include "display.h"

void initOutput() {
	SHIFTREG_ENABLE_OUTPUTS;
 4d6:	ea e2       	ldi	r30, 0x2A	; 42
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	88 63       	ori	r24, 0x38	; 56
 4de:	80 83       	st	Z, r24
}
 4e0:	08 95       	ret

000004e2 <setRegisters>:

void setRegisters(char word) {
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < 8; i++) {
		SHIFTREG_CLK_0;
 4e6:	eb e2       	ldi	r30, 0x2B	; 43
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
		char data = word << i;
		if (data & 0x80) {
 4ea:	48 2f       	mov	r20, r24
 4ec:	50 e0       	ldi	r21, 0x00	; 0
	SHIFTREG_ENABLE_OUTPUTS;
}

void setRegisters(char word) {
	for (int i = 0; i < 8; i++) {
		SHIFTREG_CLK_0;
 4ee:	80 81       	ld	r24, Z
 4f0:	8f 7d       	andi	r24, 0xDF	; 223
 4f2:	80 83       	st	Z, r24
		char data = word << i;
		if (data & 0x80) {
 4f4:	ca 01       	movw	r24, r20
 4f6:	02 2e       	mov	r0, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <setRegisters+0x1c>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <setRegisters+0x18>
 502:	88 23       	and	r24, r24
 504:	24 f4       	brge	.+8      	; 0x50e <__stack+0xf>
			SHIFTREG_DATA_1;
 506:	80 81       	ld	r24, Z
 508:	88 60       	ori	r24, 0x08	; 8
 50a:	80 83       	st	Z, r24
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__stack+0x15>
		} else {
			SHIFTREG_DATA_0;
 50e:	80 81       	ld	r24, Z
 510:	87 7f       	andi	r24, 0xF7	; 247
 512:	80 83       	st	Z, r24
		}
		SHIFTREG_CLK_1;
 514:	80 81       	ld	r24, Z
 516:	80 62       	ori	r24, 0x20	; 32
 518:	80 83       	st	Z, r24
void initOutput() {
	SHIFTREG_ENABLE_OUTPUTS;
}

void setRegisters(char word) {
	for (int i = 0; i < 8; i++) {
 51a:	2f 5f       	subi	r18, 0xFF	; 255
 51c:	3f 4f       	sbci	r19, 0xFF	; 255
 51e:	28 30       	cpi	r18, 0x08	; 8
 520:	31 05       	cpc	r19, r1
 522:	29 f7       	brne	.-54     	; 0x4ee <setRegisters+0xc>
		} else {
			SHIFTREG_DATA_0;
		}
		SHIFTREG_CLK_1;
	}
}
 524:	08 95       	ret

00000526 <setR>:

void setR(uint32_t word) {
 526:	ab 01       	movw	r20, r22
 528:	bc 01       	movw	r22, r24
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < 24; i++) {
		SHIFTREG_CLK_0;
 52e:	eb e2       	ldi	r30, 0x2B	; 43
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	8f 7d       	andi	r24, 0xDF	; 223
 536:	80 83       	st	Z, r24
		uint32_t data = word << i;
		if (data & 0x800000) {
 538:	db 01       	movw	r26, r22
 53a:	ca 01       	movw	r24, r20
 53c:	02 2e       	mov	r0, r18
 53e:	04 c0       	rjmp	.+8      	; 0x548 <setR+0x22>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	aa 1f       	adc	r26, r26
 546:	bb 1f       	adc	r27, r27
 548:	0a 94       	dec	r0
 54a:	d2 f7       	brpl	.-12     	; 0x540 <setR+0x1a>
 54c:	a7 ff       	sbrs	r26, 7
 54e:	04 c0       	rjmp	.+8      	; 0x558 <setR+0x32>
			SHIFTREG_DATA_1;
 550:	80 81       	ld	r24, Z
 552:	88 60       	ori	r24, 0x08	; 8
 554:	80 83       	st	Z, r24
 556:	03 c0       	rjmp	.+6      	; 0x55e <setR+0x38>
		} else {
			SHIFTREG_DATA_0;
 558:	80 81       	ld	r24, Z
 55a:	87 7f       	andi	r24, 0xF7	; 247
 55c:	80 83       	st	Z, r24
		}
		SHIFTREG_CLK_1;
 55e:	80 81       	ld	r24, Z
 560:	80 62       	ori	r24, 0x20	; 32
 562:	80 83       	st	Z, r24
		SHIFTREG_CLK_1;
	}
}

void setR(uint32_t word) {
	for (int i = 0; i < 24; i++) {
 564:	2f 5f       	subi	r18, 0xFF	; 255
 566:	3f 4f       	sbci	r19, 0xFF	; 255
 568:	28 31       	cpi	r18, 0x18	; 24
 56a:	31 05       	cpc	r19, r1
 56c:	11 f7       	brne	.-60     	; 0x532 <setR+0xc>
		} else {
			SHIFTREG_DATA_0;
		}
		SHIFTREG_CLK_1;
	}
}
 56e:	08 95       	ret

00000570 <setTime>:

void setTime(char reg1, char reg2, char reg3) {
 570:	ef 92       	push	r14
 572:	ff 92       	push	r15
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	e8 2e       	mov	r14, r24
 57a:	f6 2e       	mov	r15, r22
 57c:	84 2f       	mov	r24, r20
	SHIFTREG_STRB_0;
 57e:	0b e2       	ldi	r16, 0x2B	; 43
 580:	10 e0       	ldi	r17, 0x00	; 0
 582:	f8 01       	movw	r30, r16
 584:	90 81       	ld	r25, Z
 586:	9f 7e       	andi	r25, 0xEF	; 239
 588:	90 83       	st	Z, r25
	setRegisters(reg3);
 58a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <setRegisters>
	setRegisters(reg2);
 58e:	8f 2d       	mov	r24, r15
 590:	0e 94 71 02 	call	0x4e2	; 0x4e2 <setRegisters>
	setRegisters(reg1);
 594:	8e 2d       	mov	r24, r14
 596:	0e 94 71 02 	call	0x4e2	; 0x4e2 <setRegisters>
	SHIFTREG_STRB_1;
 59a:	f8 01       	movw	r30, r16
 59c:	80 81       	ld	r24, Z
 59e:	80 61       	ori	r24, 0x10	; 16
 5a0:	80 83       	st	Z, r24
}
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	ff 90       	pop	r15
 5a8:	ef 90       	pop	r14
 5aa:	08 95       	ret

000005ac <correctHour>:
}

uint8_t correctHour(uint8_t min, uint8_t hour) {
	uint8_t correctedHour = hour;
	bool nextHour = (min >= 25);
	if (nextHour) {
 5ac:	89 31       	cpi	r24, 0x19	; 25
 5ae:	40 f0       	brcs	.+16     	; 0x5c0 <correctHour+0x14>
		correctedHour = (hour + 1) % 24;
 5b0:	86 2f       	mov	r24, r22
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	68 e1       	ldi	r22, 0x18	; 24
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__divmodhi4>
 5be:	68 2f       	mov	r22, r24
	}
	if (correctedHour == 0) {
 5c0:	66 23       	and	r22, r22
 5c2:	19 f0       	breq	.+6      	; 0x5ca <correctHour+0x1e>
		hour = 12;
	} else if (correctedHour > 12) {
 5c4:	6d 30       	cpi	r22, 0x0D	; 13
 5c6:	08 f0       	brcs	.+2      	; 0x5ca <correctHour+0x1e>
		correctedHour -= 12;
 5c8:	6c 50       	subi	r22, 0x0C	; 12
	}

	return correctedHour;
}
 5ca:	86 2f       	mov	r24, r22
 5cc:	08 95       	ret

000005ce <between>:

int between(uint8_t min, uint8_t loBound, uint8_t hiBound) {
	return min >= loBound && min < hiBound;
 5ce:	86 17       	cp	r24, r22
 5d0:	18 f4       	brcc	.+6      	; 0x5d8 <between+0xa>
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <between+0x1a>
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	84 17       	cp	r24, r20
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <between+0x12>
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	89 27       	eor	r24, r25
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
}
 5e8:	82 2f       	mov	r24, r18
 5ea:	93 2f       	mov	r25, r19
 5ec:	08 95       	ret

000005ee <initDebug>:
	setTime(D1_OCLK, 0, 0);
	_delay_ms(CHECK_DELAY);
}

void initDebug() {
	uart_init();
 5ee:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <uart_init>
	stdout= &uart_output;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	90 93 1f 01 	sts	0x011F, r25
 5fa:	80 93 1e 01 	sts	0x011E, r24
	stdin= &uart_input;
 5fe:	8e e0       	ldi	r24, 0x0E	; 14
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	90 93 1d 01 	sts	0x011D, r25
 606:	80 93 1c 01 	sts	0x011C, r24
}
 60a:	08 95       	ret

0000060c <checkAllOutputs>:
//		printf("ccc%d", getMinutes());
		loop();
	}
}

void checkAllOutputs() {
 60c:	0f 93       	push	r16
 60e:	1f 93       	push	r17
	setTime(0, 0, D3_ITIS);
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	40 e4       	ldi	r20, 0x40	; 64
 616:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 61a:	08 ea       	ldi	r16, 0xA8	; 168
 61c:	11 e6       	ldi	r17, 0x61	; 97
 61e:	c8 01       	movw	r24, r16
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <checkAllOutputs+0x14>
	_delay_ms(CHECK_DELAY);
	setTime(0, 0, D3_MFVE);
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	42 e0       	ldi	r20, 0x02	; 2
 62a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 62e:	c8 01       	movw	r24, r16
 630:	01 97       	sbiw	r24, 0x01	; 1
 632:	f1 f7       	brne	.-4      	; 0x630 <checkAllOutputs+0x24>
	_delay_ms(CHECK_DELAY);
	setTime(0, 0, D3_MTEN);
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	41 e0       	ldi	r20, 0x01	; 1
 63a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 63e:	c8 01       	movw	r24, r16
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <checkAllOutputs+0x34>
	_delay_ms(CHECK_DELAY);
	setTime(0, D2_QUAR, 0);
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	68 e0       	ldi	r22, 0x08	; 8
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 64e:	c8 01       	movw	r24, r16
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <checkAllOutputs+0x44>
	_delay_ms(CHECK_DELAY);
	setTime(0, 0, D3_TWTY);
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	40 e2       	ldi	r20, 0x20	; 32
 65a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 65e:	c8 01       	movw	r24, r16
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <checkAllOutputs+0x54>
	_delay_ms(CHECK_DELAY);
	setTime(0, D2_TO, 0);
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	64 e0       	ldi	r22, 0x04	; 4
 668:	40 e0       	ldi	r20, 0x00	; 0
 66a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 66e:	c8 01       	movw	r24, r16
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <checkAllOutputs+0x64>
	_delay_ms(CHECK_DELAY);
	setTime(0, D2_PAST, 0);
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	60 e8       	ldi	r22, 0x80	; 128
 678:	40 e0       	ldi	r20, 0x00	; 0
 67a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 67e:	c8 01       	movw	r24, r16
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	f1 f7       	brne	.-4      	; 0x680 <checkAllOutputs+0x74>
	_delay_ms(CHECK_DELAY);
	setTime(0, 0, D3_HALF);
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	40 e1       	ldi	r20, 0x10	; 16
 68a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 68e:	c8 01       	movw	r24, r16
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	f1 f7       	brne	.-4      	; 0x690 <checkAllOutputs+0x84>
	_delay_ms(CHECK_DELAY);
	setTime(D1_ELVN, 0, 0);
 694:	88 e0       	ldi	r24, 0x08	; 8
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	40 e0       	ldi	r20, 0x00	; 0
 69a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 69e:	c8 01       	movw	r24, r16
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <checkAllOutputs+0x94>
	_delay_ms(CHECK_DELAY);
	setTime(0, D2_TWO, 0);
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	60 e2       	ldi	r22, 0x20	; 32
 6a8:	40 e0       	ldi	r20, 0x00	; 0
 6aa:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 6ae:	c8 01       	movw	r24, r16
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <checkAllOutputs+0xa4>
	_delay_ms(CHECK_DELAY);
	setTime(D1_HTEN, 0, 0);
 6b4:	80 e8       	ldi	r24, 0x80	; 128
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 6be:	c8 01       	movw	r24, r16
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <checkAllOutputs+0xb4>
	_delay_ms(CHECK_DELAY);
	setTime(0, D2_ONE, 0);
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	61 e0       	ldi	r22, 0x01	; 1
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 6ce:	c8 01       	movw	r24, r16
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <checkAllOutputs+0xc4>
	_delay_ms(CHECK_DELAY);
	setTime(0, D2_TWLV, 0);
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	60 e1       	ldi	r22, 0x10	; 16
 6d8:	40 e0       	ldi	r20, 0x00	; 0
 6da:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 6de:	c8 01       	movw	r24, r16
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <checkAllOutputs+0xd4>
	_delay_ms(CHECK_DELAY);
	setTime(0, D2_THRE, 0);
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 6ee:	c8 01       	movw	r24, r16
 6f0:	01 97       	sbiw	r24, 0x01	; 1
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <checkAllOutputs+0xe4>
	_delay_ms(CHECK_DELAY);
	setTime(0, D2_FOUR, 0);
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	60 e4       	ldi	r22, 0x40	; 64
 6f8:	40 e0       	ldi	r20, 0x00	; 0
 6fa:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 6fe:	c8 01       	movw	r24, r16
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <checkAllOutputs+0xf4>
	_delay_ms(CHECK_DELAY);
	setTime(D1_SIX, 0, 0);
 704:	80 e2       	ldi	r24, 0x20	; 32
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 70e:	c8 01       	movw	r24, r16
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <checkAllOutputs+0x104>
	_delay_ms(CHECK_DELAY);
	setTime(D1_EGHT, 0, 0);
 714:	80 e4       	ldi	r24, 0x40	; 64
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	40 e0       	ldi	r20, 0x00	; 0
 71a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 71e:	c8 01       	movw	r24, r16
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <checkAllOutputs+0x114>
	_delay_ms(CHECK_DELAY);
	setTime(D1_SEVN, 0, 0);
 724:	82 e0       	ldi	r24, 0x02	; 2
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	40 e0       	ldi	r20, 0x00	; 0
 72a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 72e:	c8 01       	movw	r24, r16
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <checkAllOutputs+0x124>
	_delay_ms(CHECK_DELAY);
	setTime(D1_NINE, 0, 0);
 734:	84 e0       	ldi	r24, 0x04	; 4
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	40 e0       	ldi	r20, 0x00	; 0
 73a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 73e:	c8 01       	movw	r24, r16
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <checkAllOutputs+0x134>
	_delay_ms(CHECK_DELAY);
	setTime(D1_HFVE, 0, 0);
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	40 e0       	ldi	r20, 0x00	; 0
 74a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 74e:	c8 01       	movw	r24, r16
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <checkAllOutputs+0x144>
	_delay_ms(CHECK_DELAY);
	setTime(D1_OCLK, 0, 0);
 754:	80 e1       	ldi	r24, 0x10	; 16
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
 75e:	c8 01       	movw	r24, r16
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <checkAllOutputs+0x154>
	_delay_ms(CHECK_DELAY);
}
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	08 95       	ret

0000076a <__vector_5>:
void setUp();
void initDebug();
void checkAllOutputs();
void displayCurrentTime();

ISR (PCINT2_vect) {
 76a:	1f 92       	push	r1
 76c:	0f 92       	push	r0
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	0f 92       	push	r0
 772:	11 24       	eor	r1, r1
 774:	2f 93       	push	r18
 776:	3f 93       	push	r19
 778:	4f 93       	push	r20
 77a:	5f 93       	push	r21
 77c:	6f 93       	push	r22
 77e:	7f 93       	push	r23
 780:	8f 93       	push	r24
 782:	9f 93       	push	r25
 784:	af 93       	push	r26
 786:	bf 93       	push	r27
 788:	ef 93       	push	r30
 78a:	ff 93       	push	r31
	cli();
 78c:	f8 94       	cli
	if (button_is_pressed(HOUR_BTN)) {
 78e:	86 e0       	ldi	r24, 0x06	; 6
 790:	0e 94 48 02 	call	0x490	; 0x490 <button_is_pressed>
 794:	89 2b       	or	r24, r25
 796:	39 f0       	breq	.+14     	; 0x7a6 <__vector_5+0x3c>
		incHour();
 798:	0e 94 fe 01 	call	0x3fc	; 0x3fc <incHour>
//		addHours(1);
//		displayCurrentTime();
		delay_ms(LOCK_INPUT_TIME);
 79c:	8a ef       	ldi	r24, 0xFA	; 250
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 3c 02 	call	0x478	; 0x478 <delay_ms>
 7a4:	0b c0       	rjmp	.+22     	; 0x7bc <__vector_5+0x52>
	} else if (button_is_pressed(MINUTE_BTN)) {
 7a6:	87 e0       	ldi	r24, 0x07	; 7
 7a8:	0e 94 48 02 	call	0x490	; 0x490 <button_is_pressed>
 7ac:	89 2b       	or	r24, r25
 7ae:	31 f0       	breq	.+12     	; 0x7bc <__vector_5+0x52>
		incMinute();
 7b0:	0e 94 0d 02 	call	0x41a	; 0x41a <incMinute>
//		addMinutes(1);
//		displayCurrentTime();
		delay_ms(LOCK_INPUT_TIME);
 7b4:	8a ef       	ldi	r24, 0xFA	; 250
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 3c 02 	call	0x478	; 0x478 <delay_ms>
	}
	sei();
 7bc:	78 94       	sei
}
 7be:	ff 91       	pop	r31
 7c0:	ef 91       	pop	r30
 7c2:	bf 91       	pop	r27
 7c4:	af 91       	pop	r26
 7c6:	9f 91       	pop	r25
 7c8:	8f 91       	pop	r24
 7ca:	7f 91       	pop	r23
 7cc:	6f 91       	pop	r22
 7ce:	5f 91       	pop	r21
 7d0:	4f 91       	pop	r20
 7d2:	3f 91       	pop	r19
 7d4:	2f 91       	pop	r18
 7d6:	0f 90       	pop	r0
 7d8:	0f be       	out	0x3f, r0	; 63
 7da:	0f 90       	pop	r0
 7dc:	1f 90       	pop	r1
 7de:	18 95       	reti

000007e0 <setUp>:

	setTime(reg1, reg2, reg3);
}

void setUp() {
	initOutput();
 7e0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <initOutput>
//	initDebug();
	initClock();
 7e4:	0e 94 53 00 	call	0xa6	; 0xa6 <initClock>
	checkAllOutputs();
 7e8:	0e 94 06 03 	call	0x60c	; 0x60c <checkAllOutputs>
	enableButtons();
 7ec:	0e 94 1c 02 	call	0x438	; 0x438 <enableButtons>
//	initTimeInput();
}
 7f0:	08 95       	ret

000007f2 <displayCurrentTime>:

int between(uint8_t min, uint8_t loBound, uint8_t hiBound) {
	return min >= loBound && min < hiBound;
}

void displayCurrentTime() {
 7f2:	ff 92       	push	r15
 7f4:	0f 93       	push	r16
 7f6:	1f 93       	push	r17
	uint8_t reg1 = 0;
	uint8_t reg2 = 0;
	uint8_t reg3 = D3_ITIS;

	uint8_t min = getMinutes();
 7f8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <getMinutes>
 7fc:	f8 2e       	mov	r15, r24
	uint8_t hour = correctHour(min, getHour());
 7fe:	0e 94 65 01 	call	0x2ca	; 0x2ca <getHour>
 802:	68 2f       	mov	r22, r24
 804:	8f 2d       	mov	r24, r15
 806:	0e 94 d6 02 	call	0x5ac	; 0x5ac <correctHour>

	switch (hour) {
 80a:	86 30       	cpi	r24, 0x06	; 6
 80c:	91 f1       	breq	.+100    	; 0x872 <displayCurrentTime+0x80>
 80e:	87 30       	cpi	r24, 0x07	; 7
 810:	70 f4       	brcc	.+28     	; 0x82e <displayCurrentTime+0x3c>
 812:	83 30       	cpi	r24, 0x03	; 3
 814:	29 f1       	breq	.+74     	; 0x860 <displayCurrentTime+0x6e>
 816:	84 30       	cpi	r24, 0x04	; 4
 818:	28 f4       	brcc	.+10     	; 0x824 <displayCurrentTime+0x32>
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	c1 f0       	breq	.+48     	; 0x84e <displayCurrentTime+0x5c>
 81e:	82 30       	cpi	r24, 0x02	; 2
 820:	c9 f4       	brne	.+50     	; 0x854 <displayCurrentTime+0x62>
 822:	1b c0       	rjmp	.+54     	; 0x85a <displayCurrentTime+0x68>
 824:	84 30       	cpi	r24, 0x04	; 4
 826:	f9 f0       	breq	.+62     	; 0x866 <displayCurrentTime+0x74>
 828:	85 30       	cpi	r24, 0x05	; 5
 82a:	a1 f4       	brne	.+40     	; 0x854 <displayCurrentTime+0x62>
 82c:	1f c0       	rjmp	.+62     	; 0x86c <displayCurrentTime+0x7a>
 82e:	89 30       	cpi	r24, 0x09	; 9
 830:	49 f1       	breq	.+82     	; 0x884 <displayCurrentTime+0x92>
 832:	8a 30       	cpi	r24, 0x0A	; 10
 834:	28 f4       	brcc	.+10     	; 0x840 <displayCurrentTime+0x4e>
 836:	87 30       	cpi	r24, 0x07	; 7
 838:	f9 f0       	breq	.+62     	; 0x878 <displayCurrentTime+0x86>
 83a:	88 30       	cpi	r24, 0x08	; 8
 83c:	59 f4       	brne	.+22     	; 0x854 <displayCurrentTime+0x62>
 83e:	1f c0       	rjmp	.+62     	; 0x87e <displayCurrentTime+0x8c>
 840:	8b 30       	cpi	r24, 0x0B	; 11
 842:	31 f1       	breq	.+76     	; 0x890 <displayCurrentTime+0x9e>
 844:	8b 30       	cpi	r24, 0x0B	; 11
 846:	08 f1       	brcs	.+66     	; 0x88a <displayCurrentTime+0x98>
 848:	8c 30       	cpi	r24, 0x0C	; 12
 84a:	21 f4       	brne	.+8      	; 0x854 <displayCurrentTime+0x62>
 84c:	24 c0       	rjmp	.+72     	; 0x896 <displayCurrentTime+0xa4>
 84e:	00 e0       	ldi	r16, 0x00	; 0
 850:	11 e0       	ldi	r17, 0x01	; 1
 852:	23 c0       	rjmp	.+70     	; 0x89a <displayCurrentTime+0xa8>
 854:	00 e0       	ldi	r16, 0x00	; 0
 856:	10 e0       	ldi	r17, 0x00	; 0
 858:	20 c0       	rjmp	.+64     	; 0x89a <displayCurrentTime+0xa8>
 85a:	00 e0       	ldi	r16, 0x00	; 0
 85c:	10 e2       	ldi	r17, 0x20	; 32
 85e:	1d c0       	rjmp	.+58     	; 0x89a <displayCurrentTime+0xa8>
	case 1:
		reg2 |= D2_ONE;
		break;
	case 2:
		reg2 |= D2_TWO;
		break;
 860:	00 e0       	ldi	r16, 0x00	; 0
 862:	12 e0       	ldi	r17, 0x02	; 2
 864:	1a c0       	rjmp	.+52     	; 0x89a <displayCurrentTime+0xa8>
	case 3:
		reg2 |= D2_THRE;
		break;
 866:	00 e0       	ldi	r16, 0x00	; 0
 868:	10 e4       	ldi	r17, 0x40	; 64
 86a:	17 c0       	rjmp	.+46     	; 0x89a <displayCurrentTime+0xa8>
	case 4:
		reg2 |= D2_FOUR;
		break;
 86c:	01 e0       	ldi	r16, 0x01	; 1
 86e:	10 e0       	ldi	r17, 0x00	; 0
 870:	14 c0       	rjmp	.+40     	; 0x89a <displayCurrentTime+0xa8>
	case 5:
		reg1 |= D1_HFVE;
		break;
 872:	00 e2       	ldi	r16, 0x20	; 32
 874:	10 e0       	ldi	r17, 0x00	; 0
 876:	11 c0       	rjmp	.+34     	; 0x89a <displayCurrentTime+0xa8>
	case 6:
		reg1 |= D1_SIX;
		break;
 878:	02 e0       	ldi	r16, 0x02	; 2
 87a:	10 e0       	ldi	r17, 0x00	; 0
 87c:	0e c0       	rjmp	.+28     	; 0x89a <displayCurrentTime+0xa8>
	case 7:
		reg1 |= D1_SEVN;
		break;
 87e:	00 e4       	ldi	r16, 0x40	; 64
 880:	10 e0       	ldi	r17, 0x00	; 0
 882:	0b c0       	rjmp	.+22     	; 0x89a <displayCurrentTime+0xa8>
	case 8:
		reg1 |= D1_EGHT;
		break;
 884:	04 e0       	ldi	r16, 0x04	; 4
 886:	10 e0       	ldi	r17, 0x00	; 0
 888:	08 c0       	rjmp	.+16     	; 0x89a <displayCurrentTime+0xa8>
	case 9:
		reg1 |= D1_NINE;
		break;
 88a:	00 e8       	ldi	r16, 0x80	; 128
 88c:	10 e0       	ldi	r17, 0x00	; 0
 88e:	05 c0       	rjmp	.+10     	; 0x89a <displayCurrentTime+0xa8>
	case 10:
		reg1 |= D1_HTEN;
		break;
 890:	08 e0       	ldi	r16, 0x08	; 8
 892:	10 e0       	ldi	r17, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <displayCurrentTime+0xa8>
	case 11:
		reg1 |= D1_ELVN;
		break;
 896:	00 e0       	ldi	r16, 0x00	; 0
 898:	10 e1       	ldi	r17, 0x10	; 16
	case 12:
		reg2 |= D2_TWLV;
		break;
	}

	if (between(min, 0, 5)) {
 89a:	8f 2d       	mov	r24, r15
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	45 e0       	ldi	r20, 0x05	; 5
 8a0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 8a4:	89 2b       	or	r24, r25
 8a6:	19 f0       	breq	.+6      	; 0x8ae <displayCurrentTime+0xbc>
		reg1 |= D1_OCLK;
 8a8:	00 61       	ori	r16, 0x10	; 16
 8aa:	40 e4       	ldi	r20, 0x40	; 64
 8ac:	6e c0       	rjmp	.+220    	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 5, 10)) {
 8ae:	8f 2d       	mov	r24, r15
 8b0:	65 e0       	ldi	r22, 0x05	; 5
 8b2:	4a e0       	ldi	r20, 0x0A	; 10
 8b4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 8b8:	89 2b       	or	r24, r25
 8ba:	19 f0       	breq	.+6      	; 0x8c2 <displayCurrentTime+0xd0>
		reg3 |= D3_MFVE;
		reg2 |= D2_PAST;
 8bc:	10 68       	ori	r17, 0x80	; 128
 8be:	42 e4       	ldi	r20, 0x42	; 66
 8c0:	64 c0       	rjmp	.+200    	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 10, 15)) {
 8c2:	8f 2d       	mov	r24, r15
 8c4:	6a e0       	ldi	r22, 0x0A	; 10
 8c6:	4f e0       	ldi	r20, 0x0F	; 15
 8c8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 8cc:	89 2b       	or	r24, r25
 8ce:	19 f0       	breq	.+6      	; 0x8d6 <displayCurrentTime+0xe4>
		reg3 |= D3_MTEN;
		reg2 |= D2_PAST;
 8d0:	10 68       	ori	r17, 0x80	; 128
 8d2:	41 e4       	ldi	r20, 0x41	; 65
 8d4:	5a c0       	rjmp	.+180    	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 15, 20)) {
 8d6:	8f 2d       	mov	r24, r15
 8d8:	6f e0       	ldi	r22, 0x0F	; 15
 8da:	44 e1       	ldi	r20, 0x14	; 20
 8dc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 8e0:	89 2b       	or	r24, r25
 8e2:	19 f0       	breq	.+6      	; 0x8ea <displayCurrentTime+0xf8>
		reg2 |= D2_QUAR | D2_PAST;
 8e4:	18 68       	ori	r17, 0x88	; 136
 8e6:	40 e4       	ldi	r20, 0x40	; 64
 8e8:	50 c0       	rjmp	.+160    	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 20, 25)) {
 8ea:	8f 2d       	mov	r24, r15
 8ec:	64 e1       	ldi	r22, 0x14	; 20
 8ee:	49 e1       	ldi	r20, 0x19	; 25
 8f0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 8f4:	89 2b       	or	r24, r25
 8f6:	19 f0       	breq	.+6      	; 0x8fe <displayCurrentTime+0x10c>
		reg3 |= D3_TWTY;
		reg2 |= D2_PAST;
 8f8:	10 68       	ori	r17, 0x80	; 128
 8fa:	40 e6       	ldi	r20, 0x60	; 96
 8fc:	46 c0       	rjmp	.+140    	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 25, 30)) {
 8fe:	8f 2d       	mov	r24, r15
 900:	69 e1       	ldi	r22, 0x19	; 25
 902:	4e e1       	ldi	r20, 0x1E	; 30
 904:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 908:	89 2b       	or	r24, r25
 90a:	19 f0       	breq	.+6      	; 0x912 <displayCurrentTime+0x120>
		reg3 |= D3_MFVE | D3_HALF;
		reg2 |= D2_TO;
 90c:	14 60       	ori	r17, 0x04	; 4
 90e:	42 e5       	ldi	r20, 0x52	; 82
 910:	3c c0       	rjmp	.+120    	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 30, 35)) {
 912:	8f 2d       	mov	r24, r15
 914:	6e e1       	ldi	r22, 0x1E	; 30
 916:	43 e2       	ldi	r20, 0x23	; 35
 918:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 91c:	89 2b       	or	r24, r25
 91e:	11 f0       	breq	.+4      	; 0x924 <displayCurrentTime+0x132>
 920:	40 e5       	ldi	r20, 0x50	; 80
 922:	33 c0       	rjmp	.+102    	; 0x98a <displayCurrentTime+0x198>
		reg3 |= D3_HALF;
	} else if (between(min, 35, 40)) {
 924:	8f 2d       	mov	r24, r15
 926:	63 e2       	ldi	r22, 0x23	; 35
 928:	48 e2       	ldi	r20, 0x28	; 40
 92a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 92e:	89 2b       	or	r24, r25
 930:	19 f0       	breq	.+6      	; 0x938 <displayCurrentTime+0x146>
		reg3 |= D3_MFVE | D3_HALF;
		reg2 |= D2_PAST;
 932:	10 68       	ori	r17, 0x80	; 128
 934:	42 e5       	ldi	r20, 0x52	; 82
 936:	29 c0       	rjmp	.+82     	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 40, 45)) {
 938:	8f 2d       	mov	r24, r15
 93a:	68 e2       	ldi	r22, 0x28	; 40
 93c:	4d e2       	ldi	r20, 0x2D	; 45
 93e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 942:	89 2b       	or	r24, r25
 944:	19 f0       	breq	.+6      	; 0x94c <displayCurrentTime+0x15a>
		reg3 |= D3_TWTY;
		reg2 |= D2_TO;
 946:	14 60       	ori	r17, 0x04	; 4
 948:	40 e6       	ldi	r20, 0x60	; 96
 94a:	1f c0       	rjmp	.+62     	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 45, 50)) {
 94c:	8f 2d       	mov	r24, r15
 94e:	6d e2       	ldi	r22, 0x2D	; 45
 950:	42 e3       	ldi	r20, 0x32	; 50
 952:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 956:	89 2b       	or	r24, r25
 958:	19 f0       	breq	.+6      	; 0x960 <displayCurrentTime+0x16e>
		reg2 |= D2_QUAR | D2_TO;
 95a:	1c 60       	ori	r17, 0x0C	; 12
 95c:	40 e4       	ldi	r20, 0x40	; 64
 95e:	15 c0       	rjmp	.+42     	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 50, 55)) {
 960:	8f 2d       	mov	r24, r15
 962:	62 e3       	ldi	r22, 0x32	; 50
 964:	47 e3       	ldi	r20, 0x37	; 55
 966:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 96a:	89 2b       	or	r24, r25
 96c:	19 f0       	breq	.+6      	; 0x974 <displayCurrentTime+0x182>
		reg3 |= D3_MTEN;
		reg2 |= D2_TO;
 96e:	14 60       	ori	r17, 0x04	; 4
 970:	41 e4       	ldi	r20, 0x41	; 65
 972:	0b c0       	rjmp	.+22     	; 0x98a <displayCurrentTime+0x198>
	} else if (between(min, 55, 60)) {
 974:	8f 2d       	mov	r24, r15
 976:	67 e3       	ldi	r22, 0x37	; 55
 978:	4c e3       	ldi	r20, 0x3C	; 60
 97a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <between>
 97e:	89 2b       	or	r24, r25
 980:	11 f4       	brne	.+4      	; 0x986 <displayCurrentTime+0x194>
 982:	40 e4       	ldi	r20, 0x40	; 64
 984:	02 c0       	rjmp	.+4      	; 0x98a <displayCurrentTime+0x198>
		reg3 |= D3_MFVE;
		reg2 |= D2_TO;
 986:	14 60       	ori	r17, 0x04	; 4
 988:	42 e4       	ldi	r20, 0x42	; 66
	}

	setTime(reg1, reg2, reg3);
 98a:	80 2f       	mov	r24, r16
 98c:	61 2f       	mov	r22, r17
 98e:	0e 94 b8 02 	call	0x570	; 0x570 <setTime>
}
 992:	1f 91       	pop	r17
 994:	0f 91       	pop	r16
 996:	ff 90       	pop	r15
 998:	08 95       	ret

0000099a <loop>:
//	initTimeInput();
}

void loop() {
//		setR(D_EGHT | D_ELVN | D1_NINE);
	displayCurrentTime();
 99a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <displayCurrentTime>
//	incMinute();
//	delay_ms(1000);
	if (button_is_pressed(HOUR_BTN)) {
 99e:	86 e0       	ldi	r24, 0x06	; 6
 9a0:	0e 94 48 02 	call	0x490	; 0x490 <button_is_pressed>
 9a4:	89 2b       	or	r24, r25
 9a6:	39 f0       	breq	.+14     	; 0x9b6 <loop+0x1c>
		incHour();
 9a8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <incHour>
		//		addHours(1);
		//		displayCurrentTime();
		delay_ms(LOCK_INPUT_TIME);
 9ac:	8a ef       	ldi	r24, 0xFA	; 250
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 3c 02 	call	0x478	; 0x478 <delay_ms>
 9b4:	08 95       	ret
	} else if (button_is_pressed(MINUTE_BTN)) {
 9b6:	87 e0       	ldi	r24, 0x07	; 7
 9b8:	0e 94 48 02 	call	0x490	; 0x490 <button_is_pressed>
 9bc:	89 2b       	or	r24, r25
 9be:	31 f0       	breq	.+12     	; 0x9cc <loop+0x32>
		incMinute();
 9c0:	0e 94 0d 02 	call	0x41a	; 0x41a <incMinute>
		//		addMinutes(1);
		//		displayCurrentTime();
		delay_ms(LOCK_INPUT_TIME);
 9c4:	8a ef       	ldi	r24, 0xFA	; 250
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 3c 02 	call	0x478	; 0x478 <delay_ms>
 9cc:	08 95       	ret

000009ce <main>:
	}
}

int main(void) {
	setUp();
 9ce:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <setUp>
	halt(false);
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	0e 94 4c 01 	call	0x298	; 0x298 <halt>
	hour(17);
 9d8:	81 e1       	ldi	r24, 0x11	; 17
 9da:	0e 94 c0 01 	call	0x380	; 0x380 <hour>
	minutes(58);
 9de:	8a e3       	ldi	r24, 0x3A	; 58
 9e0:	0e 94 ba 01 	call	0x374	; 0x374 <minutes>
	seconds(20);
 9e4:	84 e1       	ldi	r24, 0x14	; 20
 9e6:	0e 94 b4 01 	call	0x368	; 0x368 <seconds>
//		delay_ms(100);
//		setTime(D1_OCLK, D2_THRE, D3_ITIS);
//		delay_ms(100);
//		printf("xxx%d", getHour());
//		printf("ccc%d", getMinutes());
		loop();
 9ea:	0e 94 cd 04 	call	0x99a	; 0x99a <loop>
 9ee:	fd cf       	rjmp	.-6      	; 0x9ea <main+0x1c>

000009f0 <uart_init>:
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    UBRR0H = UBRRH_VALUE;
 9f0:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
 9f4:	8c e0       	ldi	r24, 0x0C	; 12
 9f6:	80 93 c4 00 	sts	0x00C4, r24
    
#if USE_2X
    UCSR0A |= _BV(U2X0);
 9fa:	e0 ec       	ldi	r30, 0xC0	; 192
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	82 60       	ori	r24, 0x02	; 2
 a02:	80 83       	st	Z, r24
#else
    UCSR0A &= ~(_BV(U2X0));
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
 a04:	86 e0       	ldi	r24, 0x06	; 6
 a06:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
 a0a:	88 e1       	ldi	r24, 0x18	; 24
 a0c:	80 93 c1 00 	sts	0x00C1, r24
}
 a10:	08 95       	ret

00000a12 <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
 a12:	1f 93       	push	r17
 a14:	18 2f       	mov	r17, r24
    if (c == '\n') {
 a16:	8a 30       	cpi	r24, 0x0A	; 10
 a18:	19 f4       	brne	.+6      	; 0xa20 <uart_putchar+0xe>
        uart_putchar('\r', stream);
 a1a:	8d e0       	ldi	r24, 0x0D	; 13
 a1c:	0e 94 09 05 	call	0xa12	; 0xa12 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
 a20:	e0 ec       	ldi	r30, 0xC0	; 192
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	85 ff       	sbrs	r24, 5
 a28:	fd cf       	rjmp	.-6      	; 0xa24 <uart_putchar+0x12>
    UDR0 = c;
 a2a:	10 93 c6 00 	sts	0x00C6, r17
}
 a2e:	1f 91       	pop	r17
 a30:	08 95       	ret

00000a32 <uart_getchar>:

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
 a32:	e0 ec       	ldi	r30, 0xC0	; 192
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	80 81       	ld	r24, Z
 a38:	88 23       	and	r24, r24
 a3a:	ec f7       	brge	.-6      	; 0xa36 <uart_getchar+0x4>
    return UDR0;
 a3c:	80 91 c6 00 	lds	r24, 0x00C6
}
 a40:	08 95       	ret

00000a42 <__udivmodqi4>:
 a42:	99 1b       	sub	r25, r25
 a44:	79 e0       	ldi	r23, 0x09	; 9
 a46:	04 c0       	rjmp	.+8      	; 0xa50 <__udivmodqi4_ep>

00000a48 <__udivmodqi4_loop>:
 a48:	99 1f       	adc	r25, r25
 a4a:	96 17       	cp	r25, r22
 a4c:	08 f0       	brcs	.+2      	; 0xa50 <__udivmodqi4_ep>
 a4e:	96 1b       	sub	r25, r22

00000a50 <__udivmodqi4_ep>:
 a50:	88 1f       	adc	r24, r24
 a52:	7a 95       	dec	r23
 a54:	c9 f7       	brne	.-14     	; 0xa48 <__udivmodqi4_loop>
 a56:	80 95       	com	r24
 a58:	08 95       	ret

00000a5a <__divmodhi4>:
 a5a:	97 fb       	bst	r25, 7
 a5c:	09 2e       	mov	r0, r25
 a5e:	07 26       	eor	r0, r23
 a60:	0a d0       	rcall	.+20     	; 0xa76 <__divmodhi4_neg1>
 a62:	77 fd       	sbrc	r23, 7
 a64:	04 d0       	rcall	.+8      	; 0xa6e <__divmodhi4_neg2>
 a66:	0c d0       	rcall	.+24     	; 0xa80 <__udivmodhi4>
 a68:	06 d0       	rcall	.+12     	; 0xa76 <__divmodhi4_neg1>
 a6a:	00 20       	and	r0, r0
 a6c:	1a f4       	brpl	.+6      	; 0xa74 <__divmodhi4_exit>

00000a6e <__divmodhi4_neg2>:
 a6e:	70 95       	com	r23
 a70:	61 95       	neg	r22
 a72:	7f 4f       	sbci	r23, 0xFF	; 255

00000a74 <__divmodhi4_exit>:
 a74:	08 95       	ret

00000a76 <__divmodhi4_neg1>:
 a76:	f6 f7       	brtc	.-4      	; 0xa74 <__divmodhi4_exit>
 a78:	90 95       	com	r25
 a7a:	81 95       	neg	r24
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__udivmodhi4>:
 a80:	aa 1b       	sub	r26, r26
 a82:	bb 1b       	sub	r27, r27
 a84:	51 e1       	ldi	r21, 0x11	; 17
 a86:	07 c0       	rjmp	.+14     	; 0xa96 <__udivmodhi4_ep>

00000a88 <__udivmodhi4_loop>:
 a88:	aa 1f       	adc	r26, r26
 a8a:	bb 1f       	adc	r27, r27
 a8c:	a6 17       	cp	r26, r22
 a8e:	b7 07       	cpc	r27, r23
 a90:	10 f0       	brcs	.+4      	; 0xa96 <__udivmodhi4_ep>
 a92:	a6 1b       	sub	r26, r22
 a94:	b7 0b       	sbc	r27, r23

00000a96 <__udivmodhi4_ep>:
 a96:	88 1f       	adc	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	5a 95       	dec	r21
 a9c:	a9 f7       	brne	.-22     	; 0xa88 <__udivmodhi4_loop>
 a9e:	80 95       	com	r24
 aa0:	90 95       	com	r25
 aa2:	bc 01       	movw	r22, r24
 aa4:	cd 01       	movw	r24, r26
 aa6:	08 95       	ret

00000aa8 <_exit>:
 aa8:	f8 94       	cli

00000aaa <__stop_program>:
 aaa:	ff cf       	rjmp	.-2      	; 0xaaa <__stop_program>

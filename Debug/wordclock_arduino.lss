
wordclock_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00003e18  00003eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800124  00800124  00003ed0  2**0
                  ALLOC
  3 .stab         00003b10  00000000  00000000  00003ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001540  00000000  00000000  000079e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e1       	ldi	r30, 0x18	; 24
      7c:	fe e3       	ldi	r31, 0x3E	; 62
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e2       	ldi	r26, 0x24	; 36
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 32       	cpi	r26, 0x2B	; 43
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 df 18 	call	0x31be	; 0x31be <main>
      9e:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initClock>:
#include "DS1302.h"
#include <avr/io.h>
#include <util/delay.h>
#include "macro.h"

void initClock() {
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	DS1302_CLK_DIR_OUT;
      ae:	a4 e2       	ldi	r26, 0x24	; 36
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	e4 e2       	ldi	r30, 0x24	; 36
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	82 60       	ori	r24, 0x02	; 2
      ba:	8c 93       	st	X, r24
	DS1302_RST_DIR_OUT;
      bc:	a4 e2       	ldi	r26, 0x24	; 36
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	e4 e2       	ldi	r30, 0x24	; 36
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	81 60       	ori	r24, 0x01	; 1
      c8:	8c 93       	st	X, r24
}
      ca:	cf 91       	pop	r28
      cc:	df 91       	pop	r29
      ce:	08 95       	ret

000000d0 <_write_out>:

void _write_out(uint8_t value) {
      d0:	df 93       	push	r29
      d2:	cf 93       	push	r28
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	ad 97       	sbiw	r28, 0x2d	; 45
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	f8 94       	cli
      de:	de bf       	out	0x3e, r29	; 62
      e0:	0f be       	out	0x3f, r0	; 63
      e2:	cd bf       	out	0x3d, r28	; 61
      e4:	8d a7       	std	Y+45, r24	; 0x2d
	SET(DDRB, DDB2);
      e6:	a4 e2       	ldi	r26, 0x24	; 36
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e4 e2       	ldi	r30, 0x24	; 36
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	84 60       	ori	r24, 0x04	; 4
      f2:	8c 93       	st	X, r24
	for (int i = 0; i < 8; i++) {
      f4:	1c a6       	std	Y+44, r1	; 0x2c
      f6:	1b a6       	std	Y+43, r1	; 0x2b
      f8:	82 c1       	rjmp	.+772    	; 0x3fe <_write_out+0x32e>
		DS1302_CLK_0
      fa:	a5 e2       	ldi	r26, 0x25	; 37
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	e5 e2       	ldi	r30, 0x25	; 37
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	8d 7f       	andi	r24, 0xFD	; 253
     106:	8c 93       	st	X, r24
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	a0 e8       	ldi	r26, 0x80	; 128
     10e:	bf e3       	ldi	r27, 0x3F	; 63
     110:	8f a3       	std	Y+39, r24	; 0x27
     112:	98 a7       	std	Y+40, r25	; 0x28
     114:	a9 a7       	std	Y+41, r26	; 0x29
     116:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     118:	6f a1       	ldd	r22, Y+39	; 0x27
     11a:	78 a5       	ldd	r23, Y+40	; 0x28
     11c:	89 a5       	ldd	r24, Y+41	; 0x29
     11e:	9a a5       	ldd	r25, Y+42	; 0x2a
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	4a e7       	ldi	r20, 0x7A	; 122
     126:	55 e4       	ldi	r21, 0x45	; 69
     128:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     12c:	dc 01       	movw	r26, r24
     12e:	cb 01       	movw	r24, r22
     130:	8b a3       	std	Y+35, r24	; 0x23
     132:	9c a3       	std	Y+36, r25	; 0x24
     134:	ad a3       	std	Y+37, r26	; 0x25
     136:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     138:	6b a1       	ldd	r22, Y+35	; 0x23
     13a:	7c a1       	ldd	r23, Y+36	; 0x24
     13c:	8d a1       	ldd	r24, Y+37	; 0x25
     13e:	9e a1       	ldd	r25, Y+38	; 0x26
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	40 e8       	ldi	r20, 0x80	; 128
     146:	5f e3       	ldi	r21, 0x3F	; 63
     148:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
     14c:	88 23       	and	r24, r24
     14e:	2c f4       	brge	.+10     	; 0x15a <_write_out+0x8a>
		__ticks = 1;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	9a a3       	std	Y+34, r25	; 0x22
     156:	89 a3       	std	Y+33, r24	; 0x21
     158:	3f c0       	rjmp	.+126    	; 0x1d8 <_write_out+0x108>
	else if (__tmp > 65535)
     15a:	6b a1       	ldd	r22, Y+35	; 0x23
     15c:	7c a1       	ldd	r23, Y+36	; 0x24
     15e:	8d a1       	ldd	r24, Y+37	; 0x25
     160:	9e a1       	ldd	r25, Y+38	; 0x26
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	3f ef       	ldi	r19, 0xFF	; 255
     166:	4f e7       	ldi	r20, 0x7F	; 127
     168:	57 e4       	ldi	r21, 0x47	; 71
     16a:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
     16e:	18 16       	cp	r1, r24
     170:	4c f5       	brge	.+82     	; 0x1c4 <_write_out+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     172:	6f a1       	ldd	r22, Y+39	; 0x27
     174:	78 a5       	ldd	r23, Y+40	; 0x28
     176:	89 a5       	ldd	r24, Y+41	; 0x29
     178:	9a a5       	ldd	r25, Y+42	; 0x2a
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 e2       	ldi	r20, 0x20	; 32
     180:	51 e4       	ldi	r21, 0x41	; 65
     182:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     186:	dc 01       	movw	r26, r24
     188:	cb 01       	movw	r24, r22
     18a:	bc 01       	movw	r22, r24
     18c:	cd 01       	movw	r24, r26
     18e:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     192:	dc 01       	movw	r26, r24
     194:	cb 01       	movw	r24, r22
     196:	9a a3       	std	Y+34, r25	; 0x22
     198:	89 a3       	std	Y+33, r24	; 0x21
     19a:	0f c0       	rjmp	.+30     	; 0x1ba <_write_out+0xea>
     19c:	80 e9       	ldi	r24, 0x90	; 144
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	98 a3       	std	Y+32, r25	; 0x20
     1a2:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     1a6:	98 a1       	ldd	r25, Y+32	; 0x20
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <_write_out+0xd8>
     1ac:	98 a3       	std	Y+32, r25	; 0x20
     1ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1b0:	89 a1       	ldd	r24, Y+33	; 0x21
     1b2:	9a a1       	ldd	r25, Y+34	; 0x22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	9a a3       	std	Y+34, r25	; 0x22
     1b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ba:	89 a1       	ldd	r24, Y+33	; 0x21
     1bc:	9a a1       	ldd	r25, Y+34	; 0x22
     1be:	00 97       	sbiw	r24, 0x00	; 0
     1c0:	69 f7       	brne	.-38     	; 0x19c <_write_out+0xcc>
     1c2:	14 c0       	rjmp	.+40     	; 0x1ec <_write_out+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1c4:	6b a1       	ldd	r22, Y+35	; 0x23
     1c6:	7c a1       	ldd	r23, Y+36	; 0x24
     1c8:	8d a1       	ldd	r24, Y+37	; 0x25
     1ca:	9e a1       	ldd	r25, Y+38	; 0x26
     1cc:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     1d0:	dc 01       	movw	r26, r24
     1d2:	cb 01       	movw	r24, r22
     1d4:	9a a3       	std	Y+34, r25	; 0x22
     1d6:	89 a3       	std	Y+33, r24	; 0x21
     1d8:	89 a1       	ldd	r24, Y+33	; 0x21
     1da:	9a a1       	ldd	r25, Y+34	; 0x22
     1dc:	9e 8f       	std	Y+30, r25	; 0x1e
     1de:	8d 8f       	std	Y+29, r24	; 0x1d
     1e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     1e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_write_out+0x114>
     1e8:	9e 8f       	std	Y+30, r25	; 0x1e
     1ea:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		if (value & 0x01) {
     1ec:	8d a5       	ldd	r24, Y+45	; 0x2d
     1ee:	88 2f       	mov	r24, r24
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	81 70       	andi	r24, 0x01	; 1
     1f4:	90 70       	andi	r25, 0x00	; 0
     1f6:	88 23       	and	r24, r24
     1f8:	41 f0       	breq	.+16     	; 0x20a <_write_out+0x13a>
			DS1302_IO_1
     1fa:	a5 e2       	ldi	r26, 0x25	; 37
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
     1fe:	e5 e2       	ldi	r30, 0x25	; 37
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	84 60       	ori	r24, 0x04	; 4
     206:	8c 93       	st	X, r24
     208:	07 c0       	rjmp	.+14     	; 0x218 <_write_out+0x148>
		} else {
			DS1302_IO_0
     20a:	a5 e2       	ldi	r26, 0x25	; 37
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	e5 e2       	ldi	r30, 0x25	; 37
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	8b 7f       	andi	r24, 0xFB	; 251
     216:	8c 93       	st	X, r24
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	a0 e8       	ldi	r26, 0x80	; 128
     21e:	bf e3       	ldi	r27, 0x3F	; 63
     220:	89 8f       	std	Y+25, r24	; 0x19
     222:	9a 8f       	std	Y+26, r25	; 0x1a
     224:	ab 8f       	std	Y+27, r26	; 0x1b
     226:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     228:	69 8d       	ldd	r22, Y+25	; 0x19
     22a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     22c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     22e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	4a e7       	ldi	r20, 0x7A	; 122
     236:	55 e4       	ldi	r21, 0x45	; 69
     238:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     23c:	dc 01       	movw	r26, r24
     23e:	cb 01       	movw	r24, r22
     240:	8d 8b       	std	Y+21, r24	; 0x15
     242:	9e 8b       	std	Y+22, r25	; 0x16
     244:	af 8b       	std	Y+23, r26	; 0x17
     246:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     248:	6d 89       	ldd	r22, Y+21	; 0x15
     24a:	7e 89       	ldd	r23, Y+22	; 0x16
     24c:	8f 89       	ldd	r24, Y+23	; 0x17
     24e:	98 8d       	ldd	r25, Y+24	; 0x18
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e8       	ldi	r20, 0x80	; 128
     256:	5f e3       	ldi	r21, 0x3F	; 63
     258:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
     25c:	88 23       	and	r24, r24
     25e:	2c f4       	brge	.+10     	; 0x26a <_write_out+0x19a>
		__ticks = 1;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	9c 8b       	std	Y+20, r25	; 0x14
     266:	8b 8b       	std	Y+19, r24	; 0x13
     268:	3f c0       	rjmp	.+126    	; 0x2e8 <_write_out+0x218>
	else if (__tmp > 65535)
     26a:	6d 89       	ldd	r22, Y+21	; 0x15
     26c:	7e 89       	ldd	r23, Y+22	; 0x16
     26e:	8f 89       	ldd	r24, Y+23	; 0x17
     270:	98 8d       	ldd	r25, Y+24	; 0x18
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	3f ef       	ldi	r19, 0xFF	; 255
     276:	4f e7       	ldi	r20, 0x7F	; 127
     278:	57 e4       	ldi	r21, 0x47	; 71
     27a:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
     27e:	18 16       	cp	r1, r24
     280:	4c f5       	brge	.+82     	; 0x2d4 <_write_out+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     282:	69 8d       	ldd	r22, Y+25	; 0x19
     284:	7a 8d       	ldd	r23, Y+26	; 0x1a
     286:	8b 8d       	ldd	r24, Y+27	; 0x1b
     288:	9c 8d       	ldd	r25, Y+28	; 0x1c
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e2       	ldi	r20, 0x20	; 32
     290:	51 e4       	ldi	r21, 0x41	; 65
     292:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     296:	dc 01       	movw	r26, r24
     298:	cb 01       	movw	r24, r22
     29a:	bc 01       	movw	r22, r24
     29c:	cd 01       	movw	r24, r26
     29e:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	9c 8b       	std	Y+20, r25	; 0x14
     2a8:	8b 8b       	std	Y+19, r24	; 0x13
     2aa:	0f c0       	rjmp	.+30     	; 0x2ca <_write_out+0x1fa>
     2ac:	80 e9       	ldi	r24, 0x90	; 144
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	9a 8b       	std	Y+18, r25	; 0x12
     2b2:	89 8b       	std	Y+17, r24	; 0x11
     2b4:	89 89       	ldd	r24, Y+17	; 0x11
     2b6:	9a 89       	ldd	r25, Y+18	; 0x12
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <_write_out+0x1e8>
     2bc:	9a 8b       	std	Y+18, r25	; 0x12
     2be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c0:	8b 89       	ldd	r24, Y+19	; 0x13
     2c2:	9c 89       	ldd	r25, Y+20	; 0x14
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	9c 8b       	std	Y+20, r25	; 0x14
     2c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ca:	8b 89       	ldd	r24, Y+19	; 0x13
     2cc:	9c 89       	ldd	r25, Y+20	; 0x14
     2ce:	00 97       	sbiw	r24, 0x00	; 0
     2d0:	69 f7       	brne	.-38     	; 0x2ac <_write_out+0x1dc>
     2d2:	14 c0       	rjmp	.+40     	; 0x2fc <_write_out+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2d4:	6d 89       	ldd	r22, Y+21	; 0x15
     2d6:	7e 89       	ldd	r23, Y+22	; 0x16
     2d8:	8f 89       	ldd	r24, Y+23	; 0x17
     2da:	98 8d       	ldd	r25, Y+24	; 0x18
     2dc:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     2e0:	dc 01       	movw	r26, r24
     2e2:	cb 01       	movw	r24, r22
     2e4:	9c 8b       	std	Y+20, r25	; 0x14
     2e6:	8b 8b       	std	Y+19, r24	; 0x13
     2e8:	8b 89       	ldd	r24, Y+19	; 0x13
     2ea:	9c 89       	ldd	r25, Y+20	; 0x14
     2ec:	98 8b       	std	Y+16, r25	; 0x10
     2ee:	8f 87       	std	Y+15, r24	; 0x0f
     2f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     2f2:	98 89       	ldd	r25, Y+16	; 0x10
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <_write_out+0x224>
     2f8:	98 8b       	std	Y+16, r25	; 0x10
     2fa:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(1);
		DS1302_CLK_1
     2fc:	a5 e2       	ldi	r26, 0x25	; 37
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	e5 e2       	ldi	r30, 0x25	; 37
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	82 60       	ori	r24, 0x02	; 2
     308:	8c 93       	st	X, r24
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	a0 e8       	ldi	r26, 0x80	; 128
     310:	bf e3       	ldi	r27, 0x3F	; 63
     312:	8b 87       	std	Y+11, r24	; 0x0b
     314:	9c 87       	std	Y+12, r25	; 0x0c
     316:	ad 87       	std	Y+13, r26	; 0x0d
     318:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     31a:	6b 85       	ldd	r22, Y+11	; 0x0b
     31c:	7c 85       	ldd	r23, Y+12	; 0x0c
     31e:	8d 85       	ldd	r24, Y+13	; 0x0d
     320:	9e 85       	ldd	r25, Y+14	; 0x0e
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	4a e7       	ldi	r20, 0x7A	; 122
     328:	55 e4       	ldi	r21, 0x45	; 69
     32a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     32e:	dc 01       	movw	r26, r24
     330:	cb 01       	movw	r24, r22
     332:	8f 83       	std	Y+7, r24	; 0x07
     334:	98 87       	std	Y+8, r25	; 0x08
     336:	a9 87       	std	Y+9, r26	; 0x09
     338:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     33a:	6f 81       	ldd	r22, Y+7	; 0x07
     33c:	78 85       	ldd	r23, Y+8	; 0x08
     33e:	89 85       	ldd	r24, Y+9	; 0x09
     340:	9a 85       	ldd	r25, Y+10	; 0x0a
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e8       	ldi	r20, 0x80	; 128
     348:	5f e3       	ldi	r21, 0x3F	; 63
     34a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
     34e:	88 23       	and	r24, r24
     350:	2c f4       	brge	.+10     	; 0x35c <_write_out+0x28c>
		__ticks = 1;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	9e 83       	std	Y+6, r25	; 0x06
     358:	8d 83       	std	Y+5, r24	; 0x05
     35a:	3f c0       	rjmp	.+126    	; 0x3da <_write_out+0x30a>
	else if (__tmp > 65535)
     35c:	6f 81       	ldd	r22, Y+7	; 0x07
     35e:	78 85       	ldd	r23, Y+8	; 0x08
     360:	89 85       	ldd	r24, Y+9	; 0x09
     362:	9a 85       	ldd	r25, Y+10	; 0x0a
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	3f ef       	ldi	r19, 0xFF	; 255
     368:	4f e7       	ldi	r20, 0x7F	; 127
     36a:	57 e4       	ldi	r21, 0x47	; 71
     36c:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
     370:	18 16       	cp	r1, r24
     372:	4c f5       	brge	.+82     	; 0x3c6 <_write_out+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     374:	6b 85       	ldd	r22, Y+11	; 0x0b
     376:	7c 85       	ldd	r23, Y+12	; 0x0c
     378:	8d 85       	ldd	r24, Y+13	; 0x0d
     37a:	9e 85       	ldd	r25, Y+14	; 0x0e
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	bc 01       	movw	r22, r24
     38e:	cd 01       	movw	r24, r26
     390:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	9e 83       	std	Y+6, r25	; 0x06
     39a:	8d 83       	std	Y+5, r24	; 0x05
     39c:	0f c0       	rjmp	.+30     	; 0x3bc <_write_out+0x2ec>
     39e:	80 e9       	ldi	r24, 0x90	; 144
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	9c 83       	std	Y+4, r25	; 0x04
     3a4:	8b 83       	std	Y+3, r24	; 0x03
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	9c 81       	ldd	r25, Y+4	; 0x04
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <_write_out+0x2da>
     3ae:	9c 83       	std	Y+4, r25	; 0x04
     3b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3b2:	8d 81       	ldd	r24, Y+5	; 0x05
     3b4:	9e 81       	ldd	r25, Y+6	; 0x06
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	9e 83       	std	Y+6, r25	; 0x06
     3ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3bc:	8d 81       	ldd	r24, Y+5	; 0x05
     3be:	9e 81       	ldd	r25, Y+6	; 0x06
     3c0:	00 97       	sbiw	r24, 0x00	; 0
     3c2:	69 f7       	brne	.-38     	; 0x39e <_write_out+0x2ce>
     3c4:	14 c0       	rjmp	.+40     	; 0x3ee <_write_out+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3c6:	6f 81       	ldd	r22, Y+7	; 0x07
     3c8:	78 85       	ldd	r23, Y+8	; 0x08
     3ca:	89 85       	ldd	r24, Y+9	; 0x09
     3cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ce:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     3d2:	dc 01       	movw	r26, r24
     3d4:	cb 01       	movw	r24, r22
     3d6:	9e 83       	std	Y+6, r25	; 0x06
     3d8:	8d 83       	std	Y+5, r24	; 0x05
     3da:	8d 81       	ldd	r24, Y+5	; 0x05
     3dc:	9e 81       	ldd	r25, Y+6	; 0x06
     3de:	9a 83       	std	Y+2, r25	; 0x02
     3e0:	89 83       	std	Y+1, r24	; 0x01
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <_write_out+0x316>
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		value >>= 1;
     3ee:	8d a5       	ldd	r24, Y+45	; 0x2d
     3f0:	86 95       	lsr	r24
     3f2:	8d a7       	std	Y+45, r24	; 0x2d
	DS1302_RST_DIR_OUT;
}

void _write_out(uint8_t value) {
	SET(DDRB, DDB2);
	for (int i = 0; i < 8; i++) {
     3f4:	8b a5       	ldd	r24, Y+43	; 0x2b
     3f6:	9c a5       	ldd	r25, Y+44	; 0x2c
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	9c a7       	std	Y+44, r25	; 0x2c
     3fc:	8b a7       	std	Y+43, r24	; 0x2b
     3fe:	8b a5       	ldd	r24, Y+43	; 0x2b
     400:	9c a5       	ldd	r25, Y+44	; 0x2c
     402:	88 30       	cpi	r24, 0x08	; 8
     404:	91 05       	cpc	r25, r1
     406:	0c f4       	brge	.+2      	; 0x40a <_write_out+0x33a>
     408:	78 ce       	rjmp	.-784    	; 0xfa <_write_out+0x2a>
		_delay_ms(1);
		DS1302_CLK_1
		_delay_ms(1);
		value >>= 1;
	}
}
     40a:	ad 96       	adiw	r28, 0x2d	; 45
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	cf 91       	pop	r28
     418:	df 91       	pop	r29
     41a:	08 95       	ret

0000041c <_register_bcd_to_dec_>:

uint8_t _register_bcd_to_dec_(uint8_t reg, uint8_t high_bit) {
     41c:	df 93       	push	r29
     41e:	cf 93       	push	r28
     420:	00 d0       	rcall	.+0      	; 0x422 <_register_bcd_to_dec_+0x6>
     422:	00 d0       	rcall	.+0      	; 0x424 <_register_bcd_to_dec_+0x8>
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	8b 83       	std	Y+3, r24	; 0x03
     42a:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t val = read_register(reg);
     42c:	8b 81       	ldd	r24, Y+3	; 0x03
     42e:	0e 94 81 03 	call	0x702	; 0x702 <read_register>
     432:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t mask = (1 << (high_bit + 1)) - 1;
     434:	8c 81       	ldd	r24, Y+4	; 0x04
     436:	88 2f       	mov	r24, r24
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	9c 01       	movw	r18, r24
     43c:	2f 5f       	subi	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	02 c0       	rjmp	.+4      	; 0x44a <_register_bcd_to_dec_+0x2e>
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	2a 95       	dec	r18
     44c:	e2 f7       	brpl	.-8      	; 0x446 <_register_bcd_to_dec_+0x2a>
     44e:	81 50       	subi	r24, 0x01	; 1
     450:	89 83       	std	Y+1, r24	; 0x01
	val &= mask;
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	89 23       	and	r24, r25
     458:	8a 83       	std	Y+2, r24	; 0x02
	val = (val & 15) + 10 * ((val & (15 << 4)) >> 4);
     45a:	8a 81       	ldd	r24, Y+2	; 0x02
     45c:	48 2f       	mov	r20, r24
     45e:	4f 70       	andi	r20, 0x0F	; 15
     460:	8a 81       	ldd	r24, Y+2	; 0x02
     462:	82 95       	swap	r24
     464:	8f 70       	andi	r24, 0x0F	; 15
     466:	88 2f       	mov	r24, r24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	9c 01       	movw	r18, r24
     46e:	22 0f       	add	r18, r18
     470:	33 1f       	adc	r19, r19
     472:	c9 01       	movw	r24, r18
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	82 0f       	add	r24, r18
     47e:	93 1f       	adc	r25, r19
     480:	84 0f       	add	r24, r20
     482:	8a 83       	std	Y+2, r24	; 0x02
	return val;
     484:	8a 81       	ldd	r24, Y+2	; 0x02
}
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <_register_bcd_to_dec>:

uint8_t _register_bcd_to_dec(uint8_t reg) {
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	0f 92       	push	r0
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	89 83       	std	Y+1, r24	; 0x01
	return _register_bcd_to_dec_(reg, 7);
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	67 e0       	ldi	r22, 0x07	; 7
     4a4:	0e 94 0e 02 	call	0x41c	; 0x41c <_register_bcd_to_dec_>
}
     4a8:	0f 90       	pop	r0
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	08 95       	ret

000004b0 <_register_dec_to_bcd_>:

void _register_dec_to_bcd_(uint8_t reg, uint8_t value, uint8_t high_bit) {
     4b0:	df 93       	push	r29
     4b2:	cf 93       	push	r28
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <_register_dec_to_bcd_+0x6>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <_register_dec_to_bcd_+0x8>
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <_register_dec_to_bcd_+0xa>
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	8c 83       	std	Y+4, r24	; 0x04
     4c0:	6d 83       	std	Y+5, r22	; 0x05
     4c2:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t regv = read_register(reg);
     4c4:	8c 81       	ldd	r24, Y+4	; 0x04
     4c6:	0e 94 81 03 	call	0x702	; 0x702 <read_register>
     4ca:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t mask = (1 << (high_bit + 1)) - 1;
     4cc:	8e 81       	ldd	r24, Y+6	; 0x06
     4ce:	88 2f       	mov	r24, r24
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	9c 01       	movw	r18, r24
     4d4:	2f 5f       	subi	r18, 0xFF	; 255
     4d6:	3f 4f       	sbci	r19, 0xFF	; 255
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <_register_dec_to_bcd_+0x32>
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	2a 95       	dec	r18
     4e4:	e2 f7       	brpl	.-8      	; 0x4de <_register_dec_to_bcd_+0x2e>
     4e6:	81 50       	subi	r24, 0x01	; 1
     4e8:	8a 83       	std	Y+2, r24	; 0x02

	/* convert value to bcd in place */
	uint8_t tvalue = value / 10;
     4ea:	8d 81       	ldd	r24, Y+5	; 0x05
     4ec:	9a e0       	ldi	r25, 0x0A	; 10
     4ee:	69 2f       	mov	r22, r25
     4f0:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__udivmodqi4>
     4f4:	89 83       	std	Y+1, r24	; 0x01
	value = value % 10;
     4f6:	8d 81       	ldd	r24, Y+5	; 0x05
     4f8:	9a e0       	ldi	r25, 0x0A	; 10
     4fa:	69 2f       	mov	r22, r25
     4fc:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__udivmodqi4>
     500:	89 2f       	mov	r24, r25
     502:	8d 83       	std	Y+5, r24	; 0x05
	value |= (tvalue << 4);
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	88 2f       	mov	r24, r24
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	82 95       	swap	r24
     50c:	92 95       	swap	r25
     50e:	90 7f       	andi	r25, 0xF0	; 240
     510:	98 27       	eor	r25, r24
     512:	80 7f       	andi	r24, 0xF0	; 240
     514:	98 27       	eor	r25, r24
     516:	98 2f       	mov	r25, r24
     518:	8d 81       	ldd	r24, Y+5	; 0x05
     51a:	89 2b       	or	r24, r25
     51c:	8d 83       	std	Y+5, r24	; 0x05

	/* replace high bits of value if needed */
	value &= mask;
     51e:	9d 81       	ldd	r25, Y+5	; 0x05
     520:	8a 81       	ldd	r24, Y+2	; 0x02
     522:	89 23       	and	r24, r25
     524:	8d 83       	std	Y+5, r24	; 0x05
	value |= (regv &= ~mask);
     526:	8a 81       	ldd	r24, Y+2	; 0x02
     528:	98 2f       	mov	r25, r24
     52a:	90 95       	com	r25
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	89 23       	and	r24, r25
     530:	8b 83       	std	Y+3, r24	; 0x03
     532:	9d 81       	ldd	r25, Y+5	; 0x05
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	89 2b       	or	r24, r25
     538:	8d 83       	std	Y+5, r24	; 0x05

	write_register(reg, value);
     53a:	8c 81       	ldd	r24, Y+4	; 0x04
     53c:	6d 81       	ldd	r22, Y+5	; 0x05
     53e:	0e 94 b5 03 	call	0x76a	; 0x76a <write_register>
}
     542:	26 96       	adiw	r28, 0x06	; 6
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	cf 91       	pop	r28
     550:	df 91       	pop	r29
     552:	08 95       	ret

00000554 <_register_dec_to_bcd>:

void _register_dec_to_bcd(uint8_t reg, uint8_t value) {
     554:	df 93       	push	r29
     556:	cf 93       	push	r28
     558:	00 d0       	rcall	.+0      	; 0x55a <_register_dec_to_bcd+0x6>
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	89 83       	std	Y+1, r24	; 0x01
     560:	6a 83       	std	Y+2, r22	; 0x02
	_register_dec_to_bcd_(reg, value, 7);
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	6a 81       	ldd	r22, Y+2	; 0x02
     566:	47 e0       	ldi	r20, 0x07	; 7
     568:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_register_dec_to_bcd_>
}
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	08 95       	ret

00000576 <_read_in>:

uint8_t _read_in() {
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	61 97       	sbiw	r28, 0x11	; 17
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
	uint8_t input_value = 0;
     58a:	19 8a       	std	Y+17, r1	; 0x11
	DS1302_IO_DIR_IN
     58c:	a4 e2       	ldi	r26, 0x24	; 36
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	e4 e2       	ldi	r30, 0x24	; 36
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	8b 7f       	andi	r24, 0xFB	; 251
     598:	8c 93       	st	X, r24
	DS1302_CLK_0
     59a:	a5 e2       	ldi	r26, 0x25	; 37
     59c:	b0 e0       	ldi	r27, 0x00	; 0
     59e:	e5 e2       	ldi	r30, 0x25	; 37
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	8d 7f       	andi	r24, 0xFD	; 253
     5a6:	8c 93       	st	X, r24
	for (int i = 0; i < 8; ++i) {
     5a8:	18 8a       	std	Y+16, r1	; 0x10
     5aa:	1f 86       	std	Y+15, r1	; 0x0f
     5ac:	9a c0       	rjmp	.+308    	; 0x6e2 <_read_in+0x16c>
		if (DS1302_IO_IN_1)
     5ae:	e3 e2       	ldi	r30, 0x23	; 35
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	88 2f       	mov	r24, r24
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	84 70       	andi	r24, 0x04	; 4
     5ba:	90 70       	andi	r25, 0x00	; 0
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	61 f0       	breq	.+24     	; 0x5d8 <_read_in+0x62>
			input_value |= (1 << i);
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0f 84       	ldd	r0, Y+15	; 0x0f
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <_read_in+0x56>
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	0a 94       	dec	r0
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <_read_in+0x52>
     5d0:	98 2f       	mov	r25, r24
     5d2:	89 89       	ldd	r24, Y+17	; 0x11
     5d4:	89 2b       	or	r24, r25
     5d6:	89 8b       	std	Y+17, r24	; 0x11
		DS1302_CLK_1
     5d8:	a5 e2       	ldi	r26, 0x25	; 37
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e5 e2       	ldi	r30, 0x25	; 37
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	82 60       	ori	r24, 0x02	; 2
     5e4:	8c 93       	st	X, r24
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	a0 e8       	ldi	r26, 0x80	; 128
     5ec:	bf e3       	ldi	r27, 0x3F	; 63
     5ee:	8b 87       	std	Y+11, r24	; 0x0b
     5f0:	9c 87       	std	Y+12, r25	; 0x0c
     5f2:	ad 87       	std	Y+13, r26	; 0x0d
     5f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5f6:	6b 85       	ldd	r22, Y+11	; 0x0b
     5f8:	7c 85       	ldd	r23, Y+12	; 0x0c
     5fa:	8d 85       	ldd	r24, Y+13	; 0x0d
     5fc:	9e 85       	ldd	r25, Y+14	; 0x0e
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	4a e7       	ldi	r20, 0x7A	; 122
     604:	55 e4       	ldi	r21, 0x45	; 69
     606:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	8f 83       	std	Y+7, r24	; 0x07
     610:	98 87       	std	Y+8, r25	; 0x08
     612:	a9 87       	std	Y+9, r26	; 0x09
     614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     616:	6f 81       	ldd	r22, Y+7	; 0x07
     618:	78 85       	ldd	r23, Y+8	; 0x08
     61a:	89 85       	ldd	r24, Y+9	; 0x09
     61c:	9a 85       	ldd	r25, Y+10	; 0x0a
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	40 e8       	ldi	r20, 0x80	; 128
     624:	5f e3       	ldi	r21, 0x3F	; 63
     626:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
     62a:	88 23       	and	r24, r24
     62c:	2c f4       	brge	.+10     	; 0x638 <_read_in+0xc2>
		__ticks = 1;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	9e 83       	std	Y+6, r25	; 0x06
     634:	8d 83       	std	Y+5, r24	; 0x05
     636:	3f c0       	rjmp	.+126    	; 0x6b6 <_read_in+0x140>
	else if (__tmp > 65535)
     638:	6f 81       	ldd	r22, Y+7	; 0x07
     63a:	78 85       	ldd	r23, Y+8	; 0x08
     63c:	89 85       	ldd	r24, Y+9	; 0x09
     63e:	9a 85       	ldd	r25, Y+10	; 0x0a
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	3f ef       	ldi	r19, 0xFF	; 255
     644:	4f e7       	ldi	r20, 0x7F	; 127
     646:	57 e4       	ldi	r21, 0x47	; 71
     648:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
     64c:	18 16       	cp	r1, r24
     64e:	4c f5       	brge	.+82     	; 0x6a2 <_read_in+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     650:	6b 85       	ldd	r22, Y+11	; 0x0b
     652:	7c 85       	ldd	r23, Y+12	; 0x0c
     654:	8d 85       	ldd	r24, Y+13	; 0x0d
     656:	9e 85       	ldd	r25, Y+14	; 0x0e
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e2       	ldi	r20, 0x20	; 32
     65e:	51 e4       	ldi	r21, 0x41	; 65
     660:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	bc 01       	movw	r22, r24
     66a:	cd 01       	movw	r24, r26
     66c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	9e 83       	std	Y+6, r25	; 0x06
     676:	8d 83       	std	Y+5, r24	; 0x05
     678:	0f c0       	rjmp	.+30     	; 0x698 <_read_in+0x122>
     67a:	80 e9       	ldi	r24, 0x90	; 144
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	9c 83       	std	Y+4, r25	; 0x04
     680:	8b 83       	std	Y+3, r24	; 0x03
     682:	8b 81       	ldd	r24, Y+3	; 0x03
     684:	9c 81       	ldd	r25, Y+4	; 0x04
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <_read_in+0x110>
     68a:	9c 83       	std	Y+4, r25	; 0x04
     68c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     68e:	8d 81       	ldd	r24, Y+5	; 0x05
     690:	9e 81       	ldd	r25, Y+6	; 0x06
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	9e 83       	std	Y+6, r25	; 0x06
     696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     698:	8d 81       	ldd	r24, Y+5	; 0x05
     69a:	9e 81       	ldd	r25, Y+6	; 0x06
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	69 f7       	brne	.-38     	; 0x67a <_read_in+0x104>
     6a0:	14 c0       	rjmp	.+40     	; 0x6ca <_read_in+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6a2:	6f 81       	ldd	r22, Y+7	; 0x07
     6a4:	78 85       	ldd	r23, Y+8	; 0x08
     6a6:	89 85       	ldd	r24, Y+9	; 0x09
     6a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6aa:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	9e 83       	std	Y+6, r25	; 0x06
     6b4:	8d 83       	std	Y+5, r24	; 0x05
     6b6:	8d 81       	ldd	r24, Y+5	; 0x05
     6b8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <_read_in+0x14c>
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		DS1302_CLK_0
     6ca:	a5 e2       	ldi	r26, 0x25	; 37
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	e5 e2       	ldi	r30, 0x25	; 37
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	8d 7f       	andi	r24, 0xFD	; 253
     6d6:	8c 93       	st	X, r24

uint8_t _read_in() {
	uint8_t input_value = 0;
	DS1302_IO_DIR_IN
	DS1302_CLK_0
	for (int i = 0; i < 8; ++i) {
     6d8:	8f 85       	ldd	r24, Y+15	; 0x0f
     6da:	98 89       	ldd	r25, Y+16	; 0x10
     6dc:	01 96       	adiw	r24, 0x01	; 1
     6de:	98 8b       	std	Y+16, r25	; 0x10
     6e0:	8f 87       	std	Y+15, r24	; 0x0f
     6e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     6e4:	98 89       	ldd	r25, Y+16	; 0x10
     6e6:	88 30       	cpi	r24, 0x08	; 8
     6e8:	91 05       	cpc	r25, r1
     6ea:	0c f4       	brge	.+2      	; 0x6ee <_read_in+0x178>
     6ec:	60 cf       	rjmp	.-320    	; 0x5ae <_read_in+0x38>
		DS1302_CLK_1
		_delay_ms(1);
		DS1302_CLK_0
	}

	return input_value;
     6ee:	89 89       	ldd	r24, Y+17	; 0x11
}
     6f0:	61 96       	adiw	r28, 0x11	; 17
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	cf 91       	pop	r28
     6fe:	df 91       	pop	r29
     700:	08 95       	ret

00000702 <read_register>:

uint8_t read_register(uint8_t reg) {
     702:	df 93       	push	r29
     704:	cf 93       	push	r28
     706:	00 d0       	rcall	.+0      	; 0x708 <read_register+0x6>
     708:	0f 92       	push	r0
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t cmd_byte = 129; /* 1000 0001 */
     710:	81 e8       	ldi	r24, 0x81	; 129
     712:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t reg_value;
	cmd_byte |= (reg << 1);
     714:	8b 81       	ldd	r24, Y+3	; 0x03
     716:	88 2f       	mov	r24, r24
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	98 2f       	mov	r25, r24
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	89 2b       	or	r24, r25
     724:	8a 83       	std	Y+2, r24	; 0x02

	DS1302_CLK_0
     726:	a5 e2       	ldi	r26, 0x25	; 37
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e5 e2       	ldi	r30, 0x25	; 37
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	8d 7f       	andi	r24, 0xFD	; 253
     732:	8c 93       	st	X, r24
	DS1302_RST_1
     734:	a5 e2       	ldi	r26, 0x25	; 37
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	e5 e2       	ldi	r30, 0x25	; 37
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	8c 93       	st	X, r24
	_write_out(cmd_byte);
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	0e 94 68 00 	call	0xd0	; 0xd0 <_write_out>
	reg_value = _read_in();
     748:	0e 94 bb 02 	call	0x576	; 0x576 <_read_in>
     74c:	89 83       	std	Y+1, r24	; 0x01

	DS1302_RST_0
     74e:	a5 e2       	ldi	r26, 0x25	; 37
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	e5 e2       	ldi	r30, 0x25	; 37
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	8e 7f       	andi	r24, 0xFE	; 254
     75a:	8c 93       	st	X, r24

	return reg_value;
     75c:	89 81       	ldd	r24, Y+1	; 0x01
}
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	cf 91       	pop	r28
     766:	df 91       	pop	r29
     768:	08 95       	ret

0000076a <write_register>:

void write_register(uint8_t reg, uint8_t value) {
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	00 d0       	rcall	.+0      	; 0x770 <write_register+0x6>
     770:	0f 92       	push	r0
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	8a 83       	std	Y+2, r24	; 0x02
     778:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t cmd_byte = (128 | (reg << 1));
     77a:	8a 81       	ldd	r24, Y+2	; 0x02
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	80 68       	ori	r24, 0x80	; 128
     786:	89 83       	std	Y+1, r24	; 0x01

	DS1302_CLK_0
     788:	a5 e2       	ldi	r26, 0x25	; 37
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	e5 e2       	ldi	r30, 0x25	; 37
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	8d 7f       	andi	r24, 0xFD	; 253
     794:	8c 93       	st	X, r24
	DS1302_RST_1
     796:	a5 e2       	ldi	r26, 0x25	; 37
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	e5 e2       	ldi	r30, 0x25	; 37
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	81 60       	ori	r24, 0x01	; 1
     7a2:	8c 93       	st	X, r24

	_write_out(cmd_byte);
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	0e 94 68 00 	call	0xd0	; 0xd0 <_write_out>
	_write_out(value);
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	0e 94 68 00 	call	0xd0	; 0xd0 <_write_out>

	DS1302_RST_0
     7b0:	a5 e2       	ldi	r26, 0x25	; 37
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	e5 e2       	ldi	r30, 0x25	; 37
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	8e 7f       	andi	r24, 0xFE	; 254
     7bc:	8c 93       	st	X, r24
}
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	cf 91       	pop	r28
     7c6:	df 91       	pop	r29
     7c8:	08 95       	ret

000007ca <halt>:

void halt(bool enable)
{
     7ca:	df 93       	push	r29
     7cc:	cf 93       	push	r28
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <halt+0x6>
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t sec = read_register(SEC_REG);
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 81 03 	call	0x702	; 0x702 <read_register>
     7dc:	89 83       	std	Y+1, r24	; 0x01
  sec &= ~(1 << 7);
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	8f 77       	andi	r24, 0x7F	; 127
     7e2:	89 83       	std	Y+1, r24	; 0x01
  sec |= (enable << 7);
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	96 95       	lsr	r25
     7ec:	98 2f       	mov	r25, r24
     7ee:	88 27       	eor	r24, r24
     7f0:	97 95       	ror	r25
     7f2:	87 95       	ror	r24
     7f4:	98 2f       	mov	r25, r24
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	89 2b       	or	r24, r25
     7fa:	89 83       	std	Y+1, r24	; 0x01
  write_register(SEC_REG, sec);
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	69 81       	ldd	r22, Y+1	; 0x01
     800:	0e 94 b5 03 	call	0x76a	; 0x76a <write_register>
}
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	08 95       	ret

0000080e <getSeconds>:

/*** Get time ***/

uint8_t getSeconds() {
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec_(SEC_REG, 6);
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	66 e0       	ldi	r22, 0x06	; 6
     81a:	0e 94 0e 02 	call	0x41c	; 0x41c <_register_bcd_to_dec_>
}
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	08 95       	ret

00000824 <getMinutes>:

uint8_t getMinutes() {
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec(MIN_REG);
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0e 94 4a 02 	call	0x494	; 0x494 <_register_bcd_to_dec>
}
     832:	cf 91       	pop	r28
     834:	df 91       	pop	r29
     836:	08 95       	ret

00000838 <getHour>:

uint8_t getHour() {
     838:	df 93       	push	r29
     83a:	cf 93       	push	r28
     83c:	00 d0       	rcall	.+0      	; 0x83e <getHour+0x6>
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
	uint8_t hr = read_register(HR_REG);
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	0e 94 81 03 	call	0x702	; 0x702 <read_register>
     848:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t adj;
	if (hr & 128) /* 12-hour mode */
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	88 23       	and	r24, r24
     84e:	dc f4       	brge	.+54     	; 0x886 <getHour+0x4e>
		adj = 12 * ((hr & 32) >> 5);
     850:	8a 81       	ldd	r24, Y+2	; 0x02
     852:	88 2f       	mov	r24, r24
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	80 72       	andi	r24, 0x20	; 32
     858:	90 70       	andi	r25, 0x00	; 0
     85a:	9c 01       	movw	r18, r24
     85c:	35 95       	asr	r19
     85e:	27 95       	ror	r18
     860:	35 95       	asr	r19
     862:	27 95       	ror	r18
     864:	35 95       	asr	r19
     866:	27 95       	ror	r18
     868:	35 95       	asr	r19
     86a:	27 95       	ror	r18
     86c:	35 95       	asr	r19
     86e:	27 95       	ror	r18
     870:	c9 01       	movw	r24, r18
     872:	88 0f       	add	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	82 0f       	add	r24, r18
     878:	93 1f       	adc	r25, r19
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	18 c0       	rjmp	.+48     	; 0x8b6 <getHour+0x7e>
	else
		/* 24-hour mode */
		adj = 10 * ((hr & (32 + 16)) >> 4);
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	80 73       	andi	r24, 0x30	; 48
     88e:	90 70       	andi	r25, 0x00	; 0
     890:	95 95       	asr	r25
     892:	87 95       	ror	r24
     894:	95 95       	asr	r25
     896:	87 95       	ror	r24
     898:	95 95       	asr	r25
     89a:	87 95       	ror	r24
     89c:	95 95       	asr	r25
     89e:	87 95       	ror	r24
     8a0:	9c 01       	movw	r18, r24
     8a2:	22 0f       	add	r18, r18
     8a4:	33 1f       	adc	r19, r19
     8a6:	c9 01       	movw	r24, r18
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	82 0f       	add	r24, r18
     8b2:	93 1f       	adc	r25, r19
     8b4:	89 83       	std	Y+1, r24	; 0x01
	hr = (hr & 15) + adj;
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	98 2f       	mov	r25, r24
     8ba:	9f 70       	andi	r25, 0x0F	; 15
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	89 0f       	add	r24, r25
     8c0:	8a 83       	std	Y+2, r24	; 0x02
	return hr;
     8c2:	8a 81       	ldd	r24, Y+2	; 0x02
}
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	cf 91       	pop	r28
     8ca:	df 91       	pop	r29
     8cc:	08 95       	ret

000008ce <getDate>:

uint8_t getDate() {
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec_(DATE_REG, 5);
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	65 e0       	ldi	r22, 0x05	; 5
     8da:	0e 94 0e 02 	call	0x41c	; 0x41c <_register_bcd_to_dec_>
}
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	08 95       	ret

000008e4 <getMonth>:

uint8_t getMonth() {
     8e4:	df 93       	push	r29
     8e6:	cf 93       	push	r28
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec_(MON_REG, 4);
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	64 e0       	ldi	r22, 0x04	; 4
     8f0:	0e 94 0e 02 	call	0x41c	; 0x41c <_register_bcd_to_dec_>
}
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	08 95       	ret

000008fa <getDay>:

uint8_t getDay() {
     8fa:	df 93       	push	r29
     8fc:	cf 93       	push	r28
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	return _register_bcd_to_dec_(DAY_REG, 2);
     902:	85 e0       	ldi	r24, 0x05	; 5
     904:	62 e0       	ldi	r22, 0x02	; 2
     906:	0e 94 0e 02 	call	0x41c	; 0x41c <_register_bcd_to_dec_>
}
     90a:	cf 91       	pop	r28
     90c:	df 91       	pop	r29
     90e:	08 95       	ret

00000910 <getYear>:

uint16_t getYear() {
     910:	df 93       	push	r29
     912:	cf 93       	push	r28
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
	return 2000 + _register_bcd_to_dec(YR_REG);
     918:	86 e0       	ldi	r24, 0x06	; 6
     91a:	0e 94 4a 02 	call	0x494	; 0x494 <_register_bcd_to_dec>
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	80 53       	subi	r24, 0x30	; 48
     924:	98 4f       	sbci	r25, 0xF8	; 248
}
     926:	cf 91       	pop	r28
     928:	df 91       	pop	r29
     92a:	08 95       	ret

0000092c <seconds>:

/*** Set time ***/

void seconds(uint8_t sec) {
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	0f 92       	push	r0
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(SEC_REG, sec, 6);
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	69 81       	ldd	r22, Y+1	; 0x01
     93c:	46 e0       	ldi	r20, 0x06	; 6
     93e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_register_dec_to_bcd_>
}
     942:	0f 90       	pop	r0
     944:	cf 91       	pop	r28
     946:	df 91       	pop	r29
     948:	08 95       	ret

0000094a <minutes>:

void minutes(uint8_t min) {
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	0f 92       	push	r0
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(MIN_REG, min, 6);
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	69 81       	ldd	r22, Y+1	; 0x01
     95a:	46 e0       	ldi	r20, 0x06	; 6
     95c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_register_dec_to_bcd_>
}
     960:	0f 90       	pop	r0
     962:	cf 91       	pop	r28
     964:	df 91       	pop	r29
     966:	08 95       	ret

00000968 <hour>:

void hour(uint8_t hr) {
     968:	df 93       	push	r29
     96a:	cf 93       	push	r28
     96c:	0f 92       	push	r0
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	89 83       	std	Y+1, r24	; 0x01
	write_register(HR_REG, 0); /* set 24-hour mode */
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	0e 94 b5 03 	call	0x76a	; 0x76a <write_register>
	_register_dec_to_bcd_(HR_REG, hr, 5);
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	69 81       	ldd	r22, Y+1	; 0x01
     980:	45 e0       	ldi	r20, 0x05	; 5
     982:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_register_dec_to_bcd_>
}
     986:	0f 90       	pop	r0
     988:	cf 91       	pop	r28
     98a:	df 91       	pop	r29
     98c:	08 95       	ret

0000098e <date>:

void date(uint8_t date) {
     98e:	df 93       	push	r29
     990:	cf 93       	push	r28
     992:	0f 92       	push	r0
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(DATE_REG, date, 5);
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	69 81       	ldd	r22, Y+1	; 0x01
     99e:	45 e0       	ldi	r20, 0x05	; 5
     9a0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_register_dec_to_bcd_>
}
     9a4:	0f 90       	pop	r0
     9a6:	cf 91       	pop	r28
     9a8:	df 91       	pop	r29
     9aa:	08 95       	ret

000009ac <month>:

void month(uint8_t mon) {
     9ac:	df 93       	push	r29
     9ae:	cf 93       	push	r28
     9b0:	0f 92       	push	r0
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(MON_REG, mon, 4);
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	69 81       	ldd	r22, Y+1	; 0x01
     9bc:	44 e0       	ldi	r20, 0x04	; 4
     9be:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_register_dec_to_bcd_>
}
     9c2:	0f 90       	pop	r0
     9c4:	cf 91       	pop	r28
     9c6:	df 91       	pop	r29
     9c8:	08 95       	ret

000009ca <day>:

void day(uint8_t day) {
     9ca:	df 93       	push	r29
     9cc:	cf 93       	push	r28
     9ce:	0f 92       	push	r0
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd_(DAY_REG, day, 2);
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	69 81       	ldd	r22, Y+1	; 0x01
     9da:	42 e0       	ldi	r20, 0x02	; 2
     9dc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_register_dec_to_bcd_>
}
     9e0:	0f 90       	pop	r0
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	08 95       	ret

000009e8 <year>:

void year(uint16_t yr) {
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <year+0x6>
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	9a 83       	std	Y+2, r25	; 0x02
     9f4:	89 83       	std	Y+1, r24	; 0x01
	yr -= 2000;
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	80 5d       	subi	r24, 0xD0	; 208
     9fc:	97 40       	sbci	r25, 0x07	; 7
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	89 83       	std	Y+1, r24	; 0x01
	_register_dec_to_bcd(YR_REG, yr);
     a02:	99 81       	ldd	r25, Y+1	; 0x01
     a04:	86 e0       	ldi	r24, 0x06	; 6
     a06:	69 2f       	mov	r22, r25
     a08:	0e 94 aa 02 	call	0x554	; 0x554 <_register_dec_to_bcd>
}
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	08 95       	ret

00000a16 <addMinutes>:

void addMinutes(uint8_t mins) {
     a16:	df 93       	push	r29
     a18:	cf 93       	push	r28
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <addMinutes+0x6>
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t newMinutes = getMinutes() + mins;
     a22:	0e 94 12 04 	call	0x824	; 0x824 <getMinutes>
     a26:	98 2f       	mov	r25, r24
     a28:	8a 81       	ldd	r24, Y+2	; 0x02
     a2a:	89 0f       	add	r24, r25
     a2c:	89 83       	std	Y+1, r24	; 0x01
	if (newMinutes > 59)
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	8c 33       	cpi	r24, 0x3C	; 60
     a32:	18 f0       	brcs	.+6      	; 0xa3a <addMinutes+0x24>
		newMinutes -= 60;
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	8c 53       	subi	r24, 0x3C	; 60
     a38:	89 83       	std	Y+1, r24	; 0x01
	minutes(newMinutes);
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	0e 94 a5 04 	call	0x94a	; 0x94a <minutes>
}
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	08 95       	ret

00000a4a <addHours>:

void addHours(uint8_t hours) {
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <addHours+0x6>
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t newHours = getHour() + hours;
     a56:	0e 94 1c 04 	call	0x838	; 0x838 <getHour>
     a5a:	98 2f       	mov	r25, r24
     a5c:	8a 81       	ldd	r24, Y+2	; 0x02
     a5e:	89 0f       	add	r24, r25
     a60:	89 83       	std	Y+1, r24	; 0x01
	if (newHours > 23)
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	88 31       	cpi	r24, 0x18	; 24
     a66:	18 f0       	brcs	.+6      	; 0xa6e <addHours+0x24>
		newHours -= 24;
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	88 51       	subi	r24, 0x18	; 24
     a6c:	89 83       	std	Y+1, r24	; 0x01
	hour(newHours);
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	0e 94 b4 04 	call	0x968	; 0x968 <hour>
}
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	cf 91       	pop	r28
     a7a:	df 91       	pop	r29
     a7c:	08 95       	ret

00000a7e <initOutput>:
#include <avr/io.h>
#include "macro.h"
#include "display.h"

void initOutput() {
     a7e:	df 93       	push	r29
     a80:	cf 93       	push	r28
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
	SHIFTREG_ENABLE_OUTPUTS;
     a86:	aa e2       	ldi	r26, 0x2A	; 42
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	ea e2       	ldi	r30, 0x2A	; 42
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	88 63       	ori	r24, 0x38	; 56
     a92:	8c 93       	st	X, r24
}
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	08 95       	ret

00000a9a <setRegisters>:

void setRegisters(char word) {
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <setRegisters+0x6>
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <setRegisters+0x8>
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	8c 83       	std	Y+4, r24	; 0x04
	for (int i = 0; i < 8; i++) {
     aa8:	1b 82       	std	Y+3, r1	; 0x03
     aaa:	1a 82       	std	Y+2, r1	; 0x02
     aac:	2f c0       	rjmp	.+94     	; 0xb0c <setRegisters+0x72>
		SHIFTREG_CLK_0;
     aae:	ab e2       	ldi	r26, 0x2B	; 43
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	eb e2       	ldi	r30, 0x2B	; 43
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	8f 7d       	andi	r24, 0xDF	; 223
     aba:	8c 93       	st	X, r24
		char data = word << i;
     abc:	8c 81       	ldd	r24, Y+4	; 0x04
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0a 80       	ldd	r0, Y+2	; 0x02
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <setRegisters+0x30>
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	0a 94       	dec	r0
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <setRegisters+0x2c>
     ace:	89 83       	std	Y+1, r24	; 0x01
		if (data & 0x80) {
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	88 23       	and	r24, r24
     ad4:	44 f4       	brge	.+16     	; 0xae6 <setRegisters+0x4c>
			SHIFTREG_DATA_1;
     ad6:	ab e2       	ldi	r26, 0x2B	; 43
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	eb e2       	ldi	r30, 0x2B	; 43
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	88 60       	ori	r24, 0x08	; 8
     ae2:	8c 93       	st	X, r24
     ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <setRegisters+0x5a>
		} else {
			SHIFTREG_DATA_0;
     ae6:	ab e2       	ldi	r26, 0x2B	; 43
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	eb e2       	ldi	r30, 0x2B	; 43
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	87 7f       	andi	r24, 0xF7	; 247
     af2:	8c 93       	st	X, r24
		}
		SHIFTREG_CLK_1;
     af4:	ab e2       	ldi	r26, 0x2B	; 43
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	eb e2       	ldi	r30, 0x2B	; 43
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	80 62       	ori	r24, 0x20	; 32
     b00:	8c 93       	st	X, r24
void initOutput() {
	SHIFTREG_ENABLE_OUTPUTS;
}

void setRegisters(char word) {
	for (int i = 0; i < 8; i++) {
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	9b 81       	ldd	r25, Y+3	; 0x03
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	9b 83       	std	Y+3, r25	; 0x03
     b0a:	8a 83       	std	Y+2, r24	; 0x02
     b0c:	8a 81       	ldd	r24, Y+2	; 0x02
     b0e:	9b 81       	ldd	r25, Y+3	; 0x03
     b10:	88 30       	cpi	r24, 0x08	; 8
     b12:	91 05       	cpc	r25, r1
     b14:	64 f2       	brlt	.-104    	; 0xaae <setRegisters+0x14>
		} else {
			SHIFTREG_DATA_0;
		}
		SHIFTREG_CLK_1;
	}
}
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	08 95       	ret

00000b24 <setTime>:

void setTime(char reg1, char reg2, char reg3) {
     b24:	df 93       	push	r29
     b26:	cf 93       	push	r28
     b28:	00 d0       	rcall	.+0      	; 0xb2a <setTime+0x6>
     b2a:	0f 92       	push	r0
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	6a 83       	std	Y+2, r22	; 0x02
     b34:	4b 83       	std	Y+3, r20	; 0x03
	SHIFTREG_STRB_0;
     b36:	ab e2       	ldi	r26, 0x2B	; 43
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	eb e2       	ldi	r30, 0x2B	; 43
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	8f 7e       	andi	r24, 0xEF	; 239
     b42:	8c 93       	st	X, r24
	setRegisters(reg3);
     b44:	8b 81       	ldd	r24, Y+3	; 0x03
     b46:	0e 94 4d 05 	call	0xa9a	; 0xa9a <setRegisters>
	setRegisters(reg2);
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <setRegisters>
	setRegisters(reg1);
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	0e 94 4d 05 	call	0xa9a	; 0xa9a <setRegisters>
	SHIFTREG_STRB_1;
     b56:	ab e2       	ldi	r26, 0x2B	; 43
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	80 61       	ori	r24, 0x10	; 16
     b62:	8c 93       	st	X, r24
}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <initDebug>:
#include "display.h"
#include "DS1302.h"
#include  "uart.h"
#include  "macro.h"

void initDebug() {
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	uart_init();
     b78:	0e 94 ef 18 	call	0x31de	; 0x31de <uart_init>
	stdout= &uart_output;
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	90 93 28 01 	sts	0x0128, r25
     b84:	80 93 27 01 	sts	0x0127, r24
	stdin= &uart_input;
     b88:	8e e0       	ldi	r24, 0x0E	; 14
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	90 93 26 01 	sts	0x0126, r25
     b90:	80 93 25 01 	sts	0x0125, r24
}
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <initTimeInput>:

void initTimeInput() {
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1 << DDD6);
     ba2:	aa e2       	ldi	r26, 0x2A	; 42
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	ea e2       	ldi	r30, 0x2A	; 42
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7b       	andi	r24, 0xBF	; 191
     bae:	8c 93       	st	X, r24
	DDRD &= ~(1 << DDD7);
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	8c 93       	st	X, r24

	PORTD |= (1 << PORTD6);
     bbe:	ab e2       	ldi	r26, 0x2B	; 43
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 64       	ori	r24, 0x40	; 64
     bca:	8c 93       	st	X, r24
	PORTD |= (1 << PORTD7);
     bcc:	ab e2       	ldi	r26, 0x2B	; 43
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	eb e2       	ldi	r30, 0x2B	; 43
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 68       	ori	r24, 0x80	; 128
     bd8:	8c 93       	st	X, r24

	PCICR |= (1 << PCIE2);     // set PCIE0 to enable PCMSK0 scan
     bda:	a8 e6       	ldi	r26, 0x68	; 104
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e8 e6       	ldi	r30, 0x68	; 104
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	84 60       	ori	r24, 0x04	; 4
     be6:	8c 93       	st	X, r24
	PCMSK2 |= (1 << PCINT22);   // set PCINT0 to trigger an interrupt on state change
     be8:	ad e6       	ldi	r26, 0x6D	; 109
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ed e6       	ldi	r30, 0x6D	; 109
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	8c 93       	st	X, r24
	PCMSK2 |= (1 << PCINT23);   // set PCINT0 to trigger an interrupt on state change
     bf6:	ad e6       	ldi	r26, 0x6D	; 109
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ed e6       	ldi	r30, 0x6D	; 109
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24

	sei();
     c04:	78 94       	sei
}
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <debounce>:

uint8_t debounce(volatile uint8_t *port, uint8_t pin) {
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	ec 97       	sbiw	r28, 0x3c	; 60
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	9a af       	std	Y+58, r25	; 0x3a
     c22:	89 af       	std	Y+57, r24	; 0x39
     c24:	6b af       	std	Y+59, r22	; 0x3b
	if (!(*port & (1 << pin))) {
     c26:	e9 ad       	ldd	r30, Y+57	; 0x39
     c28:	fa ad       	ldd	r31, Y+58	; 0x3a
     c2a:	80 81       	ld	r24, Z
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	8b ad       	ldd	r24, Y+59	; 0x3b
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	a9 01       	movw	r20, r18
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <debounce+0x32>
     c3a:	55 95       	asr	r21
     c3c:	47 95       	ror	r20
     c3e:	8a 95       	dec	r24
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <debounce+0x2e>
     c42:	ca 01       	movw	r24, r20
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	90 70       	andi	r25, 0x00	; 0
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	09 f0       	breq	.+2      	; 0xc4e <debounce+0x42>
     c4c:	df c1       	rjmp	.+958    	; 0x100c <debounce+0x400>
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	a0 e2       	ldi	r26, 0x20	; 32
     c54:	b1 e4       	ldi	r27, 0x41	; 65
     c56:	8d ab       	std	Y+53, r24	; 0x35
     c58:	9e ab       	std	Y+54, r25	; 0x36
     c5a:	af ab       	std	Y+55, r26	; 0x37
     c5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c5e:	6d a9       	ldd	r22, Y+53	; 0x35
     c60:	7e a9       	ldd	r23, Y+54	; 0x36
     c62:	8f a9       	ldd	r24, Y+55	; 0x37
     c64:	98 ad       	ldd	r25, Y+56	; 0x38
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	4a e7       	ldi	r20, 0x7A	; 122
     c6c:	55 e4       	ldi	r21, 0x45	; 69
     c6e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	89 ab       	std	Y+49, r24	; 0x31
     c78:	9a ab       	std	Y+50, r25	; 0x32
     c7a:	ab ab       	std	Y+51, r26	; 0x33
     c7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c7e:	69 a9       	ldd	r22, Y+49	; 0x31
     c80:	7a a9       	ldd	r23, Y+50	; 0x32
     c82:	8b a9       	ldd	r24, Y+51	; 0x33
     c84:	9c a9       	ldd	r25, Y+52	; 0x34
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	5f e3       	ldi	r21, 0x3F	; 63
     c8e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
     c92:	88 23       	and	r24, r24
     c94:	2c f4       	brge	.+10     	; 0xca0 <debounce+0x94>
		__ticks = 1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	98 ab       	std	Y+48, r25	; 0x30
     c9c:	8f a7       	std	Y+47, r24	; 0x2f
     c9e:	3f c0       	rjmp	.+126    	; 0xd1e <debounce+0x112>
	else if (__tmp > 65535)
     ca0:	69 a9       	ldd	r22, Y+49	; 0x31
     ca2:	7a a9       	ldd	r23, Y+50	; 0x32
     ca4:	8b a9       	ldd	r24, Y+51	; 0x33
     ca6:	9c a9       	ldd	r25, Y+52	; 0x34
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	3f ef       	ldi	r19, 0xFF	; 255
     cac:	4f e7       	ldi	r20, 0x7F	; 127
     cae:	57 e4       	ldi	r21, 0x47	; 71
     cb0:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	4c f5       	brge	.+82     	; 0xd0a <debounce+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb8:	6d a9       	ldd	r22, Y+53	; 0x35
     cba:	7e a9       	ldd	r23, Y+54	; 0x36
     cbc:	8f a9       	ldd	r24, Y+55	; 0x37
     cbe:	98 ad       	ldd	r25, Y+56	; 0x38
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e2       	ldi	r20, 0x20	; 32
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	bc 01       	movw	r22, r24
     cd2:	cd 01       	movw	r24, r26
     cd4:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	98 ab       	std	Y+48, r25	; 0x30
     cde:	8f a7       	std	Y+47, r24	; 0x2f
     ce0:	0f c0       	rjmp	.+30     	; 0xd00 <debounce+0xf4>
     ce2:	80 e9       	ldi	r24, 0x90	; 144
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	9e a7       	std	Y+46, r25	; 0x2e
     ce8:	8d a7       	std	Y+45, r24	; 0x2d
     cea:	8d a5       	ldd	r24, Y+45	; 0x2d
     cec:	9e a5       	ldd	r25, Y+46	; 0x2e
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <debounce+0xe2>
     cf2:	9e a7       	std	Y+46, r25	; 0x2e
     cf4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf6:	8f a5       	ldd	r24, Y+47	; 0x2f
     cf8:	98 a9       	ldd	r25, Y+48	; 0x30
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	98 ab       	std	Y+48, r25	; 0x30
     cfe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d00:	8f a5       	ldd	r24, Y+47	; 0x2f
     d02:	98 a9       	ldd	r25, Y+48	; 0x30
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	69 f7       	brne	.-38     	; 0xce2 <debounce+0xd6>
     d08:	14 c0       	rjmp	.+40     	; 0xd32 <debounce+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0a:	69 a9       	ldd	r22, Y+49	; 0x31
     d0c:	7a a9       	ldd	r23, Y+50	; 0x32
     d0e:	8b a9       	ldd	r24, Y+51	; 0x33
     d10:	9c a9       	ldd	r25, Y+52	; 0x34
     d12:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	98 ab       	std	Y+48, r25	; 0x30
     d1c:	8f a7       	std	Y+47, r24	; 0x2f
     d1e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d20:	98 a9       	ldd	r25, Y+48	; 0x30
     d22:	9c a7       	std	Y+44, r25	; 0x2c
     d24:	8b a7       	std	Y+43, r24	; 0x2b
     d26:	8b a5       	ldd	r24, Y+43	; 0x2b
     d28:	9c a5       	ldd	r25, Y+44	; 0x2c
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <debounce+0x11e>
     d2e:	9c a7       	std	Y+44, r25	; 0x2c
     d30:	8b a7       	std	Y+43, r24	; 0x2b
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e2       	ldi	r26, 0x20	; 32
     d38:	b1 e4       	ldi	r27, 0x41	; 65
     d3a:	8f a3       	std	Y+39, r24	; 0x27
     d3c:	98 a7       	std	Y+40, r25	; 0x28
     d3e:	a9 a7       	std	Y+41, r26	; 0x29
     d40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d42:	6f a1       	ldd	r22, Y+39	; 0x27
     d44:	78 a5       	ldd	r23, Y+40	; 0x28
     d46:	89 a5       	ldd	r24, Y+41	; 0x29
     d48:	9a a5       	ldd	r25, Y+42	; 0x2a
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	4a e7       	ldi	r20, 0x7A	; 122
     d50:	55 e4       	ldi	r21, 0x45	; 69
     d52:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	8b a3       	std	Y+35, r24	; 0x23
     d5c:	9c a3       	std	Y+36, r25	; 0x24
     d5e:	ad a3       	std	Y+37, r26	; 0x25
     d60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d62:	6b a1       	ldd	r22, Y+35	; 0x23
     d64:	7c a1       	ldd	r23, Y+36	; 0x24
     d66:	8d a1       	ldd	r24, Y+37	; 0x25
     d68:	9e a1       	ldd	r25, Y+38	; 0x26
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	40 e8       	ldi	r20, 0x80	; 128
     d70:	5f e3       	ldi	r21, 0x3F	; 63
     d72:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
     d76:	88 23       	and	r24, r24
     d78:	2c f4       	brge	.+10     	; 0xd84 <debounce+0x178>
		__ticks = 1;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9a a3       	std	Y+34, r25	; 0x22
     d80:	89 a3       	std	Y+33, r24	; 0x21
     d82:	3f c0       	rjmp	.+126    	; 0xe02 <debounce+0x1f6>
	else if (__tmp > 65535)
     d84:	6b a1       	ldd	r22, Y+35	; 0x23
     d86:	7c a1       	ldd	r23, Y+36	; 0x24
     d88:	8d a1       	ldd	r24, Y+37	; 0x25
     d8a:	9e a1       	ldd	r25, Y+38	; 0x26
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	3f ef       	ldi	r19, 0xFF	; 255
     d90:	4f e7       	ldi	r20, 0x7F	; 127
     d92:	57 e4       	ldi	r21, 0x47	; 71
     d94:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
     d98:	18 16       	cp	r1, r24
     d9a:	4c f5       	brge	.+82     	; 0xdee <debounce+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9c:	6f a1       	ldd	r22, Y+39	; 0x27
     d9e:	78 a5       	ldd	r23, Y+40	; 0x28
     da0:	89 a5       	ldd	r24, Y+41	; 0x29
     da2:	9a a5       	ldd	r25, Y+42	; 0x2a
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e2       	ldi	r20, 0x20	; 32
     daa:	51 e4       	ldi	r21, 0x41	; 65
     dac:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	9a a3       	std	Y+34, r25	; 0x22
     dc2:	89 a3       	std	Y+33, r24	; 0x21
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <debounce+0x1d8>
     dc6:	80 e9       	ldi	r24, 0x90	; 144
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	98 a3       	std	Y+32, r25	; 0x20
     dcc:	8f 8f       	std	Y+31, r24	; 0x1f
     dce:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dd0:	98 a1       	ldd	r25, Y+32	; 0x20
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <debounce+0x1c6>
     dd6:	98 a3       	std	Y+32, r25	; 0x20
     dd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dda:	89 a1       	ldd	r24, Y+33	; 0x21
     ddc:	9a a1       	ldd	r25, Y+34	; 0x22
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	9a a3       	std	Y+34, r25	; 0x22
     de2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de4:	89 a1       	ldd	r24, Y+33	; 0x21
     de6:	9a a1       	ldd	r25, Y+34	; 0x22
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	69 f7       	brne	.-38     	; 0xdc6 <debounce+0x1ba>
     dec:	14 c0       	rjmp	.+40     	; 0xe16 <debounce+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dee:	6b a1       	ldd	r22, Y+35	; 0x23
     df0:	7c a1       	ldd	r23, Y+36	; 0x24
     df2:	8d a1       	ldd	r24, Y+37	; 0x25
     df4:	9e a1       	ldd	r25, Y+38	; 0x26
     df6:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	9a a3       	std	Y+34, r25	; 0x22
     e00:	89 a3       	std	Y+33, r24	; 0x21
     e02:	89 a1       	ldd	r24, Y+33	; 0x21
     e04:	9a a1       	ldd	r25, Y+34	; 0x22
     e06:	9e 8f       	std	Y+30, r25	; 0x1e
     e08:	8d 8f       	std	Y+29, r24	; 0x1d
     e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <debounce+0x202>
     e12:	9e 8f       	std	Y+30, r25	; 0x1e
     e14:	8d 8f       	std	Y+29, r24	; 0x1d
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(10);   // Maximalwert des Parameters an _delay_ms
		_delay_ms(10);   // beachten, vgl. Dokumentation der avr-libc
		if (*port & (1 << pin)) {
     e16:	e9 ad       	ldd	r30, Y+57	; 0x39
     e18:	fa ad       	ldd	r31, Y+58	; 0x3a
     e1a:	80 81       	ld	r24, Z
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	8b ad       	ldd	r24, Y+59	; 0x3b
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a9 01       	movw	r20, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <debounce+0x222>
     e2a:	55 95       	asr	r21
     e2c:	47 95       	ror	r20
     e2e:	8a 95       	dec	r24
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <debounce+0x21e>
     e32:	ca 01       	movw	r24, r20
     e34:	81 70       	andi	r24, 0x01	; 1
     e36:	90 70       	andi	r25, 0x00	; 0
     e38:	88 23       	and	r24, r24
     e3a:	09 f4       	brne	.+2      	; 0xe3e <debounce+0x232>
     e3c:	e7 c0       	rjmp	.+462    	; 0x100c <debounce+0x400>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a0 e2       	ldi	r26, 0x20	; 32
     e44:	b1 e4       	ldi	r27, 0x41	; 65
     e46:	89 8f       	std	Y+25, r24	; 0x19
     e48:	9a 8f       	std	Y+26, r25	; 0x1a
     e4a:	ab 8f       	std	Y+27, r26	; 0x1b
     e4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	69 8d       	ldd	r22, Y+25	; 0x19
     e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4a e7       	ldi	r20, 0x7A	; 122
     e5c:	55 e4       	ldi	r21, 0x45	; 69
     e5e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	8d 8b       	std	Y+21, r24	; 0x15
     e68:	9e 8b       	std	Y+22, r25	; 0x16
     e6a:	af 8b       	std	Y+23, r26	; 0x17
     e6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e6e:	6d 89       	ldd	r22, Y+21	; 0x15
     e70:	7e 89       	ldd	r23, Y+22	; 0x16
     e72:	8f 89       	ldd	r24, Y+23	; 0x17
     e74:	98 8d       	ldd	r25, Y+24	; 0x18
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e8       	ldi	r20, 0x80	; 128
     e7c:	5f e3       	ldi	r21, 0x3F	; 63
     e7e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
     e82:	88 23       	and	r24, r24
     e84:	2c f4       	brge	.+10     	; 0xe90 <debounce+0x284>
		__ticks = 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	9c 8b       	std	Y+20, r25	; 0x14
     e8c:	8b 8b       	std	Y+19, r24	; 0x13
     e8e:	3f c0       	rjmp	.+126    	; 0xf0e <debounce+0x302>
	else if (__tmp > 65535)
     e90:	6d 89       	ldd	r22, Y+21	; 0x15
     e92:	7e 89       	ldd	r23, Y+22	; 0x16
     e94:	8f 89       	ldd	r24, Y+23	; 0x17
     e96:	98 8d       	ldd	r25, Y+24	; 0x18
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	3f ef       	ldi	r19, 0xFF	; 255
     e9c:	4f e7       	ldi	r20, 0x7F	; 127
     e9e:	57 e4       	ldi	r21, 0x47	; 71
     ea0:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
     ea4:	18 16       	cp	r1, r24
     ea6:	4c f5       	brge	.+82     	; 0xefa <debounce+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea8:	69 8d       	ldd	r22, Y+25	; 0x19
     eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e2       	ldi	r20, 0x20	; 32
     eb6:	51 e4       	ldi	r21, 0x41	; 65
     eb8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9c 8b       	std	Y+20, r25	; 0x14
     ece:	8b 8b       	std	Y+19, r24	; 0x13
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <debounce+0x2e4>
     ed2:	80 e9       	ldi	r24, 0x90	; 144
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	9a 8b       	std	Y+18, r25	; 0x12
     ed8:	89 8b       	std	Y+17, r24	; 0x11
     eda:	89 89       	ldd	r24, Y+17	; 0x11
     edc:	9a 89       	ldd	r25, Y+18	; 0x12
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <debounce+0x2d2>
     ee2:	9a 8b       	std	Y+18, r25	; 0x12
     ee4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee6:	8b 89       	ldd	r24, Y+19	; 0x13
     ee8:	9c 89       	ldd	r25, Y+20	; 0x14
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	9c 8b       	std	Y+20, r25	; 0x14
     eee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef0:	8b 89       	ldd	r24, Y+19	; 0x13
     ef2:	9c 89       	ldd	r25, Y+20	; 0x14
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	69 f7       	brne	.-38     	; 0xed2 <debounce+0x2c6>
     ef8:	14 c0       	rjmp	.+40     	; 0xf22 <debounce+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efa:	6d 89       	ldd	r22, Y+21	; 0x15
     efc:	7e 89       	ldd	r23, Y+22	; 0x16
     efe:	8f 89       	ldd	r24, Y+23	; 0x17
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	9c 8b       	std	Y+20, r25	; 0x14
     f0c:	8b 8b       	std	Y+19, r24	; 0x13
     f0e:	8b 89       	ldd	r24, Y+19	; 0x13
     f10:	9c 89       	ldd	r25, Y+20	; 0x14
     f12:	98 8b       	std	Y+16, r25	; 0x10
     f14:	8f 87       	std	Y+15, r24	; 0x0f
     f16:	8f 85       	ldd	r24, Y+15	; 0x0f
     f18:	98 89       	ldd	r25, Y+16	; 0x10
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <debounce+0x30e>
     f1e:	98 8b       	std	Y+16, r25	; 0x10
     f20:	8f 87       	std	Y+15, r24	; 0x0f
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	a0 e2       	ldi	r26, 0x20	; 32
     f28:	b1 e4       	ldi	r27, 0x41	; 65
     f2a:	8b 87       	std	Y+11, r24	; 0x0b
     f2c:	9c 87       	std	Y+12, r25	; 0x0c
     f2e:	ad 87       	std	Y+13, r26	; 0x0d
     f30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f32:	6b 85       	ldd	r22, Y+11	; 0x0b
     f34:	7c 85       	ldd	r23, Y+12	; 0x0c
     f36:	8d 85       	ldd	r24, Y+13	; 0x0d
     f38:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	4a e7       	ldi	r20, 0x7A	; 122
     f40:	55 e4       	ldi	r21, 0x45	; 69
     f42:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	8f 83       	std	Y+7, r24	; 0x07
     f4c:	98 87       	std	Y+8, r25	; 0x08
     f4e:	a9 87       	std	Y+9, r26	; 0x09
     f50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f52:	6f 81       	ldd	r22, Y+7	; 0x07
     f54:	78 85       	ldd	r23, Y+8	; 0x08
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e8       	ldi	r20, 0x80	; 128
     f60:	5f e3       	ldi	r21, 0x3F	; 63
     f62:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
     f66:	88 23       	and	r24, r24
     f68:	2c f4       	brge	.+10     	; 0xf74 <debounce+0x368>
		__ticks = 1;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	9e 83       	std	Y+6, r25	; 0x06
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	3f c0       	rjmp	.+126    	; 0xff2 <debounce+0x3e6>
	else if (__tmp > 65535)
     f74:	6f 81       	ldd	r22, Y+7	; 0x07
     f76:	78 85       	ldd	r23, Y+8	; 0x08
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	3f ef       	ldi	r19, 0xFF	; 255
     f80:	4f e7       	ldi	r20, 0x7F	; 127
     f82:	57 e4       	ldi	r21, 0x47	; 71
     f84:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
     f88:	18 16       	cp	r1, r24
     f8a:	4c f5       	brge	.+82     	; 0xfde <debounce+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f90:	8d 85       	ldd	r24, Y+13	; 0x0d
     f92:	9e 85       	ldd	r25, Y+14	; 0x0e
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e2       	ldi	r20, 0x20	; 32
     f9a:	51 e4       	ldi	r21, 0x41	; 65
     f9c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	0f c0       	rjmp	.+30     	; 0xfd4 <debounce+0x3c8>
     fb6:	80 e9       	ldi	r24, 0x90	; 144
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	8b 83       	std	Y+3, r24	; 0x03
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <debounce+0x3b6>
     fc6:	9c 83       	std	Y+4, r25	; 0x04
     fc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	9e 83       	std	Y+6, r25	; 0x06
     fd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	9e 81       	ldd	r25, Y+6	; 0x06
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	69 f7       	brne	.-38     	; 0xfb6 <debounce+0x3aa>
     fdc:	14 c0       	rjmp	.+40     	; 0x1006 <debounce+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fde:	6f 81       	ldd	r22, Y+7	; 0x07
     fe0:	78 85       	ldd	r23, Y+8	; 0x08
     fe2:	89 85       	ldd	r24, Y+9	; 0x09
     fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe6:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	8d 83       	std	Y+5, r24	; 0x05
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	9e 81       	ldd	r25, Y+6	; 0x06
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <debounce+0x3f2>
    1002:	9a 83       	std	Y+2, r25	; 0x02
    1004:	89 83       	std	Y+1, r24	; 0x01
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_ms(10);
			_delay_ms(10);
			return 1;
    1006:	51 e0       	ldi	r21, 0x01	; 1
    1008:	5c af       	std	Y+60, r21	; 0x3c
    100a:	01 c0       	rjmp	.+2      	; 0x100e <debounce+0x402>
		}
	}
	return 0;
    100c:	1c ae       	std	Y+60, r1	; 0x3c
    100e:	8c ad       	ldd	r24, Y+60	; 0x3c
}
    1010:	ec 96       	adiw	r28, 0x3c	; 60
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <taster>:

char taster(void) {
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	static unsigned char zustand;
	char rw = 0;
    102c:	19 82       	std	Y+1, r1	; 0x01

	if (zustand == 0 && !(PIND & (1 << PD6)))   //Taster wird gedrueckt (steigende Flanke)
    102e:	80 91 24 01 	lds	r24, 0x0124
    1032:	88 23       	and	r24, r24
    1034:	79 f4       	brne	.+30     	; 0x1054 <taster+0x32>
    1036:	e9 e2       	ldi	r30, 0x29	; 41
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	80 74       	andi	r24, 0x40	; 64
    1042:	90 70       	andi	r25, 0x00	; 0
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	31 f4       	brne	.+12     	; 0x1054 <taster+0x32>
			{
		zustand = 1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	80 93 24 01 	sts	0x0124, r24
		rw = 1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	34 c0       	rjmp	.+104    	; 0x10bc <taster+0x9a>
	} else if (zustand == 1 && !(PIND & (1 << PD6)))   //Taster wird gehalten
    1054:	80 91 24 01 	lds	r24, 0x0124
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	71 f4       	brne	.+28     	; 0x1078 <taster+0x56>
    105c:	e9 e2       	ldi	r30, 0x29	; 41
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	80 74       	andi	r24, 0x40	; 64
    1068:	90 70       	andi	r25, 0x00	; 0
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	29 f4       	brne	.+10     	; 0x1078 <taster+0x56>
			{
		zustand = 2;
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	80 93 24 01 	sts	0x0124, r24
		rw = 0;
    1074:	19 82       	std	Y+1, r1	; 0x01
    1076:	22 c0       	rjmp	.+68     	; 0x10bc <taster+0x9a>
	} else if (zustand == 2 && (PIND & (1 << PD6)))   //Taster wird losgelassen (fallende Flanke)
    1078:	80 91 24 01 	lds	r24, 0x0124
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	71 f4       	brne	.+28     	; 0x109c <taster+0x7a>
    1080:	e9 e2       	ldi	r30, 0x29	; 41
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	80 74       	andi	r24, 0x40	; 64
    108c:	90 70       	andi	r25, 0x00	; 0
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	29 f0       	breq	.+10     	; 0x109c <taster+0x7a>
			{
		zustand = 3;
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	80 93 24 01 	sts	0x0124, r24
		rw = 0;
    1098:	19 82       	std	Y+1, r1	; 0x01
    109a:	10 c0       	rjmp	.+32     	; 0x10bc <taster+0x9a>
	} else if (zustand == 3 && (PIND & (1 << PD6)))   //Taster losgelassen
    109c:	80 91 24 01 	lds	r24, 0x0124
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	61 f4       	brne	.+24     	; 0x10bc <taster+0x9a>
    10a4:	e9 e2       	ldi	r30, 0x29	; 41
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	80 74       	andi	r24, 0x40	; 64
    10b0:	90 70       	andi	r25, 0x00	; 0
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	19 f0       	breq	.+6      	; 0x10bc <taster+0x9a>
			{
		zustand = 0;
    10b6:	10 92 24 01 	sts	0x0124, r1
		rw = 0;
    10ba:	19 82       	std	Y+1, r1	; 0x01
	}

	return rw;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <__vector_5>:

ISR (PCINT2_vect) {
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	2f 93       	push	r18
    10d2:	3f 93       	push	r19
    10d4:	4f 93       	push	r20
    10d6:	5f 93       	push	r21
    10d8:	6f 93       	push	r22
    10da:	7f 93       	push	r23
    10dc:	8f 93       	push	r24
    10de:	9f 93       	push	r25
    10e0:	af 93       	push	r26
    10e2:	bf 93       	push	r27
    10e4:	ef 93       	push	r30
    10e6:	ff 93       	push	r31
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	if (taster()) {
    10f0:	0e 94 11 08 	call	0x1022	; 0x1022 <taster>
    10f4:	88 23       	and	r24, r24
    10f6:	59 f0       	breq	.+22     	; 0x110e <__vector_5+0x48>
		addMinutes(1);
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	0e 94 0b 05 	call	0xa16	; 0xa16 <addMinutes>
		SET(PORTC, PC5);
    10fe:	a8 e2       	ldi	r26, 0x28	; 40
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e8 e2       	ldi	r30, 0x28	; 40
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 62       	ori	r24, 0x20	; 32
    110a:	8c 93       	st	X, r24
    110c:	07 c0       	rjmp	.+14     	; 0x111c <__vector_5+0x56>
	} else {
		CLR(PORTC, PC5);
    110e:	a8 e2       	ldi	r26, 0x28	; 40
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e8 e2       	ldi	r30, 0x28	; 40
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 7d       	andi	r24, 0xDF	; 223
    111a:	8c 93       	st	X, r24
	}
//	if (debounce(&PIND, PD7)) {
//		addHours(1);
//	}
	// printf("int: %x", PORTD);
}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <setUp>:

void setUp() {
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
	SET(DDRC, DDC5);
    114a:	a7 e2       	ldi	r26, 0x27	; 39
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e7 e2       	ldi	r30, 0x27	; 39
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 62       	ori	r24, 0x20	; 32
    1156:	8c 93       	st	X, r24
	SET(PORTC, PC5);
    1158:	a8 e2       	ldi	r26, 0x28	; 40
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e8 e2       	ldi	r30, 0x28	; 40
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 62       	ori	r24, 0x20	; 32
    1164:	8c 93       	st	X, r24

	initOutput();
    1166:	0e 94 3f 05 	call	0xa7e	; 0xa7e <initOutput>
//	initDebug();
	initClock();
    116a:	0e 94 53 00 	call	0xa6	; 0xa6 <initClock>
//	initTimeInput();
}
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <correctHour>:

uint8_t correctHour(uint8_t min, uint8_t hour) {
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <correctHour+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <correctHour+0x8>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t correctedHour = hour;
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	8a 83       	std	Y+2, r24	; 0x02
	bool nextHour = (min >= 25);
    1188:	19 82       	std	Y+1, r1	; 0x01
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	89 31       	cpi	r24, 0x19	; 25
    118e:	10 f0       	brcs	.+4      	; 0x1194 <correctHour+0x20>
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
	if (nextHour) {
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 23       	and	r24, r24
    1198:	51 f0       	breq	.+20     	; 0x11ae <correctHour+0x3a>
		correctedHour = (hour + 1) % 24;
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	28 e1       	ldi	r18, 0x18	; 24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	b9 01       	movw	r22, r18
    11a8:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__divmodhi4>
    11ac:	8a 83       	std	Y+2, r24	; 0x02
	}
	if (correctedHour == 0) {
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	88 23       	and	r24, r24
    11b2:	19 f4       	brne	.+6      	; 0x11ba <correctHour+0x46>
		hour = 12;
    11b4:	8c e0       	ldi	r24, 0x0C	; 12
    11b6:	8c 83       	std	Y+4, r24	; 0x04
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <correctHour+0x52>
	} else if (correctedHour > 12) {
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	8d 30       	cpi	r24, 0x0D	; 13
    11be:	18 f0       	brcs	.+6      	; 0x11c6 <correctHour+0x52>
		correctedHour -= 12;
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	8c 50       	subi	r24, 0x0C	; 12
    11c4:	8a 83       	std	Y+2, r24	; 0x02
	}

	return correctedHour;
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <between>:

int between(uint8_t min, uint8_t loBound, uint8_t hiBound) {
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <between+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <between+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    11e8:	4b 83       	std	Y+3, r20	; 0x03
	return min >= loBound && min < hiBound;
    11ea:	99 81       	ldd	r25, Y+1	; 0x01
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	98 17       	cp	r25, r24
    11f0:	48 f0       	brcs	.+18     	; 0x1204 <between+0x2e>
    11f2:	99 81       	ldd	r25, Y+1	; 0x01
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	98 17       	cp	r25, r24
    11f8:	28 f4       	brcc	.+10     	; 0x1204 <between+0x2e>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9d 83       	std	Y+5, r25	; 0x05
    1200:	8c 83       	std	Y+4, r24	; 0x04
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <between+0x32>
    1204:	1d 82       	std	Y+5, r1	; 0x05
    1206:	1c 82       	std	Y+4, r1	; 0x04
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <displayCurrentTime>:

void displayCurrentTime() {
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	27 97       	sbiw	r28, 0x07	; 7
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
	uint8_t reg1 = 0;
    1230:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t reg2 = 0;
    1232:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t reg3 = D3_ITIS;
    1234:	80 e4       	ldi	r24, 0x40	; 64
    1236:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t min = getMinutes();
    1238:	0e 94 12 04 	call	0x824	; 0x824 <getMinutes>
    123c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t hour = correctHour(min, getHour());
    123e:	0e 94 1c 04 	call	0x838	; 0x838 <getHour>
    1242:	98 2f       	mov	r25, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	69 2f       	mov	r22, r25
    1248:	0e 94 ba 08 	call	0x1174	; 0x1174 <correctHour>
    124c:	89 83       	std	Y+1, r24	; 0x01
	switch (hour) {
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3f 83       	std	Y+7, r19	; 0x07
    1256:	2e 83       	std	Y+6, r18	; 0x06
    1258:	8e 81       	ldd	r24, Y+6	; 0x06
    125a:	9f 81       	ldd	r25, Y+7	; 0x07
    125c:	86 30       	cpi	r24, 0x06	; 6
    125e:	91 05       	cpc	r25, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <displayCurrentTime+0x48>
    1262:	60 c0       	rjmp	.+192    	; 0x1324 <displayCurrentTime+0x108>
    1264:	2e 81       	ldd	r18, Y+6	; 0x06
    1266:	3f 81       	ldd	r19, Y+7	; 0x07
    1268:	27 30       	cpi	r18, 0x07	; 7
    126a:	31 05       	cpc	r19, r1
    126c:	0c f5       	brge	.+66     	; 0x12b0 <displayCurrentTime+0x94>
    126e:	8e 81       	ldd	r24, Y+6	; 0x06
    1270:	9f 81       	ldd	r25, Y+7	; 0x07
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <displayCurrentTime+0x5e>
    1278:	49 c0       	rjmp	.+146    	; 0x130c <displayCurrentTime+0xf0>
    127a:	2e 81       	ldd	r18, Y+6	; 0x06
    127c:	3f 81       	ldd	r19, Y+7	; 0x07
    127e:	24 30       	cpi	r18, 0x04	; 4
    1280:	31 05       	cpc	r19, r1
    1282:	5c f4       	brge	.+22     	; 0x129a <displayCurrentTime+0x7e>
    1284:	8e 81       	ldd	r24, Y+6	; 0x06
    1286:	9f 81       	ldd	r25, Y+7	; 0x07
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	91 05       	cpc	r25, r1
    128c:	b9 f1       	breq	.+110    	; 0x12fc <displayCurrentTime+0xe0>
    128e:	2e 81       	ldd	r18, Y+6	; 0x06
    1290:	3f 81       	ldd	r19, Y+7	; 0x07
    1292:	22 30       	cpi	r18, 0x02	; 2
    1294:	31 05       	cpc	r19, r1
    1296:	b1 f1       	breq	.+108    	; 0x1304 <displayCurrentTime+0xe8>
    1298:	60 c0       	rjmp	.+192    	; 0x135a <displayCurrentTime+0x13e>
    129a:	8e 81       	ldd	r24, Y+6	; 0x06
    129c:	9f 81       	ldd	r25, Y+7	; 0x07
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	91 05       	cpc	r25, r1
    12a2:	c1 f1       	breq	.+112    	; 0x1314 <displayCurrentTime+0xf8>
    12a4:	2e 81       	ldd	r18, Y+6	; 0x06
    12a6:	3f 81       	ldd	r19, Y+7	; 0x07
    12a8:	25 30       	cpi	r18, 0x05	; 5
    12aa:	31 05       	cpc	r19, r1
    12ac:	b9 f1       	breq	.+110    	; 0x131c <displayCurrentTime+0x100>
    12ae:	55 c0       	rjmp	.+170    	; 0x135a <displayCurrentTime+0x13e>
    12b0:	8e 81       	ldd	r24, Y+6	; 0x06
    12b2:	9f 81       	ldd	r25, Y+7	; 0x07
    12b4:	89 30       	cpi	r24, 0x09	; 9
    12b6:	91 05       	cpc	r25, r1
    12b8:	09 f4       	brne	.+2      	; 0x12bc <displayCurrentTime+0xa0>
    12ba:	40 c0       	rjmp	.+128    	; 0x133c <displayCurrentTime+0x120>
    12bc:	2e 81       	ldd	r18, Y+6	; 0x06
    12be:	3f 81       	ldd	r19, Y+7	; 0x07
    12c0:	2a 30       	cpi	r18, 0x0A	; 10
    12c2:	31 05       	cpc	r19, r1
    12c4:	5c f4       	brge	.+22     	; 0x12dc <displayCurrentTime+0xc0>
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	87 30       	cpi	r24, 0x07	; 7
    12cc:	91 05       	cpc	r25, r1
    12ce:	71 f1       	breq	.+92     	; 0x132c <displayCurrentTime+0x110>
    12d0:	2e 81       	ldd	r18, Y+6	; 0x06
    12d2:	3f 81       	ldd	r19, Y+7	; 0x07
    12d4:	28 30       	cpi	r18, 0x08	; 8
    12d6:	31 05       	cpc	r19, r1
    12d8:	69 f1       	breq	.+90     	; 0x1334 <displayCurrentTime+0x118>
    12da:	3f c0       	rjmp	.+126    	; 0x135a <displayCurrentTime+0x13e>
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	9f 81       	ldd	r25, Y+7	; 0x07
    12e0:	8b 30       	cpi	r24, 0x0B	; 11
    12e2:	91 05       	cpc	r25, r1
    12e4:	99 f1       	breq	.+102    	; 0x134c <displayCurrentTime+0x130>
    12e6:	2e 81       	ldd	r18, Y+6	; 0x06
    12e8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ea:	2b 30       	cpi	r18, 0x0B	; 11
    12ec:	31 05       	cpc	r19, r1
    12ee:	54 f1       	brlt	.+84     	; 0x1344 <displayCurrentTime+0x128>
    12f0:	8e 81       	ldd	r24, Y+6	; 0x06
    12f2:	9f 81       	ldd	r25, Y+7	; 0x07
    12f4:	8c 30       	cpi	r24, 0x0C	; 12
    12f6:	91 05       	cpc	r25, r1
    12f8:	69 f1       	breq	.+90     	; 0x1354 <displayCurrentTime+0x138>
    12fa:	2f c0       	rjmp	.+94     	; 0x135a <displayCurrentTime+0x13e>
	case 1:
		reg2 |= D2_ONE;
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	81 60       	ori	r24, 0x01	; 1
    1300:	8c 83       	std	Y+4, r24	; 0x04
    1302:	2b c0       	rjmp	.+86     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 2:
		reg2 |= D2_TWO;
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	80 62       	ori	r24, 0x20	; 32
    1308:	8c 83       	std	Y+4, r24	; 0x04
    130a:	27 c0       	rjmp	.+78     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 3:
		reg2 |= D2_THRE;
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	82 60       	ori	r24, 0x02	; 2
    1310:	8c 83       	std	Y+4, r24	; 0x04
    1312:	23 c0       	rjmp	.+70     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 4:
		reg2 |= D2_FOUR;
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	80 64       	ori	r24, 0x40	; 64
    1318:	8c 83       	std	Y+4, r24	; 0x04
    131a:	1f c0       	rjmp	.+62     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 5:
		reg1 |= D1_HFVE;
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	81 60       	ori	r24, 0x01	; 1
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	1b c0       	rjmp	.+54     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 6:
		reg1 |= D1_SIX;
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	80 62       	ori	r24, 0x20	; 32
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	17 c0       	rjmp	.+46     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 7:
		reg1 |= D1_SEVN;
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	82 60       	ori	r24, 0x02	; 2
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	13 c0       	rjmp	.+38     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 8:
		reg1 |= D1_EGHT;
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	80 64       	ori	r24, 0x40	; 64
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	0f c0       	rjmp	.+30     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 9:
		reg1 |= D1_NINE;
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	84 60       	ori	r24, 0x04	; 4
    1340:	8d 83       	std	Y+5, r24	; 0x05
    1342:	0b c0       	rjmp	.+22     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 10:
		reg1 |= D1_HTEN;
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	07 c0       	rjmp	.+14     	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 11:
		reg1 |= D1_ELVN;
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	88 60       	ori	r24, 0x08	; 8
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	03 c0       	rjmp	.+6      	; 0x135a <displayCurrentTime+0x13e>
		break;
	case 12:
		reg2 |= D2_TWLV;
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	80 61       	ori	r24, 0x10	; 16
    1358:	8c 83       	std	Y+4, r24	; 0x04
		break;
	}

	if (between(min, 0, 5)) {
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	45 e0       	ldi	r20, 0x05	; 5
    1360:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	21 f0       	breq	.+8      	; 0x1370 <displayCurrentTime+0x154>
		reg1 |= D1_OCLK;
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	80 61       	ori	r24, 0x10	; 16
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	90 c0       	rjmp	.+288    	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 5, 10)) {
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	65 e0       	ldi	r22, 0x05	; 5
    1374:	4a e0       	ldi	r20, 0x0A	; 10
    1376:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	39 f0       	breq	.+14     	; 0x138c <displayCurrentTime+0x170>
		reg3 |= D3_MFVE;
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	82 60       	ori	r24, 0x02	; 2
    1382:	8b 83       	std	Y+3, r24	; 0x03
		reg2 |= D2_PAST;
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	80 68       	ori	r24, 0x80	; 128
    1388:	8c 83       	std	Y+4, r24	; 0x04
    138a:	82 c0       	rjmp	.+260    	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 10, 15)) {
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	6a e0       	ldi	r22, 0x0A	; 10
    1390:	4f e0       	ldi	r20, 0x0F	; 15
    1392:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	39 f0       	breq	.+14     	; 0x13a8 <displayCurrentTime+0x18c>
		reg3 |= D3_MTEN;
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	81 60       	ori	r24, 0x01	; 1
    139e:	8b 83       	std	Y+3, r24	; 0x03
		reg2 |= D2_PAST;
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	80 68       	ori	r24, 0x80	; 128
    13a4:	8c 83       	std	Y+4, r24	; 0x04
    13a6:	74 c0       	rjmp	.+232    	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 15, 20)) {
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	6f e0       	ldi	r22, 0x0F	; 15
    13ac:	44 e1       	ldi	r20, 0x14	; 20
    13ae:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	21 f0       	breq	.+8      	; 0x13be <displayCurrentTime+0x1a2>
		reg2 |= D2_QUAR | D2_PAST;
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	88 68       	ori	r24, 0x88	; 136
    13ba:	8c 83       	std	Y+4, r24	; 0x04
    13bc:	69 c0       	rjmp	.+210    	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 20, 25)) {
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	64 e1       	ldi	r22, 0x14	; 20
    13c2:	49 e1       	ldi	r20, 0x19	; 25
    13c4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	39 f0       	breq	.+14     	; 0x13da <displayCurrentTime+0x1be>
		reg3 |= D3_TWTY;
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	80 62       	ori	r24, 0x20	; 32
    13d0:	8b 83       	std	Y+3, r24	; 0x03
		reg2 |= D2_PAST;
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	80 68       	ori	r24, 0x80	; 128
    13d6:	8c 83       	std	Y+4, r24	; 0x04
    13d8:	5b c0       	rjmp	.+182    	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 25, 30)) {
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	69 e1       	ldi	r22, 0x19	; 25
    13de:	4e e1       	ldi	r20, 0x1E	; 30
    13e0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	39 f0       	breq	.+14     	; 0x13f6 <displayCurrentTime+0x1da>
		reg3 |= D3_MFVE | D3_HALF;
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	82 61       	ori	r24, 0x12	; 18
    13ec:	8b 83       	std	Y+3, r24	; 0x03
		reg2 |= D2_TO;
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	84 60       	ori	r24, 0x04	; 4
    13f2:	8c 83       	std	Y+4, r24	; 0x04
    13f4:	4d c0       	rjmp	.+154    	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 30, 35)) {
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	6e e1       	ldi	r22, 0x1E	; 30
    13fa:	43 e2       	ldi	r20, 0x23	; 35
    13fc:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	21 f0       	breq	.+8      	; 0x140c <displayCurrentTime+0x1f0>
		reg3 |= D3_HALF;
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	80 61       	ori	r24, 0x10	; 16
    1408:	8b 83       	std	Y+3, r24	; 0x03
    140a:	42 c0       	rjmp	.+132    	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 35, 40)) {
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	63 e2       	ldi	r22, 0x23	; 35
    1410:	48 e2       	ldi	r20, 0x28	; 40
    1412:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	39 f0       	breq	.+14     	; 0x1428 <displayCurrentTime+0x20c>
		reg3 |= D3_MFVE | D3_HALF;
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	82 61       	ori	r24, 0x12	; 18
    141e:	8b 83       	std	Y+3, r24	; 0x03
		reg2 |= D2_PAST;
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	80 68       	ori	r24, 0x80	; 128
    1424:	8c 83       	std	Y+4, r24	; 0x04
    1426:	34 c0       	rjmp	.+104    	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 40, 45)) {
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	68 e2       	ldi	r22, 0x28	; 40
    142c:	4d e2       	ldi	r20, 0x2D	; 45
    142e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	39 f0       	breq	.+14     	; 0x1444 <displayCurrentTime+0x228>
		reg3 |= D3_TWTY;
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	80 62       	ori	r24, 0x20	; 32
    143a:	8b 83       	std	Y+3, r24	; 0x03
		reg2 |= D2_TO;
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	84 60       	ori	r24, 0x04	; 4
    1440:	8c 83       	std	Y+4, r24	; 0x04
    1442:	26 c0       	rjmp	.+76     	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 45, 50)) {
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	6d e2       	ldi	r22, 0x2D	; 45
    1448:	42 e3       	ldi	r20, 0x32	; 50
    144a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	21 f0       	breq	.+8      	; 0x145a <displayCurrentTime+0x23e>
		reg2 |= D2_QUAR | D2_TO;
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	8c 60       	ori	r24, 0x0C	; 12
    1456:	8c 83       	std	Y+4, r24	; 0x04
    1458:	1b c0       	rjmp	.+54     	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 50, 55)) {
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	62 e3       	ldi	r22, 0x32	; 50
    145e:	47 e3       	ldi	r20, 0x37	; 55
    1460:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	39 f0       	breq	.+14     	; 0x1476 <displayCurrentTime+0x25a>
		reg3 |= D3_MTEN;
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	81 60       	ori	r24, 0x01	; 1
    146c:	8b 83       	std	Y+3, r24	; 0x03
		reg2 |= D2_TO;
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	84 60       	ori	r24, 0x04	; 4
    1472:	8c 83       	std	Y+4, r24	; 0x04
    1474:	0d c0       	rjmp	.+26     	; 0x1490 <displayCurrentTime+0x274>
	} else if (between(min, 55, 60)) {
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	67 e3       	ldi	r22, 0x37	; 55
    147a:	4c e3       	ldi	r20, 0x3C	; 60
    147c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <between>
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	31 f0       	breq	.+12     	; 0x1490 <displayCurrentTime+0x274>
		reg3 |= D3_MFVE;
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	82 60       	ori	r24, 0x02	; 2
    1488:	8b 83       	std	Y+3, r24	; 0x03
		reg2 |= D2_TO;
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	84 60       	ori	r24, 0x04	; 4
    148e:	8c 83       	std	Y+4, r24	; 0x04
//	if (secs & (1 << 7))
//		reg1 |= D1_SIX;
//	else
//		reg1 |= D1_SEVN;

	setTime(reg1, reg2, reg3);
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	6c 81       	ldd	r22, Y+4	; 0x04
    1494:	4b 81       	ldd	r20, Y+3	; 0x03
    1496:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
}
    149a:	27 96       	adiw	r28, 0x07	; 7
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <checkAllOutputs>:

void checkAllOutputs() {
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	c6 52       	subi	r28, 0x26	; 38
    14ba:	d1 40       	sbci	r29, 0x01	; 1
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
	setTime(0, 0, D3_ITIS);
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	40 e4       	ldi	r20, 0x40	; 64
    14cc:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    14d0:	fe 01       	movw	r30, r28
    14d2:	ed 5d       	subi	r30, 0xDD	; 221
    14d4:	fe 4f       	sbci	r31, 0xFE	; 254
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a8 ec       	ldi	r26, 0xC8	; 200
    14dc:	b2 e4       	ldi	r27, 0x42	; 66
    14de:	80 83       	st	Z, r24
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	a2 83       	std	Z+2, r26	; 0x02
    14e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e6:	8e 01       	movw	r16, r28
    14e8:	01 5e       	subi	r16, 0xE1	; 225
    14ea:	1e 4f       	sbci	r17, 0xFE	; 254
    14ec:	fe 01       	movw	r30, r28
    14ee:	ed 5d       	subi	r30, 0xDD	; 221
    14f0:	fe 4f       	sbci	r31, 0xFE	; 254
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a e7       	ldi	r20, 0x7A	; 122
    1500:	55 e4       	ldi	r21, 0x45	; 69
    1502:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	f8 01       	movw	r30, r16
    150c:	80 83       	st	Z, r24
    150e:	91 83       	std	Z+1, r25	; 0x01
    1510:	a2 83       	std	Z+2, r26	; 0x02
    1512:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1514:	fe 01       	movw	r30, r28
    1516:	e1 5e       	subi	r30, 0xE1	; 225
    1518:	fe 4f       	sbci	r31, 0xFE	; 254
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    152e:	88 23       	and	r24, r24
    1530:	44 f4       	brge	.+16     	; 0x1542 <checkAllOutputs+0x96>
		__ticks = 1;
    1532:	fe 01       	movw	r30, r28
    1534:	e3 5e       	subi	r30, 0xE3	; 227
    1536:	fe 4f       	sbci	r31, 0xFE	; 254
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
    1540:	64 c0       	rjmp	.+200    	; 0x160a <checkAllOutputs+0x15e>
	else if (__tmp > 65535)
    1542:	fe 01       	movw	r30, r28
    1544:	e1 5e       	subi	r30, 0xE1	; 225
    1546:	fe 4f       	sbci	r31, 0xFE	; 254
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	3f ef       	ldi	r19, 0xFF	; 255
    1554:	4f e7       	ldi	r20, 0x7F	; 127
    1556:	57 e4       	ldi	r21, 0x47	; 71
    1558:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    155c:	18 16       	cp	r1, r24
    155e:	0c f0       	brlt	.+2      	; 0x1562 <checkAllOutputs+0xb6>
    1560:	43 c0       	rjmp	.+134    	; 0x15e8 <checkAllOutputs+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	fe 01       	movw	r30, r28
    1564:	ed 5d       	subi	r30, 0xDD	; 221
    1566:	fe 4f       	sbci	r31, 0xFE	; 254
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	8e 01       	movw	r16, r28
    1582:	03 5e       	subi	r16, 0xE3	; 227
    1584:	1e 4f       	sbci	r17, 0xFE	; 254
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	f8 01       	movw	r30, r16
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24
    1598:	1f c0       	rjmp	.+62     	; 0x15d8 <checkAllOutputs+0x12c>
    159a:	fe 01       	movw	r30, r28
    159c:	e5 5e       	subi	r30, 0xE5	; 229
    159e:	fe 4f       	sbci	r31, 0xFE	; 254
    15a0:	80 e9       	ldi	r24, 0x90	; 144
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	80 83       	st	Z, r24
    15a8:	fe 01       	movw	r30, r28
    15aa:	e5 5e       	subi	r30, 0xE5	; 229
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <checkAllOutputs+0x106>
    15b6:	fe 01       	movw	r30, r28
    15b8:	e5 5e       	subi	r30, 0xE5	; 229
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	de 01       	movw	r26, r28
    15c2:	a3 5e       	subi	r26, 0xE3	; 227
    15c4:	be 4f       	sbci	r27, 0xFE	; 254
    15c6:	fe 01       	movw	r30, r28
    15c8:	e3 5e       	subi	r30, 0xE3	; 227
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	9c 93       	st	X, r25
    15d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	fe 01       	movw	r30, r28
    15da:	e3 5e       	subi	r30, 0xE3	; 227
    15dc:	fe 4f       	sbci	r31, 0xFE	; 254
    15de:	80 81       	ld	r24, Z
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	d1 f6       	brne	.-76     	; 0x159a <checkAllOutputs+0xee>
    15e6:	27 c0       	rjmp	.+78     	; 0x1636 <checkAllOutputs+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e8:	8e 01       	movw	r16, r28
    15ea:	03 5e       	subi	r16, 0xE3	; 227
    15ec:	1e 4f       	sbci	r17, 0xFE	; 254
    15ee:	fe 01       	movw	r30, r28
    15f0:	e1 5e       	subi	r30, 0xE1	; 225
    15f2:	fe 4f       	sbci	r31, 0xFE	; 254
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	f8 01       	movw	r30, r16
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
    160a:	de 01       	movw	r26, r28
    160c:	a7 5e       	subi	r26, 0xE7	; 231
    160e:	be 4f       	sbci	r27, 0xFE	; 254
    1610:	fe 01       	movw	r30, r28
    1612:	e3 5e       	subi	r30, 0xE3	; 227
    1614:	fe 4f       	sbci	r31, 0xFE	; 254
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	8d 93       	st	X+, r24
    161c:	9c 93       	st	X, r25
    161e:	fe 01       	movw	r30, r28
    1620:	e7 5e       	subi	r30, 0xE7	; 231
    1622:	fe 4f       	sbci	r31, 0xFE	; 254
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <checkAllOutputs+0x17c>
    162c:	fe 01       	movw	r30, r28
    162e:	e7 5e       	subi	r30, 0xE7	; 231
    1630:	fe 4f       	sbci	r31, 0xFE	; 254
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, 0, D3_MFVE);
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	42 e0       	ldi	r20, 0x02	; 2
    163c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    1640:	fe 01       	movw	r30, r28
    1642:	eb 5e       	subi	r30, 0xEB	; 235
    1644:	fe 4f       	sbci	r31, 0xFE	; 254
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a8 ec       	ldi	r26, 0xC8	; 200
    164c:	b2 e4       	ldi	r27, 0x42	; 66
    164e:	80 83       	st	Z, r24
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	a2 83       	std	Z+2, r26	; 0x02
    1654:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1656:	8e 01       	movw	r16, r28
    1658:	0f 5e       	subi	r16, 0xEF	; 239
    165a:	1e 4f       	sbci	r17, 0xFE	; 254
    165c:	fe 01       	movw	r30, r28
    165e:	eb 5e       	subi	r30, 0xEB	; 235
    1660:	fe 4f       	sbci	r31, 0xFE	; 254
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	4a e7       	ldi	r20, 0x7A	; 122
    1670:	55 e4       	ldi	r21, 0x45	; 69
    1672:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	f8 01       	movw	r30, r16
    167c:	80 83       	st	Z, r24
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	a2 83       	std	Z+2, r26	; 0x02
    1682:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1684:	fe 01       	movw	r30, r28
    1686:	ef 5e       	subi	r30, 0xEF	; 239
    1688:	fe 4f       	sbci	r31, 0xFE	; 254
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	44 f4       	brge	.+16     	; 0x16b2 <checkAllOutputs+0x206>
		__ticks = 1;
    16a2:	fe 01       	movw	r30, r28
    16a4:	e1 5f       	subi	r30, 0xF1	; 241
    16a6:	fe 4f       	sbci	r31, 0xFE	; 254
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	80 83       	st	Z, r24
    16b0:	64 c0       	rjmp	.+200    	; 0x177a <checkAllOutputs+0x2ce>
	else if (__tmp > 65535)
    16b2:	fe 01       	movw	r30, r28
    16b4:	ef 5e       	subi	r30, 0xEF	; 239
    16b6:	fe 4f       	sbci	r31, 0xFE	; 254
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	3f ef       	ldi	r19, 0xFF	; 255
    16c4:	4f e7       	ldi	r20, 0x7F	; 127
    16c6:	57 e4       	ldi	r21, 0x47	; 71
    16c8:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    16cc:	18 16       	cp	r1, r24
    16ce:	0c f0       	brlt	.+2      	; 0x16d2 <checkAllOutputs+0x226>
    16d0:	43 c0       	rjmp	.+134    	; 0x1758 <checkAllOutputs+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d2:	fe 01       	movw	r30, r28
    16d4:	eb 5e       	subi	r30, 0xEB	; 235
    16d6:	fe 4f       	sbci	r31, 0xFE	; 254
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	8e 01       	movw	r16, r28
    16f2:	01 5f       	subi	r16, 0xF1	; 241
    16f4:	1e 4f       	sbci	r17, 0xFE	; 254
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
    1708:	1f c0       	rjmp	.+62     	; 0x1748 <checkAllOutputs+0x29c>
    170a:	fe 01       	movw	r30, r28
    170c:	e3 5f       	subi	r30, 0xF3	; 243
    170e:	fe 4f       	sbci	r31, 0xFE	; 254
    1710:	80 e9       	ldi	r24, 0x90	; 144
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
    1718:	fe 01       	movw	r30, r28
    171a:	e3 5f       	subi	r30, 0xF3	; 243
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <checkAllOutputs+0x276>
    1726:	fe 01       	movw	r30, r28
    1728:	e3 5f       	subi	r30, 0xF3	; 243
    172a:	fe 4f       	sbci	r31, 0xFE	; 254
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	de 01       	movw	r26, r28
    1732:	a1 5f       	subi	r26, 0xF1	; 241
    1734:	be 4f       	sbci	r27, 0xFE	; 254
    1736:	fe 01       	movw	r30, r28
    1738:	e1 5f       	subi	r30, 0xF1	; 241
    173a:	fe 4f       	sbci	r31, 0xFE	; 254
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	11 96       	adiw	r26, 0x01	; 1
    1744:	9c 93       	st	X, r25
    1746:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1748:	fe 01       	movw	r30, r28
    174a:	e1 5f       	subi	r30, 0xF1	; 241
    174c:	fe 4f       	sbci	r31, 0xFE	; 254
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	d1 f6       	brne	.-76     	; 0x170a <checkAllOutputs+0x25e>
    1756:	27 c0       	rjmp	.+78     	; 0x17a6 <checkAllOutputs+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	8e 01       	movw	r16, r28
    175a:	01 5f       	subi	r16, 0xF1	; 241
    175c:	1e 4f       	sbci	r17, 0xFE	; 254
    175e:	fe 01       	movw	r30, r28
    1760:	ef 5e       	subi	r30, 0xEF	; 239
    1762:	fe 4f       	sbci	r31, 0xFE	; 254
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	f8 01       	movw	r30, r16
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	de 01       	movw	r26, r28
    177c:	a5 5f       	subi	r26, 0xF5	; 245
    177e:	be 4f       	sbci	r27, 0xFE	; 254
    1780:	fe 01       	movw	r30, r28
    1782:	e1 5f       	subi	r30, 0xF1	; 241
    1784:	fe 4f       	sbci	r31, 0xFE	; 254
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	8d 93       	st	X+, r24
    178c:	9c 93       	st	X, r25
    178e:	fe 01       	movw	r30, r28
    1790:	e5 5f       	subi	r30, 0xF5	; 245
    1792:	fe 4f       	sbci	r31, 0xFE	; 254
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <checkAllOutputs+0x2ec>
    179c:	fe 01       	movw	r30, r28
    179e:	e5 5f       	subi	r30, 0xF5	; 245
    17a0:	fe 4f       	sbci	r31, 0xFE	; 254
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, 0, D3_MTEN);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    17b0:	fe 01       	movw	r30, r28
    17b2:	e9 5f       	subi	r30, 0xF9	; 249
    17b4:	fe 4f       	sbci	r31, 0xFE	; 254
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a8 ec       	ldi	r26, 0xC8	; 200
    17bc:	b2 e4       	ldi	r27, 0x42	; 66
    17be:	80 83       	st	Z, r24
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	a2 83       	std	Z+2, r26	; 0x02
    17c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c6:	8e 01       	movw	r16, r28
    17c8:	0d 5f       	subi	r16, 0xFD	; 253
    17ca:	1e 4f       	sbci	r17, 0xFE	; 254
    17cc:	fe 01       	movw	r30, r28
    17ce:	e9 5f       	subi	r30, 0xF9	; 249
    17d0:	fe 4f       	sbci	r31, 0xFE	; 254
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a e7       	ldi	r20, 0x7A	; 122
    17e0:	55 e4       	ldi	r21, 0x45	; 69
    17e2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	80 83       	st	Z, r24
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	a2 83       	std	Z+2, r26	; 0x02
    17f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f4:	fe 01       	movw	r30, r28
    17f6:	ed 5f       	subi	r30, 0xFD	; 253
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	44 f4       	brge	.+16     	; 0x1822 <checkAllOutputs+0x376>
		__ticks = 1;
    1812:	fe 01       	movw	r30, r28
    1814:	ef 5f       	subi	r30, 0xFF	; 255
    1816:	fe 4f       	sbci	r31, 0xFE	; 254
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	80 83       	st	Z, r24
    1820:	64 c0       	rjmp	.+200    	; 0x18ea <checkAllOutputs+0x43e>
	else if (__tmp > 65535)
    1822:	fe 01       	movw	r30, r28
    1824:	ed 5f       	subi	r30, 0xFD	; 253
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	0c f0       	brlt	.+2      	; 0x1842 <checkAllOutputs+0x396>
    1840:	43 c0       	rjmp	.+134    	; 0x18c8 <checkAllOutputs+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	fe 01       	movw	r30, r28
    1844:	e9 5f       	subi	r30, 0xF9	; 249
    1846:	fe 4f       	sbci	r31, 0xFE	; 254
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	8e 01       	movw	r16, r28
    1862:	0f 5f       	subi	r16, 0xFF	; 255
    1864:	1e 4f       	sbci	r17, 0xFE	; 254
    1866:	bc 01       	movw	r22, r24
    1868:	cd 01       	movw	r24, r26
    186a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	f8 01       	movw	r30, r16
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	1f c0       	rjmp	.+62     	; 0x18b8 <checkAllOutputs+0x40c>
    187a:	fe 01       	movw	r30, r28
    187c:	e1 50       	subi	r30, 0x01	; 1
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 e9       	ldi	r24, 0x90	; 144
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	fe 01       	movw	r30, r28
    188a:	e1 50       	subi	r30, 0x01	; 1
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <checkAllOutputs+0x3e6>
    1896:	fe 01       	movw	r30, r28
    1898:	e1 50       	subi	r30, 0x01	; 1
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	de 01       	movw	r26, r28
    18a2:	af 5f       	subi	r26, 0xFF	; 255
    18a4:	be 4f       	sbci	r27, 0xFE	; 254
    18a6:	fe 01       	movw	r30, r28
    18a8:	ef 5f       	subi	r30, 0xFF	; 255
    18aa:	fe 4f       	sbci	r31, 0xFE	; 254
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	9c 93       	st	X, r25
    18b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b8:	fe 01       	movw	r30, r28
    18ba:	ef 5f       	subi	r30, 0xFF	; 255
    18bc:	fe 4f       	sbci	r31, 0xFE	; 254
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	d1 f6       	brne	.-76     	; 0x187a <checkAllOutputs+0x3ce>
    18c6:	27 c0       	rjmp	.+78     	; 0x1916 <checkAllOutputs+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c8:	8e 01       	movw	r16, r28
    18ca:	0f 5f       	subi	r16, 0xFF	; 255
    18cc:	1e 4f       	sbci	r17, 0xFE	; 254
    18ce:	fe 01       	movw	r30, r28
    18d0:	ed 5f       	subi	r30, 0xFD	; 253
    18d2:	fe 4f       	sbci	r31, 0xFE	; 254
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	f8 01       	movw	r30, r16
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	80 83       	st	Z, r24
    18ea:	de 01       	movw	r26, r28
    18ec:	a3 50       	subi	r26, 0x03	; 3
    18ee:	bf 4f       	sbci	r27, 0xFF	; 255
    18f0:	fe 01       	movw	r30, r28
    18f2:	ef 5f       	subi	r30, 0xFF	; 255
    18f4:	fe 4f       	sbci	r31, 0xFE	; 254
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	8d 93       	st	X+, r24
    18fc:	9c 93       	st	X, r25
    18fe:	fe 01       	movw	r30, r28
    1900:	e3 50       	subi	r30, 0x03	; 3
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	91 81       	ldd	r25, Z+1	; 0x01
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <checkAllOutputs+0x45c>
    190c:	fe 01       	movw	r30, r28
    190e:	e3 50       	subi	r30, 0x03	; 3
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, D2_QUAR, 0);
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	68 e0       	ldi	r22, 0x08	; 8
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    1920:	fe 01       	movw	r30, r28
    1922:	e7 50       	subi	r30, 0x07	; 7
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a8 ec       	ldi	r26, 0xC8	; 200
    192c:	b2 e4       	ldi	r27, 0x42	; 66
    192e:	80 83       	st	Z, r24
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	a2 83       	std	Z+2, r26	; 0x02
    1934:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	8e 01       	movw	r16, r28
    1938:	0b 50       	subi	r16, 0x0B	; 11
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	fe 01       	movw	r30, r28
    193e:	e7 50       	subi	r30, 0x07	; 7
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a e7       	ldi	r20, 0x7A	; 122
    1950:	55 e4       	ldi	r21, 0x45	; 69
    1952:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	f8 01       	movw	r30, r16
    195c:	80 83       	st	Z, r24
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	a2 83       	std	Z+2, r26	; 0x02
    1962:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1964:	fe 01       	movw	r30, r28
    1966:	eb 50       	subi	r30, 0x0B	; 11
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	60 81       	ld	r22, Z
    196c:	71 81       	ldd	r23, Z+1	; 0x01
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	44 f4       	brge	.+16     	; 0x1992 <checkAllOutputs+0x4e6>
		__ticks = 1;
    1982:	fe 01       	movw	r30, r28
    1984:	ed 50       	subi	r30, 0x0D	; 13
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
    1990:	64 c0       	rjmp	.+200    	; 0x1a5a <checkAllOutputs+0x5ae>
	else if (__tmp > 65535)
    1992:	fe 01       	movw	r30, r28
    1994:	eb 50       	subi	r30, 0x0B	; 11
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	0c f0       	brlt	.+2      	; 0x19b2 <checkAllOutputs+0x506>
    19b0:	43 c0       	rjmp	.+134    	; 0x1a38 <checkAllOutputs+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b2:	fe 01       	movw	r30, r28
    19b4:	e7 50       	subi	r30, 0x07	; 7
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e2       	ldi	r20, 0x20	; 32
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	8e 01       	movw	r16, r28
    19d2:	0d 50       	subi	r16, 0x0D	; 13
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	f8 01       	movw	r30, r16
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
    19e8:	1f c0       	rjmp	.+62     	; 0x1a28 <checkAllOutputs+0x57c>
    19ea:	fe 01       	movw	r30, r28
    19ec:	ef 50       	subi	r30, 0x0F	; 15
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 e9       	ldi	r24, 0x90	; 144
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
    19f8:	fe 01       	movw	r30, r28
    19fa:	ef 50       	subi	r30, 0x0F	; 15
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <checkAllOutputs+0x556>
    1a06:	fe 01       	movw	r30, r28
    1a08:	ef 50       	subi	r30, 0x0F	; 15
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	de 01       	movw	r26, r28
    1a12:	ad 50       	subi	r26, 0x0D	; 13
    1a14:	bf 4f       	sbci	r27, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	ed 50       	subi	r30, 0x0D	; 13
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	11 96       	adiw	r26, 0x01	; 1
    1a24:	9c 93       	st	X, r25
    1a26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ed 50       	subi	r30, 0x0D	; 13
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	d1 f6       	brne	.-76     	; 0x19ea <checkAllOutputs+0x53e>
    1a36:	27 c0       	rjmp	.+78     	; 0x1a86 <checkAllOutputs+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	8e 01       	movw	r16, r28
    1a3a:	0d 50       	subi	r16, 0x0D	; 13
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	fe 01       	movw	r30, r28
    1a40:	eb 50       	subi	r30, 0x0B	; 11
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	f8 01       	movw	r30, r16
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
    1a5a:	de 01       	movw	r26, r28
    1a5c:	a1 51       	subi	r26, 0x11	; 17
    1a5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a60:	fe 01       	movw	r30, r28
    1a62:	ed 50       	subi	r30, 0x0D	; 13
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 81       	ld	r24, Z
    1a68:	91 81       	ldd	r25, Z+1	; 0x01
    1a6a:	8d 93       	st	X+, r24
    1a6c:	9c 93       	st	X, r25
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e1 51       	subi	r30, 0x11	; 17
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <checkAllOutputs+0x5cc>
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e1 51       	subi	r30, 0x11	; 17
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, 0, D3_TWTY);
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	40 e2       	ldi	r20, 0x20	; 32
    1a8c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    1a90:	fe 01       	movw	r30, r28
    1a92:	e5 51       	subi	r30, 0x15	; 21
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a8 ec       	ldi	r26, 0xC8	; 200
    1a9c:	b2 e4       	ldi	r27, 0x42	; 66
    1a9e:	80 83       	st	Z, r24
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	a2 83       	std	Z+2, r26	; 0x02
    1aa4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	8e 01       	movw	r16, r28
    1aa8:	09 51       	subi	r16, 0x19	; 25
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	fe 01       	movw	r30, r28
    1aae:	e5 51       	subi	r30, 0x15	; 21
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a e7       	ldi	r20, 0x7A	; 122
    1ac0:	55 e4       	ldi	r21, 0x45	; 69
    1ac2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	f8 01       	movw	r30, r16
    1acc:	80 83       	st	Z, r24
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	a2 83       	std	Z+2, r26	; 0x02
    1ad2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e9 51       	subi	r30, 0x19	; 25
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	44 f4       	brge	.+16     	; 0x1b02 <checkAllOutputs+0x656>
		__ticks = 1;
    1af2:	fe 01       	movw	r30, r28
    1af4:	eb 51       	subi	r30, 0x1B	; 27
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	80 83       	st	Z, r24
    1b00:	64 c0       	rjmp	.+200    	; 0x1bca <checkAllOutputs+0x71e>
	else if (__tmp > 65535)
    1b02:	fe 01       	movw	r30, r28
    1b04:	e9 51       	subi	r30, 0x19	; 25
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	0c f0       	brlt	.+2      	; 0x1b22 <checkAllOutputs+0x676>
    1b20:	43 c0       	rjmp	.+134    	; 0x1ba8 <checkAllOutputs+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	fe 01       	movw	r30, r28
    1b24:	e5 51       	subi	r30, 0x15	; 21
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	60 81       	ld	r22, Z
    1b2a:	71 81       	ldd	r23, Z+1	; 0x01
    1b2c:	82 81       	ldd	r24, Z+2	; 0x02
    1b2e:	93 81       	ldd	r25, Z+3	; 0x03
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	8e 01       	movw	r16, r28
    1b42:	0b 51       	subi	r16, 0x1B	; 27
    1b44:	1f 4f       	sbci	r17, 0xFF	; 255
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	f8 01       	movw	r30, r16
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	80 83       	st	Z, r24
    1b58:	1f c0       	rjmp	.+62     	; 0x1b98 <checkAllOutputs+0x6ec>
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ed 51       	subi	r30, 0x1D	; 29
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 e9       	ldi	r24, 0x90	; 144
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	91 83       	std	Z+1, r25	; 0x01
    1b66:	80 83       	st	Z, r24
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ed 51       	subi	r30, 0x1D	; 29
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <checkAllOutputs+0x6c6>
    1b76:	fe 01       	movw	r30, r28
    1b78:	ed 51       	subi	r30, 0x1D	; 29
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b80:	de 01       	movw	r26, r28
    1b82:	ab 51       	subi	r26, 0x1B	; 27
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	eb 51       	subi	r30, 0x1B	; 27
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	11 96       	adiw	r26, 0x01	; 1
    1b94:	9c 93       	st	X, r25
    1b96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	fe 01       	movw	r30, r28
    1b9a:	eb 51       	subi	r30, 0x1B	; 27
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	d1 f6       	brne	.-76     	; 0x1b5a <checkAllOutputs+0x6ae>
    1ba6:	27 c0       	rjmp	.+78     	; 0x1bf6 <checkAllOutputs+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	8e 01       	movw	r16, r28
    1baa:	0b 51       	subi	r16, 0x1B	; 27
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e9 51       	subi	r30, 0x19	; 25
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	60 81       	ld	r22, Z
    1bb6:	71 81       	ldd	r23, Z+1	; 0x01
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	93 81       	ldd	r25, Z+3	; 0x03
    1bbc:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	80 83       	st	Z, r24
    1bca:	de 01       	movw	r26, r28
    1bcc:	af 51       	subi	r26, 0x1F	; 31
    1bce:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	eb 51       	subi	r30, 0x1B	; 27
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	80 81       	ld	r24, Z
    1bd8:	91 81       	ldd	r25, Z+1	; 0x01
    1bda:	8d 93       	st	X+, r24
    1bdc:	9c 93       	st	X, r25
    1bde:	fe 01       	movw	r30, r28
    1be0:	ef 51       	subi	r30, 0x1F	; 31
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 81       	ld	r24, Z
    1be6:	91 81       	ldd	r25, Z+1	; 0x01
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <checkAllOutputs+0x73c>
    1bec:	fe 01       	movw	r30, r28
    1bee:	ef 51       	subi	r30, 0x1F	; 31
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, D2_TO, 0);
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	64 e0       	ldi	r22, 0x04	; 4
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    1c00:	fe 01       	movw	r30, r28
    1c02:	e3 52       	subi	r30, 0x23	; 35
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a8 ec       	ldi	r26, 0xC8	; 200
    1c0c:	b2 e4       	ldi	r27, 0x42	; 66
    1c0e:	80 83       	st	Z, r24
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	a2 83       	std	Z+2, r26	; 0x02
    1c14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c16:	8e 01       	movw	r16, r28
    1c18:	07 52       	subi	r16, 0x27	; 39
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e3 52       	subi	r30, 0x23	; 35
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a e7       	ldi	r20, 0x7A	; 122
    1c30:	55 e4       	ldi	r21, 0x45	; 69
    1c32:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	80 83       	st	Z, r24
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	a2 83       	std	Z+2, r26	; 0x02
    1c42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c44:	fe 01       	movw	r30, r28
    1c46:	e7 52       	subi	r30, 0x27	; 39
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	44 f4       	brge	.+16     	; 0x1c72 <checkAllOutputs+0x7c6>
		__ticks = 1;
    1c62:	fe 01       	movw	r30, r28
    1c64:	e9 52       	subi	r30, 0x29	; 41
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
    1c70:	64 c0       	rjmp	.+200    	; 0x1d3a <checkAllOutputs+0x88e>
	else if (__tmp > 65535)
    1c72:	fe 01       	movw	r30, r28
    1c74:	e7 52       	subi	r30, 0x27	; 39
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	0c f0       	brlt	.+2      	; 0x1c92 <checkAllOutputs+0x7e6>
    1c90:	43 c0       	rjmp	.+134    	; 0x1d18 <checkAllOutputs+0x86c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	fe 01       	movw	r30, r28
    1c94:	e3 52       	subi	r30, 0x23	; 35
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e2       	ldi	r20, 0x20	; 32
    1ca6:	51 e4       	ldi	r21, 0x41	; 65
    1ca8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	8e 01       	movw	r16, r28
    1cb2:	09 52       	subi	r16, 0x29	; 41
    1cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
    1cc8:	1f c0       	rjmp	.+62     	; 0x1d08 <checkAllOutputs+0x85c>
    1cca:	fe 01       	movw	r30, r28
    1ccc:	eb 52       	subi	r30, 0x2B	; 43
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 e9       	ldi	r24, 0x90	; 144
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
    1cd8:	fe 01       	movw	r30, r28
    1cda:	eb 52       	subi	r30, 0x2B	; 43
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <checkAllOutputs+0x836>
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	eb 52       	subi	r30, 0x2B	; 43
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	de 01       	movw	r26, r28
    1cf2:	a9 52       	subi	r26, 0x29	; 41
    1cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e9 52       	subi	r30, 0x29	; 41
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	11 96       	adiw	r26, 0x01	; 1
    1d04:	9c 93       	st	X, r25
    1d06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e9 52       	subi	r30, 0x29	; 41
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	d1 f6       	brne	.-76     	; 0x1cca <checkAllOutputs+0x81e>
    1d16:	27 c0       	rjmp	.+78     	; 0x1d66 <checkAllOutputs+0x8ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	8e 01       	movw	r16, r28
    1d1a:	09 52       	subi	r16, 0x29	; 41
    1d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e7 52       	subi	r30, 0x27	; 39
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	f8 01       	movw	r30, r16
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	de 01       	movw	r26, r28
    1d3c:	ad 52       	subi	r26, 0x2D	; 45
    1d3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d40:	fe 01       	movw	r30, r28
    1d42:	e9 52       	subi	r30, 0x29	; 41
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	91 81       	ldd	r25, Z+1	; 0x01
    1d4a:	8d 93       	st	X+, r24
    1d4c:	9c 93       	st	X, r25
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ed 52       	subi	r30, 0x2D	; 45
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <checkAllOutputs+0x8ac>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ed 52       	subi	r30, 0x2D	; 45
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, D2_PAST, 0);
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	60 e8       	ldi	r22, 0x80	; 128
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    1d70:	fe 01       	movw	r30, r28
    1d72:	e1 53       	subi	r30, 0x31	; 49
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a8 ec       	ldi	r26, 0xC8	; 200
    1d7c:	b2 e4       	ldi	r27, 0x42	; 66
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	8e 01       	movw	r16, r28
    1d88:	05 53       	subi	r16, 0x35	; 53
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e1 53       	subi	r30, 0x31	; 49
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	55 e4       	ldi	r21, 0x45	; 69
    1da2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	f8 01       	movw	r30, r16
    1dac:	80 83       	st	Z, r24
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	a2 83       	std	Z+2, r26	; 0x02
    1db2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db4:	fe 01       	movw	r30, r28
    1db6:	e5 53       	subi	r30, 0x35	; 53
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	44 f4       	brge	.+16     	; 0x1de2 <checkAllOutputs+0x936>
		__ticks = 1;
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e7 53       	subi	r30, 0x37	; 55
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	80 83       	st	Z, r24
    1de0:	64 c0       	rjmp	.+200    	; 0x1eaa <checkAllOutputs+0x9fe>
	else if (__tmp > 65535)
    1de2:	fe 01       	movw	r30, r28
    1de4:	e5 53       	subi	r30, 0x35	; 53
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	0c f0       	brlt	.+2      	; 0x1e02 <checkAllOutputs+0x956>
    1e00:	43 c0       	rjmp	.+134    	; 0x1e88 <checkAllOutputs+0x9dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	fe 01       	movw	r30, r28
    1e04:	e1 53       	subi	r30, 0x31	; 49
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e2       	ldi	r20, 0x20	; 32
    1e16:	51 e4       	ldi	r21, 0x41	; 65
    1e18:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8e 01       	movw	r16, r28
    1e22:	07 53       	subi	r16, 0x37	; 55
    1e24:	1f 4f       	sbci	r17, 0xFF	; 255
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	f8 01       	movw	r30, r16
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
    1e38:	1f c0       	rjmp	.+62     	; 0x1e78 <checkAllOutputs+0x9cc>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e9 53       	subi	r30, 0x39	; 57
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 e9       	ldi	r24, 0x90	; 144
    1e42:	91 e0       	ldi	r25, 0x01	; 1
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e9 53       	subi	r30, 0x39	; 57
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <checkAllOutputs+0x9a6>
    1e56:	fe 01       	movw	r30, r28
    1e58:	e9 53       	subi	r30, 0x39	; 57
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	de 01       	movw	r26, r28
    1e62:	a7 53       	subi	r26, 0x37	; 55
    1e64:	bf 4f       	sbci	r27, 0xFF	; 255
    1e66:	fe 01       	movw	r30, r28
    1e68:	e7 53       	subi	r30, 0x37	; 55
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	11 96       	adiw	r26, 0x01	; 1
    1e74:	9c 93       	st	X, r25
    1e76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e7 53       	subi	r30, 0x37	; 55
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	d1 f6       	brne	.-76     	; 0x1e3a <checkAllOutputs+0x98e>
    1e86:	27 c0       	rjmp	.+78     	; 0x1ed6 <checkAllOutputs+0xa2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	8e 01       	movw	r16, r28
    1e8a:	07 53       	subi	r16, 0x37	; 55
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e5 53       	subi	r30, 0x35	; 53
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	60 81       	ld	r22, Z
    1e96:	71 81       	ldd	r23, Z+1	; 0x01
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
    1eaa:	de 01       	movw	r26, r28
    1eac:	ab 53       	subi	r26, 0x3B	; 59
    1eae:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e7 53       	subi	r30, 0x37	; 55
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	8d 93       	st	X+, r24
    1ebc:	9c 93       	st	X, r25
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	eb 53       	subi	r30, 0x3B	; 59
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <checkAllOutputs+0xa1c>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	eb 53       	subi	r30, 0x3B	; 59
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, 0, D3_HALF);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	40 e1       	ldi	r20, 0x10	; 16
    1edc:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	ef 53       	subi	r30, 0x3F	; 63
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a8 ec       	ldi	r26, 0xC8	; 200
    1eec:	b2 e4       	ldi	r27, 0x42	; 66
    1eee:	80 83       	st	Z, r24
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	a2 83       	std	Z+2, r26	; 0x02
    1ef4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	03 54       	subi	r16, 0x43	; 67
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	fe 01       	movw	r30, r28
    1efe:	ef 53       	subi	r30, 0x3F	; 63
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4a e7       	ldi	r20, 0x7A	; 122
    1f10:	55 e4       	ldi	r21, 0x45	; 69
    1f12:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	80 83       	st	Z, r24
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	a2 83       	std	Z+2, r26	; 0x02
    1f22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f24:	fe 01       	movw	r30, r28
    1f26:	e3 54       	subi	r30, 0x43	; 67
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e8       	ldi	r20, 0x80	; 128
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    1f3e:	88 23       	and	r24, r24
    1f40:	44 f4       	brge	.+16     	; 0x1f52 <checkAllOutputs+0xaa6>
		__ticks = 1;
    1f42:	fe 01       	movw	r30, r28
    1f44:	e5 54       	subi	r30, 0x45	; 69
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
    1f50:	64 c0       	rjmp	.+200    	; 0x201a <checkAllOutputs+0xb6e>
	else if (__tmp > 65535)
    1f52:	fe 01       	movw	r30, r28
    1f54:	e3 54       	subi	r30, 0x43	; 67
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	60 81       	ld	r22, Z
    1f5a:	71 81       	ldd	r23, Z+1	; 0x01
    1f5c:	82 81       	ldd	r24, Z+2	; 0x02
    1f5e:	93 81       	ldd	r25, Z+3	; 0x03
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	3f ef       	ldi	r19, 0xFF	; 255
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	57 e4       	ldi	r21, 0x47	; 71
    1f68:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	0c f0       	brlt	.+2      	; 0x1f72 <checkAllOutputs+0xac6>
    1f70:	43 c0       	rjmp	.+134    	; 0x1ff8 <checkAllOutputs+0xb4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	fe 01       	movw	r30, r28
    1f74:	ef 53       	subi	r30, 0x3F	; 63
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	8e 01       	movw	r16, r28
    1f92:	05 54       	subi	r16, 0x45	; 69
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
    1fa8:	1f c0       	rjmp	.+62     	; 0x1fe8 <checkAllOutputs+0xb3c>
    1faa:	fe 01       	movw	r30, r28
    1fac:	e7 54       	subi	r30, 0x47	; 71
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 e9       	ldi	r24, 0x90	; 144
    1fb2:	91 e0       	ldi	r25, 0x01	; 1
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	80 83       	st	Z, r24
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e7 54       	subi	r30, 0x47	; 71
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <checkAllOutputs+0xb16>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e7 54       	subi	r30, 0x47	; 71
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	de 01       	movw	r26, r28
    1fd2:	a5 54       	subi	r26, 0x45	; 69
    1fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e5 54       	subi	r30, 0x45	; 69
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 81       	ld	r24, Z
    1fde:	91 81       	ldd	r25, Z+1	; 0x01
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	11 96       	adiw	r26, 0x01	; 1
    1fe4:	9c 93       	st	X, r25
    1fe6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e5 54       	subi	r30, 0x45	; 69
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	d1 f6       	brne	.-76     	; 0x1faa <checkAllOutputs+0xafe>
    1ff6:	27 c0       	rjmp	.+78     	; 0x2046 <checkAllOutputs+0xb9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	8e 01       	movw	r16, r28
    1ffa:	05 54       	subi	r16, 0x45	; 69
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	fe 01       	movw	r30, r28
    2000:	e3 54       	subi	r30, 0x43	; 67
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	60 81       	ld	r22, Z
    2006:	71 81       	ldd	r23, Z+1	; 0x01
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	f8 01       	movw	r30, r16
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
    201a:	de 01       	movw	r26, r28
    201c:	a9 54       	subi	r26, 0x49	; 73
    201e:	bf 4f       	sbci	r27, 0xFF	; 255
    2020:	fe 01       	movw	r30, r28
    2022:	e5 54       	subi	r30, 0x45	; 69
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	8d 93       	st	X+, r24
    202c:	9c 93       	st	X, r25
    202e:	fe 01       	movw	r30, r28
    2030:	e9 54       	subi	r30, 0x49	; 73
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 81       	ld	r24, Z
    2036:	91 81       	ldd	r25, Z+1	; 0x01
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <checkAllOutputs+0xb8c>
    203c:	fe 01       	movw	r30, r28
    203e:	e9 54       	subi	r30, 0x49	; 73
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(D1_ELVN, 0, 0);
    2046:	88 e0       	ldi	r24, 0x08	; 8
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2050:	fe 01       	movw	r30, r28
    2052:	ed 54       	subi	r30, 0x4D	; 77
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a8 ec       	ldi	r26, 0xC8	; 200
    205c:	b2 e4       	ldi	r27, 0x42	; 66
    205e:	80 83       	st	Z, r24
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	a2 83       	std	Z+2, r26	; 0x02
    2064:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2066:	8e 01       	movw	r16, r28
    2068:	01 55       	subi	r16, 0x51	; 81
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	ed 54       	subi	r30, 0x4D	; 77
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	4a e7       	ldi	r20, 0x7A	; 122
    2080:	55 e4       	ldi	r21, 0x45	; 69
    2082:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	f8 01       	movw	r30, r16
    208c:	80 83       	st	Z, r24
    208e:	91 83       	std	Z+1, r25	; 0x01
    2090:	a2 83       	std	Z+2, r26	; 0x02
    2092:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2094:	fe 01       	movw	r30, r28
    2096:	e1 55       	subi	r30, 0x51	; 81
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	82 81       	ldd	r24, Z+2	; 0x02
    20a0:	93 81       	ldd	r25, Z+3	; 0x03
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	44 f4       	brge	.+16     	; 0x20c2 <checkAllOutputs+0xc16>
		__ticks = 1;
    20b2:	fe 01       	movw	r30, r28
    20b4:	e3 55       	subi	r30, 0x53	; 83
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	80 83       	st	Z, r24
    20c0:	64 c0       	rjmp	.+200    	; 0x218a <checkAllOutputs+0xcde>
	else if (__tmp > 65535)
    20c2:	fe 01       	movw	r30, r28
    20c4:	e1 55       	subi	r30, 0x51	; 81
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	60 81       	ld	r22, Z
    20ca:	71 81       	ldd	r23, Z+1	; 0x01
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	93 81       	ldd	r25, Z+3	; 0x03
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	3f ef       	ldi	r19, 0xFF	; 255
    20d4:	4f e7       	ldi	r20, 0x7F	; 127
    20d6:	57 e4       	ldi	r21, 0x47	; 71
    20d8:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    20dc:	18 16       	cp	r1, r24
    20de:	0c f0       	brlt	.+2      	; 0x20e2 <checkAllOutputs+0xc36>
    20e0:	43 c0       	rjmp	.+134    	; 0x2168 <checkAllOutputs+0xcbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	fe 01       	movw	r30, r28
    20e4:	ed 54       	subi	r30, 0x4D	; 77
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	60 81       	ld	r22, Z
    20ea:	71 81       	ldd	r23, Z+1	; 0x01
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e2       	ldi	r20, 0x20	; 32
    20f6:	51 e4       	ldi	r21, 0x41	; 65
    20f8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8e 01       	movw	r16, r28
    2102:	03 55       	subi	r16, 0x53	; 83
    2104:	1f 4f       	sbci	r17, 0xFF	; 255
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	f8 01       	movw	r30, r16
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
    2118:	1f c0       	rjmp	.+62     	; 0x2158 <checkAllOutputs+0xcac>
    211a:	fe 01       	movw	r30, r28
    211c:	e5 55       	subi	r30, 0x55	; 85
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 e9       	ldi	r24, 0x90	; 144
    2122:	91 e0       	ldi	r25, 0x01	; 1
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	fe 01       	movw	r30, r28
    212a:	e5 55       	subi	r30, 0x55	; 85
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	80 81       	ld	r24, Z
    2130:	91 81       	ldd	r25, Z+1	; 0x01
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <checkAllOutputs+0xc86>
    2136:	fe 01       	movw	r30, r28
    2138:	e5 55       	subi	r30, 0x55	; 85
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2140:	de 01       	movw	r26, r28
    2142:	a3 55       	subi	r26, 0x53	; 83
    2144:	bf 4f       	sbci	r27, 0xFF	; 255
    2146:	fe 01       	movw	r30, r28
    2148:	e3 55       	subi	r30, 0x53	; 83
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	11 96       	adiw	r26, 0x01	; 1
    2154:	9c 93       	st	X, r25
    2156:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2158:	fe 01       	movw	r30, r28
    215a:	e3 55       	subi	r30, 0x53	; 83
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	d1 f6       	brne	.-76     	; 0x211a <checkAllOutputs+0xc6e>
    2166:	27 c0       	rjmp	.+78     	; 0x21b6 <checkAllOutputs+0xd0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	8e 01       	movw	r16, r28
    216a:	03 55       	subi	r16, 0x53	; 83
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
    216e:	fe 01       	movw	r30, r28
    2170:	e1 55       	subi	r30, 0x51	; 81
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	60 81       	ld	r22, Z
    2176:	71 81       	ldd	r23, Z+1	; 0x01
    2178:	82 81       	ldd	r24, Z+2	; 0x02
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	f8 01       	movw	r30, r16
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	80 83       	st	Z, r24
    218a:	de 01       	movw	r26, r28
    218c:	a7 55       	subi	r26, 0x57	; 87
    218e:	bf 4f       	sbci	r27, 0xFF	; 255
    2190:	fe 01       	movw	r30, r28
    2192:	e3 55       	subi	r30, 0x53	; 83
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	8d 93       	st	X+, r24
    219c:	9c 93       	st	X, r25
    219e:	fe 01       	movw	r30, r28
    21a0:	e7 55       	subi	r30, 0x57	; 87
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <checkAllOutputs+0xcfc>
    21ac:	fe 01       	movw	r30, r28
    21ae:	e7 55       	subi	r30, 0x57	; 87
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, D2_TWO, 0);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	60 e2       	ldi	r22, 0x20	; 32
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    21c0:	fe 01       	movw	r30, r28
    21c2:	eb 55       	subi	r30, 0x5B	; 91
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a8 ec       	ldi	r26, 0xC8	; 200
    21cc:	b2 e4       	ldi	r27, 0x42	; 66
    21ce:	80 83       	st	Z, r24
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	a2 83       	std	Z+2, r26	; 0x02
    21d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d6:	8e 01       	movw	r16, r28
    21d8:	0f 55       	subi	r16, 0x5F	; 95
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	fe 01       	movw	r30, r28
    21de:	eb 55       	subi	r30, 0x5B	; 91
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	4a e7       	ldi	r20, 0x7A	; 122
    21f0:	55 e4       	ldi	r21, 0x45	; 69
    21f2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	f8 01       	movw	r30, r16
    21fc:	80 83       	st	Z, r24
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	a2 83       	std	Z+2, r26	; 0x02
    2202:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2204:	fe 01       	movw	r30, r28
    2206:	ef 55       	subi	r30, 0x5F	; 95
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	93 81       	ldd	r25, Z+3	; 0x03
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	44 f4       	brge	.+16     	; 0x2232 <checkAllOutputs+0xd86>
		__ticks = 1;
    2222:	fe 01       	movw	r30, r28
    2224:	e1 56       	subi	r30, 0x61	; 97
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	80 83       	st	Z, r24
    2230:	64 c0       	rjmp	.+200    	; 0x22fa <checkAllOutputs+0xe4e>
	else if (__tmp > 65535)
    2232:	fe 01       	movw	r30, r28
    2234:	ef 55       	subi	r30, 0x5F	; 95
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	93 81       	ldd	r25, Z+3	; 0x03
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	3f ef       	ldi	r19, 0xFF	; 255
    2244:	4f e7       	ldi	r20, 0x7F	; 127
    2246:	57 e4       	ldi	r21, 0x47	; 71
    2248:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    224c:	18 16       	cp	r1, r24
    224e:	0c f0       	brlt	.+2      	; 0x2252 <checkAllOutputs+0xda6>
    2250:	43 c0       	rjmp	.+134    	; 0x22d8 <checkAllOutputs+0xe2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	fe 01       	movw	r30, r28
    2254:	eb 55       	subi	r30, 0x5B	; 91
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	60 81       	ld	r22, Z
    225a:	71 81       	ldd	r23, Z+1	; 0x01
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	93 81       	ldd	r25, Z+3	; 0x03
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e2       	ldi	r20, 0x20	; 32
    2266:	51 e4       	ldi	r21, 0x41	; 65
    2268:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	8e 01       	movw	r16, r28
    2272:	01 56       	subi	r16, 0x61	; 97
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	f8 01       	movw	r30, r16
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	80 83       	st	Z, r24
    2288:	1f c0       	rjmp	.+62     	; 0x22c8 <checkAllOutputs+0xe1c>
    228a:	fe 01       	movw	r30, r28
    228c:	e3 56       	subi	r30, 0x63	; 99
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 e9       	ldi	r24, 0x90	; 144
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	80 83       	st	Z, r24
    2298:	fe 01       	movw	r30, r28
    229a:	e3 56       	subi	r30, 0x63	; 99
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	91 81       	ldd	r25, Z+1	; 0x01
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <checkAllOutputs+0xdf6>
    22a6:	fe 01       	movw	r30, r28
    22a8:	e3 56       	subi	r30, 0x63	; 99
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	de 01       	movw	r26, r28
    22b2:	a1 56       	subi	r26, 0x61	; 97
    22b4:	bf 4f       	sbci	r27, 0xFF	; 255
    22b6:	fe 01       	movw	r30, r28
    22b8:	e1 56       	subi	r30, 0x61	; 97
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	80 81       	ld	r24, Z
    22be:	91 81       	ldd	r25, Z+1	; 0x01
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	11 96       	adiw	r26, 0x01	; 1
    22c4:	9c 93       	st	X, r25
    22c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	fe 01       	movw	r30, r28
    22ca:	e1 56       	subi	r30, 0x61	; 97
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	80 81       	ld	r24, Z
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	d1 f6       	brne	.-76     	; 0x228a <checkAllOutputs+0xdde>
    22d6:	27 c0       	rjmp	.+78     	; 0x2326 <checkAllOutputs+0xe7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	8e 01       	movw	r16, r28
    22da:	01 56       	subi	r16, 0x61	; 97
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
    22de:	fe 01       	movw	r30, r28
    22e0:	ef 55       	subi	r30, 0x5F	; 95
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	60 81       	ld	r22, Z
    22e6:	71 81       	ldd	r23, Z+1	; 0x01
    22e8:	82 81       	ldd	r24, Z+2	; 0x02
    22ea:	93 81       	ldd	r25, Z+3	; 0x03
    22ec:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	f8 01       	movw	r30, r16
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	80 83       	st	Z, r24
    22fa:	de 01       	movw	r26, r28
    22fc:	a5 56       	subi	r26, 0x65	; 101
    22fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2300:	fe 01       	movw	r30, r28
    2302:	e1 56       	subi	r30, 0x61	; 97
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	8d 93       	st	X+, r24
    230c:	9c 93       	st	X, r25
    230e:	fe 01       	movw	r30, r28
    2310:	e5 56       	subi	r30, 0x65	; 101
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	91 81       	ldd	r25, Z+1	; 0x01
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <checkAllOutputs+0xe6c>
    231c:	fe 01       	movw	r30, r28
    231e:	e5 56       	subi	r30, 0x65	; 101
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(D1_HTEN, 0, 0);
    2326:	80 e8       	ldi	r24, 0x80	; 128
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2330:	fe 01       	movw	r30, r28
    2332:	e9 56       	subi	r30, 0x69	; 105
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	a8 ec       	ldi	r26, 0xC8	; 200
    233c:	b2 e4       	ldi	r27, 0x42	; 66
    233e:	80 83       	st	Z, r24
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	a2 83       	std	Z+2, r26	; 0x02
    2344:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2346:	8e 01       	movw	r16, r28
    2348:	0d 56       	subi	r16, 0x6D	; 109
    234a:	1f 4f       	sbci	r17, 0xFF	; 255
    234c:	fe 01       	movw	r30, r28
    234e:	e9 56       	subi	r30, 0x69	; 105
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a e7       	ldi	r20, 0x7A	; 122
    2360:	55 e4       	ldi	r21, 0x45	; 69
    2362:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	f8 01       	movw	r30, r16
    236c:	80 83       	st	Z, r24
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	a2 83       	std	Z+2, r26	; 0x02
    2372:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2374:	fe 01       	movw	r30, r28
    2376:	ed 56       	subi	r30, 0x6D	; 109
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	44 f4       	brge	.+16     	; 0x23a2 <checkAllOutputs+0xef6>
		__ticks = 1;
    2392:	fe 01       	movw	r30, r28
    2394:	ef 56       	subi	r30, 0x6F	; 111
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	80 83       	st	Z, r24
    23a0:	64 c0       	rjmp	.+200    	; 0x246a <checkAllOutputs+0xfbe>
	else if (__tmp > 65535)
    23a2:	fe 01       	movw	r30, r28
    23a4:	ed 56       	subi	r30, 0x6D	; 109
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	3f ef       	ldi	r19, 0xFF	; 255
    23b4:	4f e7       	ldi	r20, 0x7F	; 127
    23b6:	57 e4       	ldi	r21, 0x47	; 71
    23b8:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    23bc:	18 16       	cp	r1, r24
    23be:	0c f0       	brlt	.+2      	; 0x23c2 <checkAllOutputs+0xf16>
    23c0:	43 c0       	rjmp	.+134    	; 0x2448 <checkAllOutputs+0xf9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	fe 01       	movw	r30, r28
    23c4:	e9 56       	subi	r30, 0x69	; 105
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e2       	ldi	r20, 0x20	; 32
    23d6:	51 e4       	ldi	r21, 0x41	; 65
    23d8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	8e 01       	movw	r16, r28
    23e2:	0f 56       	subi	r16, 0x6F	; 111
    23e4:	1f 4f       	sbci	r17, 0xFF	; 255
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	f8 01       	movw	r30, r16
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
    23f8:	1f c0       	rjmp	.+62     	; 0x2438 <checkAllOutputs+0xf8c>
    23fa:	fe 01       	movw	r30, r28
    23fc:	e1 57       	subi	r30, 0x71	; 113
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 e9       	ldi	r24, 0x90	; 144
    2402:	91 e0       	ldi	r25, 0x01	; 1
    2404:	91 83       	std	Z+1, r25	; 0x01
    2406:	80 83       	st	Z, r24
    2408:	fe 01       	movw	r30, r28
    240a:	e1 57       	subi	r30, 0x71	; 113
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <checkAllOutputs+0xf66>
    2416:	fe 01       	movw	r30, r28
    2418:	e1 57       	subi	r30, 0x71	; 113
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2420:	de 01       	movw	r26, r28
    2422:	af 56       	subi	r26, 0x6F	; 111
    2424:	bf 4f       	sbci	r27, 0xFF	; 255
    2426:	fe 01       	movw	r30, r28
    2428:	ef 56       	subi	r30, 0x6F	; 111
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	11 96       	adiw	r26, 0x01	; 1
    2434:	9c 93       	st	X, r25
    2436:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2438:	fe 01       	movw	r30, r28
    243a:	ef 56       	subi	r30, 0x6F	; 111
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	d1 f6       	brne	.-76     	; 0x23fa <checkAllOutputs+0xf4e>
    2446:	27 c0       	rjmp	.+78     	; 0x2496 <checkAllOutputs+0xfea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	8e 01       	movw	r16, r28
    244a:	0f 56       	subi	r16, 0x6F	; 111
    244c:	1f 4f       	sbci	r17, 0xFF	; 255
    244e:	fe 01       	movw	r30, r28
    2450:	ed 56       	subi	r30, 0x6D	; 109
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	f8 01       	movw	r30, r16
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	80 83       	st	Z, r24
    246a:	de 01       	movw	r26, r28
    246c:	a3 57       	subi	r26, 0x73	; 115
    246e:	bf 4f       	sbci	r27, 0xFF	; 255
    2470:	fe 01       	movw	r30, r28
    2472:	ef 56       	subi	r30, 0x6F	; 111
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	91 81       	ldd	r25, Z+1	; 0x01
    247a:	8d 93       	st	X+, r24
    247c:	9c 93       	st	X, r25
    247e:	fe 01       	movw	r30, r28
    2480:	e3 57       	subi	r30, 0x73	; 115
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <checkAllOutputs+0xfdc>
    248c:	fe 01       	movw	r30, r28
    248e:	e3 57       	subi	r30, 0x73	; 115
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, D2_ONE, 0);
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    24a0:	fe 01       	movw	r30, r28
    24a2:	e7 57       	subi	r30, 0x77	; 119
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a8 ec       	ldi	r26, 0xC8	; 200
    24ac:	b2 e4       	ldi	r27, 0x42	; 66
    24ae:	80 83       	st	Z, r24
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	a2 83       	std	Z+2, r26	; 0x02
    24b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	8e 01       	movw	r16, r28
    24b8:	0b 57       	subi	r16, 0x7B	; 123
    24ba:	1f 4f       	sbci	r17, 0xFF	; 255
    24bc:	fe 01       	movw	r30, r28
    24be:	e7 57       	subi	r30, 0x77	; 119
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	60 81       	ld	r22, Z
    24c4:	71 81       	ldd	r23, Z+1	; 0x01
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	93 81       	ldd	r25, Z+3	; 0x03
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	4a e7       	ldi	r20, 0x7A	; 122
    24d0:	55 e4       	ldi	r21, 0x45	; 69
    24d2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	f8 01       	movw	r30, r16
    24dc:	80 83       	st	Z, r24
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	a2 83       	std	Z+2, r26	; 0x02
    24e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24e4:	fe 01       	movw	r30, r28
    24e6:	eb 57       	subi	r30, 0x7B	; 123
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    24fe:	88 23       	and	r24, r24
    2500:	44 f4       	brge	.+16     	; 0x2512 <checkAllOutputs+0x1066>
		__ticks = 1;
    2502:	fe 01       	movw	r30, r28
    2504:	ed 57       	subi	r30, 0x7D	; 125
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	64 c0       	rjmp	.+200    	; 0x25da <checkAllOutputs+0x112e>
	else if (__tmp > 65535)
    2512:	fe 01       	movw	r30, r28
    2514:	eb 57       	subi	r30, 0x7B	; 123
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	60 81       	ld	r22, Z
    251a:	71 81       	ldd	r23, Z+1	; 0x01
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	0c f0       	brlt	.+2      	; 0x2532 <checkAllOutputs+0x1086>
    2530:	43 c0       	rjmp	.+134    	; 0x25b8 <checkAllOutputs+0x110c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	fe 01       	movw	r30, r28
    2534:	e7 57       	subi	r30, 0x77	; 119
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e2       	ldi	r20, 0x20	; 32
    2546:	51 e4       	ldi	r21, 0x41	; 65
    2548:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8e 01       	movw	r16, r28
    2552:	0d 57       	subi	r16, 0x7D	; 125
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	f8 01       	movw	r30, r16
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	80 83       	st	Z, r24
    2568:	1f c0       	rjmp	.+62     	; 0x25a8 <checkAllOutputs+0x10fc>
    256a:	fe 01       	movw	r30, r28
    256c:	ef 57       	subi	r30, 0x7F	; 127
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 e9       	ldi	r24, 0x90	; 144
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
    2578:	fe 01       	movw	r30, r28
    257a:	ef 57       	subi	r30, 0x7F	; 127
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <checkAllOutputs+0x10d6>
    2586:	fe 01       	movw	r30, r28
    2588:	ef 57       	subi	r30, 0x7F	; 127
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	de 01       	movw	r26, r28
    2592:	ad 57       	subi	r26, 0x7D	; 125
    2594:	bf 4f       	sbci	r27, 0xFF	; 255
    2596:	fe 01       	movw	r30, r28
    2598:	ed 57       	subi	r30, 0x7D	; 125
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	11 96       	adiw	r26, 0x01	; 1
    25a4:	9c 93       	st	X, r25
    25a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	fe 01       	movw	r30, r28
    25aa:	ed 57       	subi	r30, 0x7D	; 125
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	d1 f6       	brne	.-76     	; 0x256a <checkAllOutputs+0x10be>
    25b6:	27 c0       	rjmp	.+78     	; 0x2606 <checkAllOutputs+0x115a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	8e 01       	movw	r16, r28
    25ba:	0d 57       	subi	r16, 0x7D	; 125
    25bc:	1f 4f       	sbci	r17, 0xFF	; 255
    25be:	fe 01       	movw	r30, r28
    25c0:	eb 57       	subi	r30, 0x7B	; 123
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	f8 01       	movw	r30, r16
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	80 83       	st	Z, r24
    25da:	de 01       	movw	r26, r28
    25dc:	a1 58       	subi	r26, 0x81	; 129
    25de:	bf 4f       	sbci	r27, 0xFF	; 255
    25e0:	fe 01       	movw	r30, r28
    25e2:	ed 57       	subi	r30, 0x7D	; 125
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	8d 93       	st	X+, r24
    25ec:	9c 93       	st	X, r25
    25ee:	fe 01       	movw	r30, r28
    25f0:	e1 58       	subi	r30, 0x81	; 129
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <checkAllOutputs+0x114c>
    25fc:	fe 01       	movw	r30, r28
    25fe:	e1 58       	subi	r30, 0x81	; 129
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, D2_THRE, 0);
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	62 e0       	ldi	r22, 0x02	; 2
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2610:	fe 01       	movw	r30, r28
    2612:	e5 58       	subi	r30, 0x85	; 133
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a8 ec       	ldi	r26, 0xC8	; 200
    261c:	b2 e4       	ldi	r27, 0x42	; 66
    261e:	80 83       	st	Z, r24
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	a2 83       	std	Z+2, r26	; 0x02
    2624:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	8e 01       	movw	r16, r28
    2628:	09 58       	subi	r16, 0x89	; 137
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	fe 01       	movw	r30, r28
    262e:	e5 58       	subi	r30, 0x85	; 133
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	82 81       	ldd	r24, Z+2	; 0x02
    2638:	93 81       	ldd	r25, Z+3	; 0x03
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a e7       	ldi	r20, 0x7A	; 122
    2640:	55 e4       	ldi	r21, 0x45	; 69
    2642:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	f8 01       	movw	r30, r16
    264c:	80 83       	st	Z, r24
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	a2 83       	std	Z+2, r26	; 0x02
    2652:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2654:	fe 01       	movw	r30, r28
    2656:	e9 58       	subi	r30, 0x89	; 137
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e8       	ldi	r20, 0x80	; 128
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    266e:	88 23       	and	r24, r24
    2670:	44 f4       	brge	.+16     	; 0x2682 <checkAllOutputs+0x11d6>
		__ticks = 1;
    2672:	fe 01       	movw	r30, r28
    2674:	eb 58       	subi	r30, 0x8B	; 139
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	64 c0       	rjmp	.+200    	; 0x274a <checkAllOutputs+0x129e>
	else if (__tmp > 65535)
    2682:	fe 01       	movw	r30, r28
    2684:	e9 58       	subi	r30, 0x89	; 137
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	60 81       	ld	r22, Z
    268a:	71 81       	ldd	r23, Z+1	; 0x01
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	93 81       	ldd	r25, Z+3	; 0x03
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	0c f0       	brlt	.+2      	; 0x26a2 <checkAllOutputs+0x11f6>
    26a0:	43 c0       	rjmp	.+134    	; 0x2728 <checkAllOutputs+0x127c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a2:	fe 01       	movw	r30, r28
    26a4:	e5 58       	subi	r30, 0x85	; 133
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e2       	ldi	r20, 0x20	; 32
    26b6:	51 e4       	ldi	r21, 0x41	; 65
    26b8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	8e 01       	movw	r16, r28
    26c2:	0b 58       	subi	r16, 0x8B	; 139
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	f8 01       	movw	r30, r16
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	80 83       	st	Z, r24
    26d8:	1f c0       	rjmp	.+62     	; 0x2718 <checkAllOutputs+0x126c>
    26da:	fe 01       	movw	r30, r28
    26dc:	ed 58       	subi	r30, 0x8D	; 141
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 e9       	ldi	r24, 0x90	; 144
    26e2:	91 e0       	ldi	r25, 0x01	; 1
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
    26e8:	fe 01       	movw	r30, r28
    26ea:	ed 58       	subi	r30, 0x8D	; 141
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	91 81       	ldd	r25, Z+1	; 0x01
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <checkAllOutputs+0x1246>
    26f6:	fe 01       	movw	r30, r28
    26f8:	ed 58       	subi	r30, 0x8D	; 141
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2700:	de 01       	movw	r26, r28
    2702:	ab 58       	subi	r26, 0x8B	; 139
    2704:	bf 4f       	sbci	r27, 0xFF	; 255
    2706:	fe 01       	movw	r30, r28
    2708:	eb 58       	subi	r30, 0x8B	; 139
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	11 96       	adiw	r26, 0x01	; 1
    2714:	9c 93       	st	X, r25
    2716:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2718:	fe 01       	movw	r30, r28
    271a:	eb 58       	subi	r30, 0x8B	; 139
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 81       	ld	r24, Z
    2720:	91 81       	ldd	r25, Z+1	; 0x01
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	d1 f6       	brne	.-76     	; 0x26da <checkAllOutputs+0x122e>
    2726:	27 c0       	rjmp	.+78     	; 0x2776 <checkAllOutputs+0x12ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2728:	8e 01       	movw	r16, r28
    272a:	0b 58       	subi	r16, 0x8B	; 139
    272c:	1f 4f       	sbci	r17, 0xFF	; 255
    272e:	fe 01       	movw	r30, r28
    2730:	e9 58       	subi	r30, 0x89	; 137
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	f8 01       	movw	r30, r16
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
    274a:	de 01       	movw	r26, r28
    274c:	af 58       	subi	r26, 0x8F	; 143
    274e:	bf 4f       	sbci	r27, 0xFF	; 255
    2750:	fe 01       	movw	r30, r28
    2752:	eb 58       	subi	r30, 0x8B	; 139
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	8d 93       	st	X+, r24
    275c:	9c 93       	st	X, r25
    275e:	fe 01       	movw	r30, r28
    2760:	ef 58       	subi	r30, 0x8F	; 143
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <checkAllOutputs+0x12bc>
    276c:	fe 01       	movw	r30, r28
    276e:	ef 58       	subi	r30, 0x8F	; 143
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, D2_FOUR, 0);
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	60 e4       	ldi	r22, 0x40	; 64
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2780:	fe 01       	movw	r30, r28
    2782:	e3 59       	subi	r30, 0x93	; 147
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	a8 ec       	ldi	r26, 0xC8	; 200
    278c:	b2 e4       	ldi	r27, 0x42	; 66
    278e:	80 83       	st	Z, r24
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	a2 83       	std	Z+2, r26	; 0x02
    2794:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2796:	8e 01       	movw	r16, r28
    2798:	07 59       	subi	r16, 0x97	; 151
    279a:	1f 4f       	sbci	r17, 0xFF	; 255
    279c:	fe 01       	movw	r30, r28
    279e:	e3 59       	subi	r30, 0x93	; 147
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	60 81       	ld	r22, Z
    27a4:	71 81       	ldd	r23, Z+1	; 0x01
    27a6:	82 81       	ldd	r24, Z+2	; 0x02
    27a8:	93 81       	ldd	r25, Z+3	; 0x03
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	4a e7       	ldi	r20, 0x7A	; 122
    27b0:	55 e4       	ldi	r21, 0x45	; 69
    27b2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	f8 01       	movw	r30, r16
    27bc:	80 83       	st	Z, r24
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	a2 83       	std	Z+2, r26	; 0x02
    27c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27c4:	fe 01       	movw	r30, r28
    27c6:	e7 59       	subi	r30, 0x97	; 151
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	44 f4       	brge	.+16     	; 0x27f2 <checkAllOutputs+0x1346>
		__ticks = 1;
    27e2:	fe 01       	movw	r30, r28
    27e4:	e9 59       	subi	r30, 0x99	; 153
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	80 83       	st	Z, r24
    27f0:	64 c0       	rjmp	.+200    	; 0x28ba <checkAllOutputs+0x140e>
	else if (__tmp > 65535)
    27f2:	fe 01       	movw	r30, r28
    27f4:	e7 59       	subi	r30, 0x97	; 151
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	3f ef       	ldi	r19, 0xFF	; 255
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	57 e4       	ldi	r21, 0x47	; 71
    2808:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    280c:	18 16       	cp	r1, r24
    280e:	0c f0       	brlt	.+2      	; 0x2812 <checkAllOutputs+0x1366>
    2810:	43 c0       	rjmp	.+134    	; 0x2898 <checkAllOutputs+0x13ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2812:	fe 01       	movw	r30, r28
    2814:	e3 59       	subi	r30, 0x93	; 147
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e2       	ldi	r20, 0x20	; 32
    2826:	51 e4       	ldi	r21, 0x41	; 65
    2828:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8e 01       	movw	r16, r28
    2832:	09 59       	subi	r16, 0x99	; 153
    2834:	1f 4f       	sbci	r17, 0xFF	; 255
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	f8 01       	movw	r30, r16
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
    2848:	1f c0       	rjmp	.+62     	; 0x2888 <checkAllOutputs+0x13dc>
    284a:	fe 01       	movw	r30, r28
    284c:	eb 59       	subi	r30, 0x9B	; 155
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 e9       	ldi	r24, 0x90	; 144
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
    2858:	fe 01       	movw	r30, r28
    285a:	eb 59       	subi	r30, 0x9B	; 155
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <checkAllOutputs+0x13b6>
    2866:	fe 01       	movw	r30, r28
    2868:	eb 59       	subi	r30, 0x9B	; 155
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	91 83       	std	Z+1, r25	; 0x01
    286e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2870:	de 01       	movw	r26, r28
    2872:	a9 59       	subi	r26, 0x99	; 153
    2874:	bf 4f       	sbci	r27, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	e9 59       	subi	r30, 0x99	; 153
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	11 96       	adiw	r26, 0x01	; 1
    2884:	9c 93       	st	X, r25
    2886:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2888:	fe 01       	movw	r30, r28
    288a:	e9 59       	subi	r30, 0x99	; 153
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 81       	ld	r24, Z
    2890:	91 81       	ldd	r25, Z+1	; 0x01
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	d1 f6       	brne	.-76     	; 0x284a <checkAllOutputs+0x139e>
    2896:	27 c0       	rjmp	.+78     	; 0x28e6 <checkAllOutputs+0x143a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2898:	8e 01       	movw	r16, r28
    289a:	09 59       	subi	r16, 0x99	; 153
    289c:	1f 4f       	sbci	r17, 0xFF	; 255
    289e:	fe 01       	movw	r30, r28
    28a0:	e7 59       	subi	r30, 0x97	; 151
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	f8 01       	movw	r30, r16
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
    28ba:	de 01       	movw	r26, r28
    28bc:	ad 59       	subi	r26, 0x9D	; 157
    28be:	bf 4f       	sbci	r27, 0xFF	; 255
    28c0:	fe 01       	movw	r30, r28
    28c2:	e9 59       	subi	r30, 0x99	; 153
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	8d 93       	st	X+, r24
    28cc:	9c 93       	st	X, r25
    28ce:	fe 01       	movw	r30, r28
    28d0:	ed 59       	subi	r30, 0x9D	; 157
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <checkAllOutputs+0x142c>
    28dc:	fe 01       	movw	r30, r28
    28de:	ed 59       	subi	r30, 0x9D	; 157
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(0, D2_TWLV, 0);
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	60 e1       	ldi	r22, 0x10	; 16
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    28f0:	fe 01       	movw	r30, r28
    28f2:	e1 5a       	subi	r30, 0xA1	; 161
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a8 ec       	ldi	r26, 0xC8	; 200
    28fc:	b2 e4       	ldi	r27, 0x42	; 66
    28fe:	80 83       	st	Z, r24
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	a2 83       	std	Z+2, r26	; 0x02
    2904:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2906:	8e 01       	movw	r16, r28
    2908:	05 5a       	subi	r16, 0xA5	; 165
    290a:	1f 4f       	sbci	r17, 0xFF	; 255
    290c:	fe 01       	movw	r30, r28
    290e:	e1 5a       	subi	r30, 0xA1	; 161
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	60 81       	ld	r22, Z
    2914:	71 81       	ldd	r23, Z+1	; 0x01
    2916:	82 81       	ldd	r24, Z+2	; 0x02
    2918:	93 81       	ldd	r25, Z+3	; 0x03
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4a e7       	ldi	r20, 0x7A	; 122
    2920:	55 e4       	ldi	r21, 0x45	; 69
    2922:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	f8 01       	movw	r30, r16
    292c:	80 83       	st	Z, r24
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	a2 83       	std	Z+2, r26	; 0x02
    2932:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2934:	fe 01       	movw	r30, r28
    2936:	e5 5a       	subi	r30, 0xA5	; 165
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	60 81       	ld	r22, Z
    293c:	71 81       	ldd	r23, Z+1	; 0x01
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e8       	ldi	r20, 0x80	; 128
    2948:	5f e3       	ldi	r21, 0x3F	; 63
    294a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    294e:	88 23       	and	r24, r24
    2950:	44 f4       	brge	.+16     	; 0x2962 <checkAllOutputs+0x14b6>
		__ticks = 1;
    2952:	fe 01       	movw	r30, r28
    2954:	e7 5a       	subi	r30, 0xA7	; 167
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	91 83       	std	Z+1, r25	; 0x01
    295e:	80 83       	st	Z, r24
    2960:	64 c0       	rjmp	.+200    	; 0x2a2a <checkAllOutputs+0x157e>
	else if (__tmp > 65535)
    2962:	fe 01       	movw	r30, r28
    2964:	e5 5a       	subi	r30, 0xA5	; 165
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	60 81       	ld	r22, Z
    296a:	71 81       	ldd	r23, Z+1	; 0x01
    296c:	82 81       	ldd	r24, Z+2	; 0x02
    296e:	93 81       	ldd	r25, Z+3	; 0x03
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	3f ef       	ldi	r19, 0xFF	; 255
    2974:	4f e7       	ldi	r20, 0x7F	; 127
    2976:	57 e4       	ldi	r21, 0x47	; 71
    2978:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    297c:	18 16       	cp	r1, r24
    297e:	0c f0       	brlt	.+2      	; 0x2982 <checkAllOutputs+0x14d6>
    2980:	43 c0       	rjmp	.+134    	; 0x2a08 <checkAllOutputs+0x155c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2982:	fe 01       	movw	r30, r28
    2984:	e1 5a       	subi	r30, 0xA1	; 161
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	60 81       	ld	r22, Z
    298a:	71 81       	ldd	r23, Z+1	; 0x01
    298c:	82 81       	ldd	r24, Z+2	; 0x02
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e2       	ldi	r20, 0x20	; 32
    2996:	51 e4       	ldi	r21, 0x41	; 65
    2998:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	8e 01       	movw	r16, r28
    29a2:	07 5a       	subi	r16, 0xA7	; 167
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	f8 01       	movw	r30, r16
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	80 83       	st	Z, r24
    29b8:	1f c0       	rjmp	.+62     	; 0x29f8 <checkAllOutputs+0x154c>
    29ba:	fe 01       	movw	r30, r28
    29bc:	e9 5a       	subi	r30, 0xA9	; 169
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 e9       	ldi	r24, 0x90	; 144
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	80 83       	st	Z, r24
    29c8:	fe 01       	movw	r30, r28
    29ca:	e9 5a       	subi	r30, 0xA9	; 169
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <checkAllOutputs+0x1526>
    29d6:	fe 01       	movw	r30, r28
    29d8:	e9 5a       	subi	r30, 0xA9	; 169
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	91 83       	std	Z+1, r25	; 0x01
    29de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e0:	de 01       	movw	r26, r28
    29e2:	a7 5a       	subi	r26, 0xA7	; 167
    29e4:	bf 4f       	sbci	r27, 0xFF	; 255
    29e6:	fe 01       	movw	r30, r28
    29e8:	e7 5a       	subi	r30, 0xA7	; 167
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	11 96       	adiw	r26, 0x01	; 1
    29f4:	9c 93       	st	X, r25
    29f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f8:	fe 01       	movw	r30, r28
    29fa:	e7 5a       	subi	r30, 0xA7	; 167
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	d1 f6       	brne	.-76     	; 0x29ba <checkAllOutputs+0x150e>
    2a06:	27 c0       	rjmp	.+78     	; 0x2a56 <checkAllOutputs+0x15aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	8e 01       	movw	r16, r28
    2a0a:	07 5a       	subi	r16, 0xA7	; 167
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e5 5a       	subi	r30, 0xA5	; 165
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	f8 01       	movw	r30, r16
    2a26:	91 83       	std	Z+1, r25	; 0x01
    2a28:	80 83       	st	Z, r24
    2a2a:	de 01       	movw	r26, r28
    2a2c:	ab 5a       	subi	r26, 0xAB	; 171
    2a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a30:	fe 01       	movw	r30, r28
    2a32:	e7 5a       	subi	r30, 0xA7	; 167
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	8d 93       	st	X+, r24
    2a3c:	9c 93       	st	X, r25
    2a3e:	fe 01       	movw	r30, r28
    2a40:	eb 5a       	subi	r30, 0xAB	; 171
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	80 81       	ld	r24, Z
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <checkAllOutputs+0x159c>
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	eb 5a       	subi	r30, 0xAB	; 171
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(D1_SIX, 0, 0);
    2a56:	80 e2       	ldi	r24, 0x20	; 32
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	40 e0       	ldi	r20, 0x00	; 0
    2a5c:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2a60:	fe 01       	movw	r30, r28
    2a62:	ef 5a       	subi	r30, 0xAF	; 175
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a8 ec       	ldi	r26, 0xC8	; 200
    2a6c:	b2 e4       	ldi	r27, 0x42	; 66
    2a6e:	80 83       	st	Z, r24
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	a2 83       	std	Z+2, r26	; 0x02
    2a74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a76:	8e 01       	movw	r16, r28
    2a78:	03 5b       	subi	r16, 0xB3	; 179
    2a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ef 5a       	subi	r30, 0xAF	; 175
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	4a e7       	ldi	r20, 0x7A	; 122
    2a90:	55 e4       	ldi	r21, 0x45	; 69
    2a92:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	80 83       	st	Z, r24
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	a2 83       	std	Z+2, r26	; 0x02
    2aa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e3 5b       	subi	r30, 0xB3	; 179
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	44 f4       	brge	.+16     	; 0x2ad2 <checkAllOutputs+0x1626>
		__ticks = 1;
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e5 5b       	subi	r30, 0xB5	; 181
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	80 83       	st	Z, r24
    2ad0:	64 c0       	rjmp	.+200    	; 0x2b9a <checkAllOutputs+0x16ee>
	else if (__tmp > 65535)
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e3 5b       	subi	r30, 0xB3	; 179
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	0c f0       	brlt	.+2      	; 0x2af2 <checkAllOutputs+0x1646>
    2af0:	43 c0       	rjmp	.+134    	; 0x2b78 <checkAllOutputs+0x16cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af2:	fe 01       	movw	r30, r28
    2af4:	ef 5a       	subi	r30, 0xAF	; 175
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e2       	ldi	r20, 0x20	; 32
    2b06:	51 e4       	ldi	r21, 0x41	; 65
    2b08:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	8e 01       	movw	r16, r28
    2b12:	05 5b       	subi	r16, 0xB5	; 181
    2b14:	1f 4f       	sbci	r17, 0xFF	; 255
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	f8 01       	movw	r30, r16
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	80 83       	st	Z, r24
    2b28:	1f c0       	rjmp	.+62     	; 0x2b68 <checkAllOutputs+0x16bc>
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e7 5b       	subi	r30, 0xB7	; 183
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 e9       	ldi	r24, 0x90	; 144
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	91 83       	std	Z+1, r25	; 0x01
    2b36:	80 83       	st	Z, r24
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e7 5b       	subi	r30, 0xB7	; 183
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	80 81       	ld	r24, Z
    2b40:	91 81       	ldd	r25, Z+1	; 0x01
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <checkAllOutputs+0x1696>
    2b46:	fe 01       	movw	r30, r28
    2b48:	e7 5b       	subi	r30, 0xB7	; 183
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	de 01       	movw	r26, r28
    2b52:	a5 5b       	subi	r26, 0xB5	; 181
    2b54:	bf 4f       	sbci	r27, 0xFF	; 255
    2b56:	fe 01       	movw	r30, r28
    2b58:	e5 5b       	subi	r30, 0xB5	; 181
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	91 81       	ldd	r25, Z+1	; 0x01
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	11 96       	adiw	r26, 0x01	; 1
    2b64:	9c 93       	st	X, r25
    2b66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e5 5b       	subi	r30, 0xB5	; 181
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 81       	ld	r24, Z
    2b70:	91 81       	ldd	r25, Z+1	; 0x01
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	d1 f6       	brne	.-76     	; 0x2b2a <checkAllOutputs+0x167e>
    2b76:	27 c0       	rjmp	.+78     	; 0x2bc6 <checkAllOutputs+0x171a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b78:	8e 01       	movw	r16, r28
    2b7a:	05 5b       	subi	r16, 0xB5	; 181
    2b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e3 5b       	subi	r30, 0xB3	; 179
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	60 81       	ld	r22, Z
    2b86:	71 81       	ldd	r23, Z+1	; 0x01
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	f8 01       	movw	r30, r16
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	80 83       	st	Z, r24
    2b9a:	de 01       	movw	r26, r28
    2b9c:	a9 5b       	subi	r26, 0xB9	; 185
    2b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e5 5b       	subi	r30, 0xB5	; 181
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	91 81       	ldd	r25, Z+1	; 0x01
    2baa:	8d 93       	st	X+, r24
    2bac:	9c 93       	st	X, r25
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e9 5b       	subi	r30, 0xB9	; 185
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <checkAllOutputs+0x170c>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e9 5b       	subi	r30, 0xB9	; 185
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	80 83       	st	Z, r24
	_delay_ms(100);
	setTime(D1_EGHT, 0, 0);
    2bc6:	80 e4       	ldi	r24, 0x40	; 64
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ed 5b       	subi	r30, 0xBD	; 189
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a8 ec       	ldi	r26, 0xC8	; 200
    2bdc:	b2 e4       	ldi	r27, 0x42	; 66
    2bde:	80 83       	st	Z, r24
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	a2 83       	std	Z+2, r26	; 0x02
    2be4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be6:	8e 01       	movw	r16, r28
    2be8:	01 5c       	subi	r16, 0xC1	; 193
    2bea:	1f 4f       	sbci	r17, 0xFF	; 255
    2bec:	fe 01       	movw	r30, r28
    2bee:	ed 5b       	subi	r30, 0xBD	; 189
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	60 81       	ld	r22, Z
    2bf4:	71 81       	ldd	r23, Z+1	; 0x01
    2bf6:	82 81       	ldd	r24, Z+2	; 0x02
    2bf8:	93 81       	ldd	r25, Z+3	; 0x03
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	4a e7       	ldi	r20, 0x7A	; 122
    2c00:	55 e4       	ldi	r21, 0x45	; 69
    2c02:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	80 83       	st	Z, r24
    2c0e:	91 83       	std	Z+1, r25	; 0x01
    2c10:	a2 83       	std	Z+2, r26	; 0x02
    2c12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c14:	fe 01       	movw	r30, r28
    2c16:	ff 96       	adiw	r30, 0x3f	; 63
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e8       	ldi	r20, 0x80	; 128
    2c26:	5f e3       	ldi	r21, 0x3F	; 63
    2c28:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    2c2c:	88 23       	and	r24, r24
    2c2e:	2c f4       	brge	.+10     	; 0x2c3a <checkAllOutputs+0x178e>
		__ticks = 1;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	9e af       	std	Y+62, r25	; 0x3e
    2c36:	8d af       	std	Y+61, r24	; 0x3d
    2c38:	46 c0       	rjmp	.+140    	; 0x2cc6 <checkAllOutputs+0x181a>
	else if (__tmp > 65535)
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	ff 96       	adiw	r30, 0x3f	; 63
    2c3e:	60 81       	ld	r22, Z
    2c40:	71 81       	ldd	r23, Z+1	; 0x01
    2c42:	82 81       	ldd	r24, Z+2	; 0x02
    2c44:	93 81       	ldd	r25, Z+3	; 0x03
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	3f ef       	ldi	r19, 0xFF	; 255
    2c4a:	4f e7       	ldi	r20, 0x7F	; 127
    2c4c:	57 e4       	ldi	r21, 0x47	; 71
    2c4e:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    2c52:	18 16       	cp	r1, r24
    2c54:	64 f5       	brge	.+88     	; 0x2cae <checkAllOutputs+0x1802>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c56:	fe 01       	movw	r30, r28
    2c58:	ed 5b       	subi	r30, 0xBD	; 189
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	60 81       	ld	r22, Z
    2c5e:	71 81       	ldd	r23, Z+1	; 0x01
    2c60:	82 81       	ldd	r24, Z+2	; 0x02
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e2       	ldi	r20, 0x20	; 32
    2c6a:	51 e4       	ldi	r21, 0x41	; 65
    2c6c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	bc 01       	movw	r22, r24
    2c76:	cd 01       	movw	r24, r26
    2c78:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	9e af       	std	Y+62, r25	; 0x3e
    2c82:	8d af       	std	Y+61, r24	; 0x3d
    2c84:	0f c0       	rjmp	.+30     	; 0x2ca4 <checkAllOutputs+0x17f8>
    2c86:	80 e9       	ldi	r24, 0x90	; 144
    2c88:	91 e0       	ldi	r25, 0x01	; 1
    2c8a:	9c af       	std	Y+60, r25	; 0x3c
    2c8c:	8b af       	std	Y+59, r24	; 0x3b
    2c8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c90:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <checkAllOutputs+0x17e6>
    2c96:	9c af       	std	Y+60, r25	; 0x3c
    2c98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	9e af       	std	Y+62, r25	; 0x3e
    2ca2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ca6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	69 f7       	brne	.-38     	; 0x2c86 <checkAllOutputs+0x17da>
    2cac:	16 c0       	rjmp	.+44     	; 0x2cda <checkAllOutputs+0x182e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cae:	fe 01       	movw	r30, r28
    2cb0:	ff 96       	adiw	r30, 0x3f	; 63
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9e af       	std	Y+62, r25	; 0x3e
    2cc4:	8d af       	std	Y+61, r24	; 0x3d
    2cc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cca:	9a af       	std	Y+58, r25	; 0x3a
    2ccc:	89 af       	std	Y+57, r24	; 0x39
    2cce:	89 ad       	ldd	r24, Y+57	; 0x39
    2cd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <checkAllOutputs+0x1826>
    2cd6:	9a af       	std	Y+58, r25	; 0x3a
    2cd8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	setTime(D1_SEVN, 0, 0);
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	40 e0       	ldi	r20, 0x00	; 0
    2ce0:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a8 ec       	ldi	r26, 0xC8	; 200
    2cea:	b2 e4       	ldi	r27, 0x42	; 66
    2cec:	8d ab       	std	Y+53, r24	; 0x35
    2cee:	9e ab       	std	Y+54, r25	; 0x36
    2cf0:	af ab       	std	Y+55, r26	; 0x37
    2cf2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf4:	6d a9       	ldd	r22, Y+53	; 0x35
    2cf6:	7e a9       	ldd	r23, Y+54	; 0x36
    2cf8:	8f a9       	ldd	r24, Y+55	; 0x37
    2cfa:	98 ad       	ldd	r25, Y+56	; 0x38
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	4a e7       	ldi	r20, 0x7A	; 122
    2d02:	55 e4       	ldi	r21, 0x45	; 69
    2d04:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	89 ab       	std	Y+49, r24	; 0x31
    2d0e:	9a ab       	std	Y+50, r25	; 0x32
    2d10:	ab ab       	std	Y+51, r26	; 0x33
    2d12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d14:	69 a9       	ldd	r22, Y+49	; 0x31
    2d16:	7a a9       	ldd	r23, Y+50	; 0x32
    2d18:	8b a9       	ldd	r24, Y+51	; 0x33
    2d1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e8       	ldi	r20, 0x80	; 128
    2d22:	5f e3       	ldi	r21, 0x3F	; 63
    2d24:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    2d28:	88 23       	and	r24, r24
    2d2a:	2c f4       	brge	.+10     	; 0x2d36 <checkAllOutputs+0x188a>
		__ticks = 1;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	98 ab       	std	Y+48, r25	; 0x30
    2d32:	8f a7       	std	Y+47, r24	; 0x2f
    2d34:	3f c0       	rjmp	.+126    	; 0x2db4 <checkAllOutputs+0x1908>
	else if (__tmp > 65535)
    2d36:	69 a9       	ldd	r22, Y+49	; 0x31
    2d38:	7a a9       	ldd	r23, Y+50	; 0x32
    2d3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	3f ef       	ldi	r19, 0xFF	; 255
    2d42:	4f e7       	ldi	r20, 0x7F	; 127
    2d44:	57 e4       	ldi	r21, 0x47	; 71
    2d46:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    2d4a:	18 16       	cp	r1, r24
    2d4c:	4c f5       	brge	.+82     	; 0x2da0 <checkAllOutputs+0x18f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d50:	7e a9       	ldd	r23, Y+54	; 0x36
    2d52:	8f a9       	ldd	r24, Y+55	; 0x37
    2d54:	98 ad       	ldd	r25, Y+56	; 0x38
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e2       	ldi	r20, 0x20	; 32
    2d5c:	51 e4       	ldi	r21, 0x41	; 65
    2d5e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	98 ab       	std	Y+48, r25	; 0x30
    2d74:	8f a7       	std	Y+47, r24	; 0x2f
    2d76:	0f c0       	rjmp	.+30     	; 0x2d96 <checkAllOutputs+0x18ea>
    2d78:	80 e9       	ldi	r24, 0x90	; 144
    2d7a:	91 e0       	ldi	r25, 0x01	; 1
    2d7c:	9e a7       	std	Y+46, r25	; 0x2e
    2d7e:	8d a7       	std	Y+45, r24	; 0x2d
    2d80:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d82:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <checkAllOutputs+0x18d8>
    2d88:	9e a7       	std	Y+46, r25	; 0x2e
    2d8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	98 ab       	std	Y+48, r25	; 0x30
    2d94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d98:	98 a9       	ldd	r25, Y+48	; 0x30
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	69 f7       	brne	.-38     	; 0x2d78 <checkAllOutputs+0x18cc>
    2d9e:	14 c0       	rjmp	.+40     	; 0x2dc8 <checkAllOutputs+0x191c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da0:	69 a9       	ldd	r22, Y+49	; 0x31
    2da2:	7a a9       	ldd	r23, Y+50	; 0x32
    2da4:	8b a9       	ldd	r24, Y+51	; 0x33
    2da6:	9c a9       	ldd	r25, Y+52	; 0x34
    2da8:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	98 ab       	std	Y+48, r25	; 0x30
    2db2:	8f a7       	std	Y+47, r24	; 0x2f
    2db4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2db6:	98 a9       	ldd	r25, Y+48	; 0x30
    2db8:	9c a7       	std	Y+44, r25	; 0x2c
    2dba:	8b a7       	std	Y+43, r24	; 0x2b
    2dbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <checkAllOutputs+0x1914>
    2dc4:	9c a7       	std	Y+44, r25	; 0x2c
    2dc6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	setTime(D1_NINE, 0, 0);
    2dc8:	84 e0       	ldi	r24, 0x04	; 4
    2dca:	60 e0       	ldi	r22, 0x00	; 0
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	a8 ec       	ldi	r26, 0xC8	; 200
    2dd8:	b2 e4       	ldi	r27, 0x42	; 66
    2dda:	8f a3       	std	Y+39, r24	; 0x27
    2ddc:	98 a7       	std	Y+40, r25	; 0x28
    2dde:	a9 a7       	std	Y+41, r26	; 0x29
    2de0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de2:	6f a1       	ldd	r22, Y+39	; 0x27
    2de4:	78 a5       	ldd	r23, Y+40	; 0x28
    2de6:	89 a5       	ldd	r24, Y+41	; 0x29
    2de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	4a e7       	ldi	r20, 0x7A	; 122
    2df0:	55 e4       	ldi	r21, 0x45	; 69
    2df2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	8b a3       	std	Y+35, r24	; 0x23
    2dfc:	9c a3       	std	Y+36, r25	; 0x24
    2dfe:	ad a3       	std	Y+37, r26	; 0x25
    2e00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e02:	6b a1       	ldd	r22, Y+35	; 0x23
    2e04:	7c a1       	ldd	r23, Y+36	; 0x24
    2e06:	8d a1       	ldd	r24, Y+37	; 0x25
    2e08:	9e a1       	ldd	r25, Y+38	; 0x26
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e8       	ldi	r20, 0x80	; 128
    2e10:	5f e3       	ldi	r21, 0x3F	; 63
    2e12:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    2e16:	88 23       	and	r24, r24
    2e18:	2c f4       	brge	.+10     	; 0x2e24 <checkAllOutputs+0x1978>
		__ticks = 1;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9a a3       	std	Y+34, r25	; 0x22
    2e20:	89 a3       	std	Y+33, r24	; 0x21
    2e22:	3f c0       	rjmp	.+126    	; 0x2ea2 <checkAllOutputs+0x19f6>
	else if (__tmp > 65535)
    2e24:	6b a1       	ldd	r22, Y+35	; 0x23
    2e26:	7c a1       	ldd	r23, Y+36	; 0x24
    2e28:	8d a1       	ldd	r24, Y+37	; 0x25
    2e2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	3f ef       	ldi	r19, 0xFF	; 255
    2e30:	4f e7       	ldi	r20, 0x7F	; 127
    2e32:	57 e4       	ldi	r21, 0x47	; 71
    2e34:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    2e38:	18 16       	cp	r1, r24
    2e3a:	4c f5       	brge	.+82     	; 0x2e8e <checkAllOutputs+0x19e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e40:	89 a5       	ldd	r24, Y+41	; 0x29
    2e42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e2       	ldi	r20, 0x20	; 32
    2e4a:	51 e4       	ldi	r21, 0x41	; 65
    2e4c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	bc 01       	movw	r22, r24
    2e56:	cd 01       	movw	r24, r26
    2e58:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	9a a3       	std	Y+34, r25	; 0x22
    2e62:	89 a3       	std	Y+33, r24	; 0x21
    2e64:	0f c0       	rjmp	.+30     	; 0x2e84 <checkAllOutputs+0x19d8>
    2e66:	80 e9       	ldi	r24, 0x90	; 144
    2e68:	91 e0       	ldi	r25, 0x01	; 1
    2e6a:	98 a3       	std	Y+32, r25	; 0x20
    2e6c:	8f 8f       	std	Y+31, r24	; 0x1f
    2e6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e70:	98 a1       	ldd	r25, Y+32	; 0x20
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <checkAllOutputs+0x19c6>
    2e76:	98 a3       	std	Y+32, r25	; 0x20
    2e78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	9a a3       	std	Y+34, r25	; 0x22
    2e82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e84:	89 a1       	ldd	r24, Y+33	; 0x21
    2e86:	9a a1       	ldd	r25, Y+34	; 0x22
    2e88:	00 97       	sbiw	r24, 0x00	; 0
    2e8a:	69 f7       	brne	.-38     	; 0x2e66 <checkAllOutputs+0x19ba>
    2e8c:	14 c0       	rjmp	.+40     	; 0x2eb6 <checkAllOutputs+0x1a0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e90:	7c a1       	ldd	r23, Y+36	; 0x24
    2e92:	8d a1       	ldd	r24, Y+37	; 0x25
    2e94:	9e a1       	ldd	r25, Y+38	; 0x26
    2e96:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	9a a3       	std	Y+34, r25	; 0x22
    2ea0:	89 a3       	std	Y+33, r24	; 0x21
    2ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ea8:	8d 8f       	std	Y+29, r24	; 0x1d
    2eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <checkAllOutputs+0x1a02>
    2eb2:	9e 8f       	std	Y+30, r25	; 0x1e
    2eb4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	setTime(D1_HFVE, 0, 0);
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	a8 ec       	ldi	r26, 0xC8	; 200
    2ec6:	b2 e4       	ldi	r27, 0x42	; 66
    2ec8:	89 8f       	std	Y+25, r24	; 0x19
    2eca:	9a 8f       	std	Y+26, r25	; 0x1a
    2ecc:	ab 8f       	std	Y+27, r26	; 0x1b
    2ece:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	4a e7       	ldi	r20, 0x7A	; 122
    2ede:	55 e4       	ldi	r21, 0x45	; 69
    2ee0:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	8d 8b       	std	Y+21, r24	; 0x15
    2eea:	9e 8b       	std	Y+22, r25	; 0x16
    2eec:	af 8b       	std	Y+23, r26	; 0x17
    2eee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e8       	ldi	r20, 0x80	; 128
    2efe:	5f e3       	ldi	r21, 0x3F	; 63
    2f00:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    2f04:	88 23       	and	r24, r24
    2f06:	2c f4       	brge	.+10     	; 0x2f12 <checkAllOutputs+0x1a66>
		__ticks = 1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	9c 8b       	std	Y+20, r25	; 0x14
    2f0e:	8b 8b       	std	Y+19, r24	; 0x13
    2f10:	3f c0       	rjmp	.+126    	; 0x2f90 <checkAllOutputs+0x1ae4>
	else if (__tmp > 65535)
    2f12:	6d 89       	ldd	r22, Y+21	; 0x15
    2f14:	7e 89       	ldd	r23, Y+22	; 0x16
    2f16:	8f 89       	ldd	r24, Y+23	; 0x17
    2f18:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	3f ef       	ldi	r19, 0xFF	; 255
    2f1e:	4f e7       	ldi	r20, 0x7F	; 127
    2f20:	57 e4       	ldi	r21, 0x47	; 71
    2f22:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    2f26:	18 16       	cp	r1, r24
    2f28:	4c f5       	brge	.+82     	; 0x2f7c <checkAllOutputs+0x1ad0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e2       	ldi	r20, 0x20	; 32
    2f38:	51 e4       	ldi	r21, 0x41	; 65
    2f3a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	bc 01       	movw	r22, r24
    2f44:	cd 01       	movw	r24, r26
    2f46:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9c 8b       	std	Y+20, r25	; 0x14
    2f50:	8b 8b       	std	Y+19, r24	; 0x13
    2f52:	0f c0       	rjmp	.+30     	; 0x2f72 <checkAllOutputs+0x1ac6>
    2f54:	80 e9       	ldi	r24, 0x90	; 144
    2f56:	91 e0       	ldi	r25, 0x01	; 1
    2f58:	9a 8b       	std	Y+18, r25	; 0x12
    2f5a:	89 8b       	std	Y+17, r24	; 0x11
    2f5c:	89 89       	ldd	r24, Y+17	; 0x11
    2f5e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <checkAllOutputs+0x1ab4>
    2f64:	9a 8b       	std	Y+18, r25	; 0x12
    2f66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f68:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	9c 8b       	std	Y+20, r25	; 0x14
    2f70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f72:	8b 89       	ldd	r24, Y+19	; 0x13
    2f74:	9c 89       	ldd	r25, Y+20	; 0x14
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	69 f7       	brne	.-38     	; 0x2f54 <checkAllOutputs+0x1aa8>
    2f7a:	14 c0       	rjmp	.+40     	; 0x2fa4 <checkAllOutputs+0x1af8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f80:	8f 89       	ldd	r24, Y+23	; 0x17
    2f82:	98 8d       	ldd	r25, Y+24	; 0x18
    2f84:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	9c 8b       	std	Y+20, r25	; 0x14
    2f8e:	8b 8b       	std	Y+19, r24	; 0x13
    2f90:	8b 89       	ldd	r24, Y+19	; 0x13
    2f92:	9c 89       	ldd	r25, Y+20	; 0x14
    2f94:	98 8b       	std	Y+16, r25	; 0x10
    2f96:	8f 87       	std	Y+15, r24	; 0x0f
    2f98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f9a:	98 89       	ldd	r25, Y+16	; 0x10
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <checkAllOutputs+0x1af0>
    2fa0:	98 8b       	std	Y+16, r25	; 0x10
    2fa2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	setTime(D1_OCLK, 0, 0);
    2fa4:	80 e1       	ldi	r24, 0x10	; 16
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	40 e0       	ldi	r20, 0x00	; 0
    2faa:	0e 94 92 05 	call	0xb24	; 0xb24 <setTime>
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	a8 ec       	ldi	r26, 0xC8	; 200
    2fb4:	b2 e4       	ldi	r27, 0x42	; 66
    2fb6:	8b 87       	std	Y+11, r24	; 0x0b
    2fb8:	9c 87       	std	Y+12, r25	; 0x0c
    2fba:	ad 87       	std	Y+13, r26	; 0x0d
    2fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	4a e7       	ldi	r20, 0x7A	; 122
    2fcc:	55 e4       	ldi	r21, 0x45	; 69
    2fce:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	8f 83       	std	Y+7, r24	; 0x07
    2fd8:	98 87       	std	Y+8, r25	; 0x08
    2fda:	a9 87       	std	Y+9, r26	; 0x09
    2fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fde:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe0:	78 85       	ldd	r23, Y+8	; 0x08
    2fe2:	89 85       	ldd	r24, Y+9	; 0x09
    2fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e8       	ldi	r20, 0x80	; 128
    2fec:	5f e3       	ldi	r21, 0x3F	; 63
    2fee:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    2ff2:	88 23       	and	r24, r24
    2ff4:	2c f4       	brge	.+10     	; 0x3000 <checkAllOutputs+0x1b54>
		__ticks = 1;
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
    2ffe:	3f c0       	rjmp	.+126    	; 0x307e <checkAllOutputs+0x1bd2>
	else if (__tmp > 65535)
    3000:	6f 81       	ldd	r22, Y+7	; 0x07
    3002:	78 85       	ldd	r23, Y+8	; 0x08
    3004:	89 85       	ldd	r24, Y+9	; 0x09
    3006:	9a 85       	ldd	r25, Y+10	; 0x0a
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	3f ef       	ldi	r19, 0xFF	; 255
    300c:	4f e7       	ldi	r20, 0x7F	; 127
    300e:	57 e4       	ldi	r21, 0x47	; 71
    3010:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    3014:	18 16       	cp	r1, r24
    3016:	4c f5       	brge	.+82     	; 0x306a <checkAllOutputs+0x1bbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3018:	6b 85       	ldd	r22, Y+11	; 0x0b
    301a:	7c 85       	ldd	r23, Y+12	; 0x0c
    301c:	8d 85       	ldd	r24, Y+13	; 0x0d
    301e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e2       	ldi	r20, 0x20	; 32
    3026:	51 e4       	ldi	r21, 0x41	; 65
    3028:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	bc 01       	movw	r22, r24
    3032:	cd 01       	movw	r24, r26
    3034:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	8d 83       	std	Y+5, r24	; 0x05
    3040:	0f c0       	rjmp	.+30     	; 0x3060 <checkAllOutputs+0x1bb4>
    3042:	80 e9       	ldi	r24, 0x90	; 144
    3044:	91 e0       	ldi	r25, 0x01	; 1
    3046:	9c 83       	std	Y+4, r25	; 0x04
    3048:	8b 83       	std	Y+3, r24	; 0x03
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <checkAllOutputs+0x1ba2>
    3052:	9c 83       	std	Y+4, r25	; 0x04
    3054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	9e 83       	std	Y+6, r25	; 0x06
    305e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3060:	8d 81       	ldd	r24, Y+5	; 0x05
    3062:	9e 81       	ldd	r25, Y+6	; 0x06
    3064:	00 97       	sbiw	r24, 0x00	; 0
    3066:	69 f7       	brne	.-38     	; 0x3042 <checkAllOutputs+0x1b96>
    3068:	14 c0       	rjmp	.+40     	; 0x3092 <checkAllOutputs+0x1be6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306a:	6f 81       	ldd	r22, Y+7	; 0x07
    306c:	78 85       	ldd	r23, Y+8	; 0x08
    306e:	89 85       	ldd	r24, Y+9	; 0x09
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	9e 83       	std	Y+6, r25	; 0x06
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	9e 81       	ldd	r25, Y+6	; 0x06
    3082:	9a 83       	std	Y+2, r25	; 0x02
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <checkAllOutputs+0x1bde>
    308e:	9a 83       	std	Y+2, r25	; 0x02
    3090:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    3092:	ca 5d       	subi	r28, 0xDA	; 218
    3094:	de 4f       	sbci	r29, 0xFE	; 254
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	08 95       	ret

000030aa <loop>:

void loop() {
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	2e 97       	sbiw	r28, 0x0e	; 14
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
	checkAllOutputs();
    30be:	0e 94 56 0a 	call	0x14ac	; 0x14ac <checkAllOutputs>
	hour(15);
    30c2:	8f e0       	ldi	r24, 0x0F	; 15
    30c4:	0e 94 b4 04 	call	0x968	; 0x968 <hour>
	minutes(43);
    30c8:	8b e2       	ldi	r24, 0x2B	; 43
    30ca:	0e 94 a5 04 	call	0x94a	; 0x94a <minutes>
	seconds(30);
    30ce:	8e e1       	ldi	r24, 0x1E	; 30
    30d0:	0e 94 96 04 	call	0x92c	; 0x92c <seconds>
	while (1) {
		displayCurrentTime();
    30d4:	0e 94 0e 09 	call	0x121c	; 0x121c <displayCurrentTime>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	aa ef       	ldi	r26, 0xFA	; 250
    30de:	b3 e4       	ldi	r27, 0x43	; 67
    30e0:	8b 87       	std	Y+11, r24	; 0x0b
    30e2:	9c 87       	std	Y+12, r25	; 0x0c
    30e4:	ad 87       	std	Y+13, r26	; 0x0d
    30e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	4a e7       	ldi	r20, 0x7A	; 122
    30f6:	55 e4       	ldi	r21, 0x45	; 69
    30f8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	8f 83       	std	Y+7, r24	; 0x07
    3102:	98 87       	std	Y+8, r25	; 0x08
    3104:	a9 87       	std	Y+9, r26	; 0x09
    3106:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3108:	6f 81       	ldd	r22, Y+7	; 0x07
    310a:	78 85       	ldd	r23, Y+8	; 0x08
    310c:	89 85       	ldd	r24, Y+9	; 0x09
    310e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__ltsf2>
    311c:	88 23       	and	r24, r24
    311e:	2c f4       	brge	.+10     	; 0x312a <loop+0x80>
		__ticks = 1;
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
    3128:	3f c0       	rjmp	.+126    	; 0x31a8 <loop+0xfe>
	else if (__tmp > 65535)
    312a:	6f 81       	ldd	r22, Y+7	; 0x07
    312c:	78 85       	ldd	r23, Y+8	; 0x08
    312e:	89 85       	ldd	r24, Y+9	; 0x09
    3130:	9a 85       	ldd	r25, Y+10	; 0x0a
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	3f ef       	ldi	r19, 0xFF	; 255
    3136:	4f e7       	ldi	r20, 0x7F	; 127
    3138:	57 e4       	ldi	r21, 0x47	; 71
    313a:	0e 94 15 1c 	call	0x382a	; 0x382a <__gtsf2>
    313e:	18 16       	cp	r1, r24
    3140:	4c f5       	brge	.+82     	; 0x3194 <loop+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3142:	6b 85       	ldd	r22, Y+11	; 0x0b
    3144:	7c 85       	ldd	r23, Y+12	; 0x0c
    3146:	8d 85       	ldd	r24, Y+13	; 0x0d
    3148:	9e 85       	ldd	r25, Y+14	; 0x0e
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e2       	ldi	r20, 0x20	; 32
    3150:	51 e4       	ldi	r21, 0x41	; 65
    3152:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	9e 83       	std	Y+6, r25	; 0x06
    3168:	8d 83       	std	Y+5, r24	; 0x05
    316a:	0f c0       	rjmp	.+30     	; 0x318a <loop+0xe0>
    316c:	80 e9       	ldi	r24, 0x90	; 144
    316e:	91 e0       	ldi	r25, 0x01	; 1
    3170:	9c 83       	std	Y+4, r25	; 0x04
    3172:	8b 83       	std	Y+3, r24	; 0x03
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	9c 81       	ldd	r25, Y+4	; 0x04
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <loop+0xce>
    317c:	9c 83       	std	Y+4, r25	; 0x04
    317e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3180:	8d 81       	ldd	r24, Y+5	; 0x05
    3182:	9e 81       	ldd	r25, Y+6	; 0x06
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	9e 83       	std	Y+6, r25	; 0x06
    3188:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318a:	8d 81       	ldd	r24, Y+5	; 0x05
    318c:	9e 81       	ldd	r25, Y+6	; 0x06
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	69 f7       	brne	.-38     	; 0x316c <loop+0xc2>
    3192:	a0 cf       	rjmp	.-192    	; 0x30d4 <loop+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3194:	6f 81       	ldd	r22, Y+7	; 0x07
    3196:	78 85       	ldd	r23, Y+8	; 0x08
    3198:	89 85       	ldd	r24, Y+9	; 0x09
    319a:	9a 85       	ldd	r25, Y+10	; 0x0a
    319c:	0e 94 45 19 	call	0x328a	; 0x328a <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	9e 83       	std	Y+6, r25	; 0x06
    31a6:	8d 83       	std	Y+5, r24	; 0x05
    31a8:	8d 81       	ldd	r24, Y+5	; 0x05
    31aa:	9e 81       	ldd	r25, Y+6	; 0x06
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	9a 81       	ldd	r25, Y+2	; 0x02
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <loop+0x10a>
    31b8:	9a 83       	std	Y+2, r25	; 0x02
    31ba:	89 83       	std	Y+1, r24	; 0x01
    31bc:	8b cf       	rjmp	.-234    	; 0x30d4 <loop+0x2a>

000031be <main>:
//		setTime(D1_SIX, D2_TWO, 0);
		_delay_ms(500);
	}
}

int main(void) {
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
	setUp();
    31c6:	0e 94 a1 08 	call	0x1142	; 0x1142 <setUp>
	halt(false);
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <halt>
	loop();
    31d0:	0e 94 55 18 	call	0x30aa	; 0x30aa <loop>
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	90 e0       	ldi	r25, 0x00	; 0
}
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <uart_init>:
#endif
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    UBRR0H = UBRRH_VALUE;
    31e6:	e5 ec       	ldi	r30, 0xC5	; 197
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	10 82       	st	Z, r1
    UBRR0L = UBRRL_VALUE;
    31ec:	e4 ec       	ldi	r30, 0xC4	; 196
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	87 e6       	ldi	r24, 0x67	; 103
    31f2:	80 83       	st	Z, r24
    
#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
    31f4:	a0 ec       	ldi	r26, 0xC0	; 192
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e0 ec       	ldi	r30, 0xC0	; 192
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	8d 7f       	andi	r24, 0xFD	; 253
    3200:	8c 93       	st	X, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
    3202:	e2 ec       	ldi	r30, 0xC2	; 194
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	86 e0       	ldi	r24, 0x06	; 6
    3208:	80 83       	st	Z, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
    320a:	e1 ec       	ldi	r30, 0xC1	; 193
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	88 e1       	ldi	r24, 0x18	; 24
    3210:	80 83       	st	Z, r24
}
    3212:	cf 91       	pop	r28
    3214:	df 91       	pop	r29
    3216:	08 95       	ret

00003218 <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
    3218:	df 93       	push	r29
    321a:	cf 93       	push	r28
    321c:	00 d0       	rcall	.+0      	; 0x321e <uart_putchar+0x6>
    321e:	0f 92       	push	r0
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	89 83       	std	Y+1, r24	; 0x01
    3226:	7b 83       	std	Y+3, r23	; 0x03
    3228:	6a 83       	std	Y+2, r22	; 0x02
    if (c == '\n') {
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	8a 30       	cpi	r24, 0x0A	; 10
    322e:	31 f4       	brne	.+12     	; 0x323c <uart_putchar+0x24>
        uart_putchar('\r', stream);
    3230:	2a 81       	ldd	r18, Y+2	; 0x02
    3232:	3b 81       	ldd	r19, Y+3	; 0x03
    3234:	8d e0       	ldi	r24, 0x0D	; 13
    3236:	b9 01       	movw	r22, r18
    3238:	0e 94 0c 19 	call	0x3218	; 0x3218 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
    323c:	e0 ec       	ldi	r30, 0xC0	; 192
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	88 2f       	mov	r24, r24
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	80 72       	andi	r24, 0x20	; 32
    3248:	90 70       	andi	r25, 0x00	; 0
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	b9 f3       	breq	.-18     	; 0x323c <uart_putchar+0x24>
    UDR0 = c;
    324e:	e6 ec       	ldi	r30, 0xC6	; 198
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	80 83       	st	Z, r24
}
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	08 95       	ret

00003262 <uart_getchar>:

char uart_getchar(FILE *stream) {
    3262:	df 93       	push	r29
    3264:	cf 93       	push	r28
    3266:	00 d0       	rcall	.+0      	; 0x3268 <uart_getchar+0x6>
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	9a 83       	std	Y+2, r25	; 0x02
    326e:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSR0A, RXC0);
    3270:	e0 ec       	ldi	r30, 0xC0	; 192
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	88 23       	and	r24, r24
    3278:	dc f7       	brge	.-10     	; 0x3270 <uart_getchar+0xe>
    return UDR0;
    327a:	e6 ec       	ldi	r30, 0xC6	; 198
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
}
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <__fixunssfsi>:
    328a:	ef 92       	push	r14
    328c:	ff 92       	push	r15
    328e:	0f 93       	push	r16
    3290:	1f 93       	push	r17
    3292:	7b 01       	movw	r14, r22
    3294:	8c 01       	movw	r16, r24
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e0       	ldi	r20, 0x00	; 0
    329c:	5f e4       	ldi	r21, 0x4F	; 79
    329e:	0e 94 45 1c 	call	0x388a	; 0x388a <__gesf2>
    32a2:	88 23       	and	r24, r24
    32a4:	8c f0       	brlt	.+34     	; 0x32c8 <__fixunssfsi+0x3e>
    32a6:	c8 01       	movw	r24, r16
    32a8:	b7 01       	movw	r22, r14
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e0       	ldi	r20, 0x00	; 0
    32b0:	5f e4       	ldi	r21, 0x4F	; 79
    32b2:	0e 94 bd 1a 	call	0x357a	; 0x357a <__subsf3>
    32b6:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    32ba:	9b 01       	movw	r18, r22
    32bc:	ac 01       	movw	r20, r24
    32be:	20 50       	subi	r18, 0x00	; 0
    32c0:	30 40       	sbci	r19, 0x00	; 0
    32c2:	40 40       	sbci	r20, 0x00	; 0
    32c4:	50 48       	sbci	r21, 0x80	; 128
    32c6:	06 c0       	rjmp	.+12     	; 0x32d4 <__fixunssfsi+0x4a>
    32c8:	c8 01       	movw	r24, r16
    32ca:	b7 01       	movw	r22, r14
    32cc:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    32d0:	9b 01       	movw	r18, r22
    32d2:	ac 01       	movw	r20, r24
    32d4:	b9 01       	movw	r22, r18
    32d6:	ca 01       	movw	r24, r20
    32d8:	1f 91       	pop	r17
    32da:	0f 91       	pop	r16
    32dc:	ff 90       	pop	r15
    32de:	ef 90       	pop	r14
    32e0:	08 95       	ret

000032e2 <_fpadd_parts>:
    32e2:	a0 e0       	ldi	r26, 0x00	; 0
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e7 e7       	ldi	r30, 0x77	; 119
    32e8:	f9 e1       	ldi	r31, 0x19	; 25
    32ea:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__prologue_saves__>
    32ee:	dc 01       	movw	r26, r24
    32f0:	2b 01       	movw	r4, r22
    32f2:	fa 01       	movw	r30, r20
    32f4:	9c 91       	ld	r25, X
    32f6:	92 30       	cpi	r25, 0x02	; 2
    32f8:	08 f4       	brcc	.+2      	; 0x32fc <_fpadd_parts+0x1a>
    32fa:	39 c1       	rjmp	.+626    	; 0x356e <_fpadd_parts+0x28c>
    32fc:	eb 01       	movw	r28, r22
    32fe:	88 81       	ld	r24, Y
    3300:	82 30       	cpi	r24, 0x02	; 2
    3302:	08 f4       	brcc	.+2      	; 0x3306 <_fpadd_parts+0x24>
    3304:	33 c1       	rjmp	.+614    	; 0x356c <_fpadd_parts+0x28a>
    3306:	94 30       	cpi	r25, 0x04	; 4
    3308:	69 f4       	brne	.+26     	; 0x3324 <_fpadd_parts+0x42>
    330a:	84 30       	cpi	r24, 0x04	; 4
    330c:	09 f0       	breq	.+2      	; 0x3310 <_fpadd_parts+0x2e>
    330e:	2f c1       	rjmp	.+606    	; 0x356e <_fpadd_parts+0x28c>
    3310:	11 96       	adiw	r26, 0x01	; 1
    3312:	9c 91       	ld	r25, X
    3314:	11 97       	sbiw	r26, 0x01	; 1
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	98 17       	cp	r25, r24
    331a:	09 f4       	brne	.+2      	; 0x331e <_fpadd_parts+0x3c>
    331c:	28 c1       	rjmp	.+592    	; 0x356e <_fpadd_parts+0x28c>
    331e:	ac e1       	ldi	r26, 0x1C	; 28
    3320:	b1 e0       	ldi	r27, 0x01	; 1
    3322:	25 c1       	rjmp	.+586    	; 0x356e <_fpadd_parts+0x28c>
    3324:	84 30       	cpi	r24, 0x04	; 4
    3326:	09 f4       	brne	.+2      	; 0x332a <_fpadd_parts+0x48>
    3328:	21 c1       	rjmp	.+578    	; 0x356c <_fpadd_parts+0x28a>
    332a:	82 30       	cpi	r24, 0x02	; 2
    332c:	a9 f4       	brne	.+42     	; 0x3358 <_fpadd_parts+0x76>
    332e:	92 30       	cpi	r25, 0x02	; 2
    3330:	09 f0       	breq	.+2      	; 0x3334 <_fpadd_parts+0x52>
    3332:	1d c1       	rjmp	.+570    	; 0x356e <_fpadd_parts+0x28c>
    3334:	9a 01       	movw	r18, r20
    3336:	ad 01       	movw	r20, r26
    3338:	88 e0       	ldi	r24, 0x08	; 8
    333a:	ea 01       	movw	r28, r20
    333c:	09 90       	ld	r0, Y+
    333e:	ae 01       	movw	r20, r28
    3340:	e9 01       	movw	r28, r18
    3342:	09 92       	st	Y+, r0
    3344:	9e 01       	movw	r18, r28
    3346:	81 50       	subi	r24, 0x01	; 1
    3348:	c1 f7       	brne	.-16     	; 0x333a <_fpadd_parts+0x58>
    334a:	e2 01       	movw	r28, r4
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	11 96       	adiw	r26, 0x01	; 1
    3350:	9c 91       	ld	r25, X
    3352:	89 23       	and	r24, r25
    3354:	81 83       	std	Z+1, r24	; 0x01
    3356:	08 c1       	rjmp	.+528    	; 0x3568 <_fpadd_parts+0x286>
    3358:	92 30       	cpi	r25, 0x02	; 2
    335a:	09 f4       	brne	.+2      	; 0x335e <_fpadd_parts+0x7c>
    335c:	07 c1       	rjmp	.+526    	; 0x356c <_fpadd_parts+0x28a>
    335e:	12 96       	adiw	r26, 0x02	; 2
    3360:	2d 90       	ld	r2, X+
    3362:	3c 90       	ld	r3, X
    3364:	13 97       	sbiw	r26, 0x03	; 3
    3366:	eb 01       	movw	r28, r22
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	9b 81       	ldd	r25, Y+3	; 0x03
    336c:	14 96       	adiw	r26, 0x04	; 4
    336e:	ad 90       	ld	r10, X+
    3370:	bd 90       	ld	r11, X+
    3372:	cd 90       	ld	r12, X+
    3374:	dc 90       	ld	r13, X
    3376:	17 97       	sbiw	r26, 0x07	; 7
    3378:	ec 80       	ldd	r14, Y+4	; 0x04
    337a:	fd 80       	ldd	r15, Y+5	; 0x05
    337c:	0e 81       	ldd	r16, Y+6	; 0x06
    337e:	1f 81       	ldd	r17, Y+7	; 0x07
    3380:	91 01       	movw	r18, r2
    3382:	28 1b       	sub	r18, r24
    3384:	39 0b       	sbc	r19, r25
    3386:	b9 01       	movw	r22, r18
    3388:	37 ff       	sbrs	r19, 7
    338a:	04 c0       	rjmp	.+8      	; 0x3394 <_fpadd_parts+0xb2>
    338c:	66 27       	eor	r22, r22
    338e:	77 27       	eor	r23, r23
    3390:	62 1b       	sub	r22, r18
    3392:	73 0b       	sbc	r23, r19
    3394:	60 32       	cpi	r22, 0x20	; 32
    3396:	71 05       	cpc	r23, r1
    3398:	0c f0       	brlt	.+2      	; 0x339c <_fpadd_parts+0xba>
    339a:	61 c0       	rjmp	.+194    	; 0x345e <_fpadd_parts+0x17c>
    339c:	12 16       	cp	r1, r18
    339e:	13 06       	cpc	r1, r19
    33a0:	6c f5       	brge	.+90     	; 0x33fc <_fpadd_parts+0x11a>
    33a2:	37 01       	movw	r6, r14
    33a4:	48 01       	movw	r8, r16
    33a6:	06 2e       	mov	r0, r22
    33a8:	04 c0       	rjmp	.+8      	; 0x33b2 <_fpadd_parts+0xd0>
    33aa:	96 94       	lsr	r9
    33ac:	87 94       	ror	r8
    33ae:	77 94       	ror	r7
    33b0:	67 94       	ror	r6
    33b2:	0a 94       	dec	r0
    33b4:	d2 f7       	brpl	.-12     	; 0x33aa <_fpadd_parts+0xc8>
    33b6:	21 e0       	ldi	r18, 0x01	; 1
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	04 c0       	rjmp	.+8      	; 0x33c8 <_fpadd_parts+0xe6>
    33c0:	22 0f       	add	r18, r18
    33c2:	33 1f       	adc	r19, r19
    33c4:	44 1f       	adc	r20, r20
    33c6:	55 1f       	adc	r21, r21
    33c8:	6a 95       	dec	r22
    33ca:	d2 f7       	brpl	.-12     	; 0x33c0 <_fpadd_parts+0xde>
    33cc:	21 50       	subi	r18, 0x01	; 1
    33ce:	30 40       	sbci	r19, 0x00	; 0
    33d0:	40 40       	sbci	r20, 0x00	; 0
    33d2:	50 40       	sbci	r21, 0x00	; 0
    33d4:	2e 21       	and	r18, r14
    33d6:	3f 21       	and	r19, r15
    33d8:	40 23       	and	r20, r16
    33da:	51 23       	and	r21, r17
    33dc:	21 15       	cp	r18, r1
    33de:	31 05       	cpc	r19, r1
    33e0:	41 05       	cpc	r20, r1
    33e2:	51 05       	cpc	r21, r1
    33e4:	21 f0       	breq	.+8      	; 0x33ee <_fpadd_parts+0x10c>
    33e6:	21 e0       	ldi	r18, 0x01	; 1
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e0       	ldi	r20, 0x00	; 0
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    33ee:	79 01       	movw	r14, r18
    33f0:	8a 01       	movw	r16, r20
    33f2:	e6 28       	or	r14, r6
    33f4:	f7 28       	or	r15, r7
    33f6:	08 29       	or	r16, r8
    33f8:	19 29       	or	r17, r9
    33fa:	3c c0       	rjmp	.+120    	; 0x3474 <_fpadd_parts+0x192>
    33fc:	23 2b       	or	r18, r19
    33fe:	d1 f1       	breq	.+116    	; 0x3474 <_fpadd_parts+0x192>
    3400:	26 0e       	add	r2, r22
    3402:	37 1e       	adc	r3, r23
    3404:	35 01       	movw	r6, r10
    3406:	46 01       	movw	r8, r12
    3408:	06 2e       	mov	r0, r22
    340a:	04 c0       	rjmp	.+8      	; 0x3414 <_fpadd_parts+0x132>
    340c:	96 94       	lsr	r9
    340e:	87 94       	ror	r8
    3410:	77 94       	ror	r7
    3412:	67 94       	ror	r6
    3414:	0a 94       	dec	r0
    3416:	d2 f7       	brpl	.-12     	; 0x340c <_fpadd_parts+0x12a>
    3418:	21 e0       	ldi	r18, 0x01	; 1
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e0       	ldi	r20, 0x00	; 0
    341e:	50 e0       	ldi	r21, 0x00	; 0
    3420:	04 c0       	rjmp	.+8      	; 0x342a <_fpadd_parts+0x148>
    3422:	22 0f       	add	r18, r18
    3424:	33 1f       	adc	r19, r19
    3426:	44 1f       	adc	r20, r20
    3428:	55 1f       	adc	r21, r21
    342a:	6a 95       	dec	r22
    342c:	d2 f7       	brpl	.-12     	; 0x3422 <_fpadd_parts+0x140>
    342e:	21 50       	subi	r18, 0x01	; 1
    3430:	30 40       	sbci	r19, 0x00	; 0
    3432:	40 40       	sbci	r20, 0x00	; 0
    3434:	50 40       	sbci	r21, 0x00	; 0
    3436:	2a 21       	and	r18, r10
    3438:	3b 21       	and	r19, r11
    343a:	4c 21       	and	r20, r12
    343c:	5d 21       	and	r21, r13
    343e:	21 15       	cp	r18, r1
    3440:	31 05       	cpc	r19, r1
    3442:	41 05       	cpc	r20, r1
    3444:	51 05       	cpc	r21, r1
    3446:	21 f0       	breq	.+8      	; 0x3450 <_fpadd_parts+0x16e>
    3448:	21 e0       	ldi	r18, 0x01	; 1
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e0       	ldi	r20, 0x00	; 0
    344e:	50 e0       	ldi	r21, 0x00	; 0
    3450:	59 01       	movw	r10, r18
    3452:	6a 01       	movw	r12, r20
    3454:	a6 28       	or	r10, r6
    3456:	b7 28       	or	r11, r7
    3458:	c8 28       	or	r12, r8
    345a:	d9 28       	or	r13, r9
    345c:	0b c0       	rjmp	.+22     	; 0x3474 <_fpadd_parts+0x192>
    345e:	82 15       	cp	r24, r2
    3460:	93 05       	cpc	r25, r3
    3462:	2c f0       	brlt	.+10     	; 0x346e <_fpadd_parts+0x18c>
    3464:	1c 01       	movw	r2, r24
    3466:	aa 24       	eor	r10, r10
    3468:	bb 24       	eor	r11, r11
    346a:	65 01       	movw	r12, r10
    346c:	03 c0       	rjmp	.+6      	; 0x3474 <_fpadd_parts+0x192>
    346e:	ee 24       	eor	r14, r14
    3470:	ff 24       	eor	r15, r15
    3472:	87 01       	movw	r16, r14
    3474:	11 96       	adiw	r26, 0x01	; 1
    3476:	9c 91       	ld	r25, X
    3478:	d2 01       	movw	r26, r4
    347a:	11 96       	adiw	r26, 0x01	; 1
    347c:	8c 91       	ld	r24, X
    347e:	98 17       	cp	r25, r24
    3480:	09 f4       	brne	.+2      	; 0x3484 <_fpadd_parts+0x1a2>
    3482:	45 c0       	rjmp	.+138    	; 0x350e <_fpadd_parts+0x22c>
    3484:	99 23       	and	r25, r25
    3486:	39 f0       	breq	.+14     	; 0x3496 <_fpadd_parts+0x1b4>
    3488:	a8 01       	movw	r20, r16
    348a:	97 01       	movw	r18, r14
    348c:	2a 19       	sub	r18, r10
    348e:	3b 09       	sbc	r19, r11
    3490:	4c 09       	sbc	r20, r12
    3492:	5d 09       	sbc	r21, r13
    3494:	06 c0       	rjmp	.+12     	; 0x34a2 <_fpadd_parts+0x1c0>
    3496:	a6 01       	movw	r20, r12
    3498:	95 01       	movw	r18, r10
    349a:	2e 19       	sub	r18, r14
    349c:	3f 09       	sbc	r19, r15
    349e:	40 0b       	sbc	r20, r16
    34a0:	51 0b       	sbc	r21, r17
    34a2:	57 fd       	sbrc	r21, 7
    34a4:	08 c0       	rjmp	.+16     	; 0x34b6 <_fpadd_parts+0x1d4>
    34a6:	11 82       	std	Z+1, r1	; 0x01
    34a8:	33 82       	std	Z+3, r3	; 0x03
    34aa:	22 82       	std	Z+2, r2	; 0x02
    34ac:	24 83       	std	Z+4, r18	; 0x04
    34ae:	35 83       	std	Z+5, r19	; 0x05
    34b0:	46 83       	std	Z+6, r20	; 0x06
    34b2:	57 83       	std	Z+7, r21	; 0x07
    34b4:	1d c0       	rjmp	.+58     	; 0x34f0 <_fpadd_parts+0x20e>
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	81 83       	std	Z+1, r24	; 0x01
    34ba:	33 82       	std	Z+3, r3	; 0x03
    34bc:	22 82       	std	Z+2, r2	; 0x02
    34be:	88 27       	eor	r24, r24
    34c0:	99 27       	eor	r25, r25
    34c2:	dc 01       	movw	r26, r24
    34c4:	82 1b       	sub	r24, r18
    34c6:	93 0b       	sbc	r25, r19
    34c8:	a4 0b       	sbc	r26, r20
    34ca:	b5 0b       	sbc	r27, r21
    34cc:	84 83       	std	Z+4, r24	; 0x04
    34ce:	95 83       	std	Z+5, r25	; 0x05
    34d0:	a6 83       	std	Z+6, r26	; 0x06
    34d2:	b7 83       	std	Z+7, r27	; 0x07
    34d4:	0d c0       	rjmp	.+26     	; 0x34f0 <_fpadd_parts+0x20e>
    34d6:	22 0f       	add	r18, r18
    34d8:	33 1f       	adc	r19, r19
    34da:	44 1f       	adc	r20, r20
    34dc:	55 1f       	adc	r21, r21
    34de:	24 83       	std	Z+4, r18	; 0x04
    34e0:	35 83       	std	Z+5, r19	; 0x05
    34e2:	46 83       	std	Z+6, r20	; 0x06
    34e4:	57 83       	std	Z+7, r21	; 0x07
    34e6:	82 81       	ldd	r24, Z+2	; 0x02
    34e8:	93 81       	ldd	r25, Z+3	; 0x03
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	93 83       	std	Z+3, r25	; 0x03
    34ee:	82 83       	std	Z+2, r24	; 0x02
    34f0:	24 81       	ldd	r18, Z+4	; 0x04
    34f2:	35 81       	ldd	r19, Z+5	; 0x05
    34f4:	46 81       	ldd	r20, Z+6	; 0x06
    34f6:	57 81       	ldd	r21, Z+7	; 0x07
    34f8:	da 01       	movw	r26, r20
    34fa:	c9 01       	movw	r24, r18
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	a1 09       	sbc	r26, r1
    3500:	b1 09       	sbc	r27, r1
    3502:	8f 5f       	subi	r24, 0xFF	; 255
    3504:	9f 4f       	sbci	r25, 0xFF	; 255
    3506:	af 4f       	sbci	r26, 0xFF	; 255
    3508:	bf 43       	sbci	r27, 0x3F	; 63
    350a:	28 f3       	brcs	.-54     	; 0x34d6 <_fpadd_parts+0x1f4>
    350c:	0b c0       	rjmp	.+22     	; 0x3524 <_fpadd_parts+0x242>
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	33 82       	std	Z+3, r3	; 0x03
    3512:	22 82       	std	Z+2, r2	; 0x02
    3514:	ea 0c       	add	r14, r10
    3516:	fb 1c       	adc	r15, r11
    3518:	0c 1d       	adc	r16, r12
    351a:	1d 1d       	adc	r17, r13
    351c:	e4 82       	std	Z+4, r14	; 0x04
    351e:	f5 82       	std	Z+5, r15	; 0x05
    3520:	06 83       	std	Z+6, r16	; 0x06
    3522:	17 83       	std	Z+7, r17	; 0x07
    3524:	83 e0       	ldi	r24, 0x03	; 3
    3526:	80 83       	st	Z, r24
    3528:	24 81       	ldd	r18, Z+4	; 0x04
    352a:	35 81       	ldd	r19, Z+5	; 0x05
    352c:	46 81       	ldd	r20, Z+6	; 0x06
    352e:	57 81       	ldd	r21, Z+7	; 0x07
    3530:	57 ff       	sbrs	r21, 7
    3532:	1a c0       	rjmp	.+52     	; 0x3568 <_fpadd_parts+0x286>
    3534:	c9 01       	movw	r24, r18
    3536:	aa 27       	eor	r26, r26
    3538:	97 fd       	sbrc	r25, 7
    353a:	a0 95       	com	r26
    353c:	ba 2f       	mov	r27, r26
    353e:	81 70       	andi	r24, 0x01	; 1
    3540:	90 70       	andi	r25, 0x00	; 0
    3542:	a0 70       	andi	r26, 0x00	; 0
    3544:	b0 70       	andi	r27, 0x00	; 0
    3546:	56 95       	lsr	r21
    3548:	47 95       	ror	r20
    354a:	37 95       	ror	r19
    354c:	27 95       	ror	r18
    354e:	82 2b       	or	r24, r18
    3550:	93 2b       	or	r25, r19
    3552:	a4 2b       	or	r26, r20
    3554:	b5 2b       	or	r27, r21
    3556:	84 83       	std	Z+4, r24	; 0x04
    3558:	95 83       	std	Z+5, r25	; 0x05
    355a:	a6 83       	std	Z+6, r26	; 0x06
    355c:	b7 83       	std	Z+7, r27	; 0x07
    355e:	82 81       	ldd	r24, Z+2	; 0x02
    3560:	93 81       	ldd	r25, Z+3	; 0x03
    3562:	01 96       	adiw	r24, 0x01	; 1
    3564:	93 83       	std	Z+3, r25	; 0x03
    3566:	82 83       	std	Z+2, r24	; 0x02
    3568:	df 01       	movw	r26, r30
    356a:	01 c0       	rjmp	.+2      	; 0x356e <_fpadd_parts+0x28c>
    356c:	d2 01       	movw	r26, r4
    356e:	cd 01       	movw	r24, r26
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	e2 e1       	ldi	r30, 0x12	; 18
    3576:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__epilogue_restores__>

0000357a <__subsf3>:
    357a:	a0 e2       	ldi	r26, 0x20	; 32
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	e3 ec       	ldi	r30, 0xC3	; 195
    3580:	fa e1       	ldi	r31, 0x1A	; 26
    3582:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__+0x18>
    3586:	69 83       	std	Y+1, r22	; 0x01
    3588:	7a 83       	std	Y+2, r23	; 0x02
    358a:	8b 83       	std	Y+3, r24	; 0x03
    358c:	9c 83       	std	Y+4, r25	; 0x04
    358e:	2d 83       	std	Y+5, r18	; 0x05
    3590:	3e 83       	std	Y+6, r19	; 0x06
    3592:	4f 83       	std	Y+7, r20	; 0x07
    3594:	58 87       	std	Y+8, r21	; 0x08
    3596:	e9 e0       	ldi	r30, 0x09	; 9
    3598:	ee 2e       	mov	r14, r30
    359a:	f1 2c       	mov	r15, r1
    359c:	ec 0e       	add	r14, r28
    359e:	fd 1e       	adc	r15, r29
    35a0:	ce 01       	movw	r24, r28
    35a2:	01 96       	adiw	r24, 0x01	; 1
    35a4:	b7 01       	movw	r22, r14
    35a6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    35aa:	8e 01       	movw	r16, r28
    35ac:	0f 5e       	subi	r16, 0xEF	; 239
    35ae:	1f 4f       	sbci	r17, 0xFF	; 255
    35b0:	ce 01       	movw	r24, r28
    35b2:	05 96       	adiw	r24, 0x05	; 5
    35b4:	b8 01       	movw	r22, r16
    35b6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    35ba:	8a 89       	ldd	r24, Y+18	; 0x12
    35bc:	91 e0       	ldi	r25, 0x01	; 1
    35be:	89 27       	eor	r24, r25
    35c0:	8a 8b       	std	Y+18, r24	; 0x12
    35c2:	c7 01       	movw	r24, r14
    35c4:	b8 01       	movw	r22, r16
    35c6:	ae 01       	movw	r20, r28
    35c8:	47 5e       	subi	r20, 0xE7	; 231
    35ca:	5f 4f       	sbci	r21, 0xFF	; 255
    35cc:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_fpadd_parts>
    35d0:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__pack_f>
    35d4:	a0 96       	adiw	r28, 0x20	; 32
    35d6:	e6 e0       	ldi	r30, 0x06	; 6
    35d8:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__+0x18>

000035dc <__addsf3>:
    35dc:	a0 e2       	ldi	r26, 0x20	; 32
    35de:	b0 e0       	ldi	r27, 0x00	; 0
    35e0:	e4 ef       	ldi	r30, 0xF4	; 244
    35e2:	fa e1       	ldi	r31, 0x1A	; 26
    35e4:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__+0x18>
    35e8:	69 83       	std	Y+1, r22	; 0x01
    35ea:	7a 83       	std	Y+2, r23	; 0x02
    35ec:	8b 83       	std	Y+3, r24	; 0x03
    35ee:	9c 83       	std	Y+4, r25	; 0x04
    35f0:	2d 83       	std	Y+5, r18	; 0x05
    35f2:	3e 83       	std	Y+6, r19	; 0x06
    35f4:	4f 83       	std	Y+7, r20	; 0x07
    35f6:	58 87       	std	Y+8, r21	; 0x08
    35f8:	f9 e0       	ldi	r31, 0x09	; 9
    35fa:	ef 2e       	mov	r14, r31
    35fc:	f1 2c       	mov	r15, r1
    35fe:	ec 0e       	add	r14, r28
    3600:	fd 1e       	adc	r15, r29
    3602:	ce 01       	movw	r24, r28
    3604:	01 96       	adiw	r24, 0x01	; 1
    3606:	b7 01       	movw	r22, r14
    3608:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    360c:	8e 01       	movw	r16, r28
    360e:	0f 5e       	subi	r16, 0xEF	; 239
    3610:	1f 4f       	sbci	r17, 0xFF	; 255
    3612:	ce 01       	movw	r24, r28
    3614:	05 96       	adiw	r24, 0x05	; 5
    3616:	b8 01       	movw	r22, r16
    3618:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    361c:	c7 01       	movw	r24, r14
    361e:	b8 01       	movw	r22, r16
    3620:	ae 01       	movw	r20, r28
    3622:	47 5e       	subi	r20, 0xE7	; 231
    3624:	5f 4f       	sbci	r21, 0xFF	; 255
    3626:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_fpadd_parts>
    362a:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__pack_f>
    362e:	a0 96       	adiw	r28, 0x20	; 32
    3630:	e6 e0       	ldi	r30, 0x06	; 6
    3632:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__+0x18>

00003636 <__mulsf3>:
    3636:	a0 e2       	ldi	r26, 0x20	; 32
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	e1 e2       	ldi	r30, 0x21	; 33
    363c:	fb e1       	ldi	r31, 0x1B	; 27
    363e:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__prologue_saves__>
    3642:	69 83       	std	Y+1, r22	; 0x01
    3644:	7a 83       	std	Y+2, r23	; 0x02
    3646:	8b 83       	std	Y+3, r24	; 0x03
    3648:	9c 83       	std	Y+4, r25	; 0x04
    364a:	2d 83       	std	Y+5, r18	; 0x05
    364c:	3e 83       	std	Y+6, r19	; 0x06
    364e:	4f 83       	std	Y+7, r20	; 0x07
    3650:	58 87       	std	Y+8, r21	; 0x08
    3652:	ce 01       	movw	r24, r28
    3654:	01 96       	adiw	r24, 0x01	; 1
    3656:	be 01       	movw	r22, r28
    3658:	67 5f       	subi	r22, 0xF7	; 247
    365a:	7f 4f       	sbci	r23, 0xFF	; 255
    365c:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    3660:	ce 01       	movw	r24, r28
    3662:	05 96       	adiw	r24, 0x05	; 5
    3664:	be 01       	movw	r22, r28
    3666:	6f 5e       	subi	r22, 0xEF	; 239
    3668:	7f 4f       	sbci	r23, 0xFF	; 255
    366a:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    366e:	99 85       	ldd	r25, Y+9	; 0x09
    3670:	92 30       	cpi	r25, 0x02	; 2
    3672:	88 f0       	brcs	.+34     	; 0x3696 <__mulsf3+0x60>
    3674:	89 89       	ldd	r24, Y+17	; 0x11
    3676:	82 30       	cpi	r24, 0x02	; 2
    3678:	c8 f0       	brcs	.+50     	; 0x36ac <__mulsf3+0x76>
    367a:	94 30       	cpi	r25, 0x04	; 4
    367c:	19 f4       	brne	.+6      	; 0x3684 <__mulsf3+0x4e>
    367e:	82 30       	cpi	r24, 0x02	; 2
    3680:	51 f4       	brne	.+20     	; 0x3696 <__mulsf3+0x60>
    3682:	04 c0       	rjmp	.+8      	; 0x368c <__mulsf3+0x56>
    3684:	84 30       	cpi	r24, 0x04	; 4
    3686:	29 f4       	brne	.+10     	; 0x3692 <__mulsf3+0x5c>
    3688:	92 30       	cpi	r25, 0x02	; 2
    368a:	81 f4       	brne	.+32     	; 0x36ac <__mulsf3+0x76>
    368c:	8c e1       	ldi	r24, 0x1C	; 28
    368e:	91 e0       	ldi	r25, 0x01	; 1
    3690:	c6 c0       	rjmp	.+396    	; 0x381e <__mulsf3+0x1e8>
    3692:	92 30       	cpi	r25, 0x02	; 2
    3694:	49 f4       	brne	.+18     	; 0x36a8 <__mulsf3+0x72>
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	9a 85       	ldd	r25, Y+10	; 0x0a
    369a:	8a 89       	ldd	r24, Y+18	; 0x12
    369c:	98 13       	cpse	r25, r24
    369e:	21 e0       	ldi	r18, 0x01	; 1
    36a0:	2a 87       	std	Y+10, r18	; 0x0a
    36a2:	ce 01       	movw	r24, r28
    36a4:	09 96       	adiw	r24, 0x09	; 9
    36a6:	bb c0       	rjmp	.+374    	; 0x381e <__mulsf3+0x1e8>
    36a8:	82 30       	cpi	r24, 0x02	; 2
    36aa:	49 f4       	brne	.+18     	; 0x36be <__mulsf3+0x88>
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b0:	8a 89       	ldd	r24, Y+18	; 0x12
    36b2:	98 13       	cpse	r25, r24
    36b4:	21 e0       	ldi	r18, 0x01	; 1
    36b6:	2a 8b       	std	Y+18, r18	; 0x12
    36b8:	ce 01       	movw	r24, r28
    36ba:	41 96       	adiw	r24, 0x11	; 17
    36bc:	b0 c0       	rjmp	.+352    	; 0x381e <__mulsf3+0x1e8>
    36be:	2d 84       	ldd	r2, Y+13	; 0x0d
    36c0:	3e 84       	ldd	r3, Y+14	; 0x0e
    36c2:	4f 84       	ldd	r4, Y+15	; 0x0f
    36c4:	58 88       	ldd	r5, Y+16	; 0x10
    36c6:	6d 88       	ldd	r6, Y+21	; 0x15
    36c8:	7e 88       	ldd	r7, Y+22	; 0x16
    36ca:	8f 88       	ldd	r8, Y+23	; 0x17
    36cc:	98 8c       	ldd	r9, Y+24	; 0x18
    36ce:	ee 24       	eor	r14, r14
    36d0:	ff 24       	eor	r15, r15
    36d2:	87 01       	movw	r16, r14
    36d4:	aa 24       	eor	r10, r10
    36d6:	bb 24       	eor	r11, r11
    36d8:	65 01       	movw	r12, r10
    36da:	40 e0       	ldi	r20, 0x00	; 0
    36dc:	50 e0       	ldi	r21, 0x00	; 0
    36de:	60 e0       	ldi	r22, 0x00	; 0
    36e0:	70 e0       	ldi	r23, 0x00	; 0
    36e2:	e0 e0       	ldi	r30, 0x00	; 0
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	c1 01       	movw	r24, r2
    36e8:	81 70       	andi	r24, 0x01	; 1
    36ea:	90 70       	andi	r25, 0x00	; 0
    36ec:	89 2b       	or	r24, r25
    36ee:	e9 f0       	breq	.+58     	; 0x372a <__mulsf3+0xf4>
    36f0:	e6 0c       	add	r14, r6
    36f2:	f7 1c       	adc	r15, r7
    36f4:	08 1d       	adc	r16, r8
    36f6:	19 1d       	adc	r17, r9
    36f8:	9a 01       	movw	r18, r20
    36fa:	ab 01       	movw	r20, r22
    36fc:	2a 0d       	add	r18, r10
    36fe:	3b 1d       	adc	r19, r11
    3700:	4c 1d       	adc	r20, r12
    3702:	5d 1d       	adc	r21, r13
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	a0 e0       	ldi	r26, 0x00	; 0
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	e6 14       	cp	r14, r6
    370e:	f7 04       	cpc	r15, r7
    3710:	08 05       	cpc	r16, r8
    3712:	19 05       	cpc	r17, r9
    3714:	20 f4       	brcc	.+8      	; 0x371e <__mulsf3+0xe8>
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	a0 e0       	ldi	r26, 0x00	; 0
    371c:	b0 e0       	ldi	r27, 0x00	; 0
    371e:	ba 01       	movw	r22, r20
    3720:	a9 01       	movw	r20, r18
    3722:	48 0f       	add	r20, r24
    3724:	59 1f       	adc	r21, r25
    3726:	6a 1f       	adc	r22, r26
    3728:	7b 1f       	adc	r23, r27
    372a:	aa 0c       	add	r10, r10
    372c:	bb 1c       	adc	r11, r11
    372e:	cc 1c       	adc	r12, r12
    3730:	dd 1c       	adc	r13, r13
    3732:	97 fe       	sbrs	r9, 7
    3734:	08 c0       	rjmp	.+16     	; 0x3746 <__mulsf3+0x110>
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	a0 e0       	ldi	r26, 0x00	; 0
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	a8 2a       	or	r10, r24
    3740:	b9 2a       	or	r11, r25
    3742:	ca 2a       	or	r12, r26
    3744:	db 2a       	or	r13, r27
    3746:	31 96       	adiw	r30, 0x01	; 1
    3748:	e0 32       	cpi	r30, 0x20	; 32
    374a:	f1 05       	cpc	r31, r1
    374c:	49 f0       	breq	.+18     	; 0x3760 <__mulsf3+0x12a>
    374e:	66 0c       	add	r6, r6
    3750:	77 1c       	adc	r7, r7
    3752:	88 1c       	adc	r8, r8
    3754:	99 1c       	adc	r9, r9
    3756:	56 94       	lsr	r5
    3758:	47 94       	ror	r4
    375a:	37 94       	ror	r3
    375c:	27 94       	ror	r2
    375e:	c3 cf       	rjmp	.-122    	; 0x36e6 <__mulsf3+0xb0>
    3760:	fa 85       	ldd	r31, Y+10	; 0x0a
    3762:	ea 89       	ldd	r30, Y+18	; 0x12
    3764:	2b 89       	ldd	r18, Y+19	; 0x13
    3766:	3c 89       	ldd	r19, Y+20	; 0x14
    3768:	8b 85       	ldd	r24, Y+11	; 0x0b
    376a:	9c 85       	ldd	r25, Y+12	; 0x0c
    376c:	28 0f       	add	r18, r24
    376e:	39 1f       	adc	r19, r25
    3770:	2e 5f       	subi	r18, 0xFE	; 254
    3772:	3f 4f       	sbci	r19, 0xFF	; 255
    3774:	17 c0       	rjmp	.+46     	; 0x37a4 <__mulsf3+0x16e>
    3776:	ca 01       	movw	r24, r20
    3778:	81 70       	andi	r24, 0x01	; 1
    377a:	90 70       	andi	r25, 0x00	; 0
    377c:	89 2b       	or	r24, r25
    377e:	61 f0       	breq	.+24     	; 0x3798 <__mulsf3+0x162>
    3780:	16 95       	lsr	r17
    3782:	07 95       	ror	r16
    3784:	f7 94       	ror	r15
    3786:	e7 94       	ror	r14
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	a0 e0       	ldi	r26, 0x00	; 0
    378e:	b0 e8       	ldi	r27, 0x80	; 128
    3790:	e8 2a       	or	r14, r24
    3792:	f9 2a       	or	r15, r25
    3794:	0a 2b       	or	r16, r26
    3796:	1b 2b       	or	r17, r27
    3798:	76 95       	lsr	r23
    379a:	67 95       	ror	r22
    379c:	57 95       	ror	r21
    379e:	47 95       	ror	r20
    37a0:	2f 5f       	subi	r18, 0xFF	; 255
    37a2:	3f 4f       	sbci	r19, 0xFF	; 255
    37a4:	77 fd       	sbrc	r23, 7
    37a6:	e7 cf       	rjmp	.-50     	; 0x3776 <__mulsf3+0x140>
    37a8:	0c c0       	rjmp	.+24     	; 0x37c2 <__mulsf3+0x18c>
    37aa:	44 0f       	add	r20, r20
    37ac:	55 1f       	adc	r21, r21
    37ae:	66 1f       	adc	r22, r22
    37b0:	77 1f       	adc	r23, r23
    37b2:	17 fd       	sbrc	r17, 7
    37b4:	41 60       	ori	r20, 0x01	; 1
    37b6:	ee 0c       	add	r14, r14
    37b8:	ff 1c       	adc	r15, r15
    37ba:	00 1f       	adc	r16, r16
    37bc:	11 1f       	adc	r17, r17
    37be:	21 50       	subi	r18, 0x01	; 1
    37c0:	30 40       	sbci	r19, 0x00	; 0
    37c2:	40 30       	cpi	r20, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	59 07       	cpc	r21, r25
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	69 07       	cpc	r22, r25
    37cc:	90 e4       	ldi	r25, 0x40	; 64
    37ce:	79 07       	cpc	r23, r25
    37d0:	60 f3       	brcs	.-40     	; 0x37aa <__mulsf3+0x174>
    37d2:	2b 8f       	std	Y+27, r18	; 0x1b
    37d4:	3c 8f       	std	Y+28, r19	; 0x1c
    37d6:	db 01       	movw	r26, r22
    37d8:	ca 01       	movw	r24, r20
    37da:	8f 77       	andi	r24, 0x7F	; 127
    37dc:	90 70       	andi	r25, 0x00	; 0
    37de:	a0 70       	andi	r26, 0x00	; 0
    37e0:	b0 70       	andi	r27, 0x00	; 0
    37e2:	80 34       	cpi	r24, 0x40	; 64
    37e4:	91 05       	cpc	r25, r1
    37e6:	a1 05       	cpc	r26, r1
    37e8:	b1 05       	cpc	r27, r1
    37ea:	61 f4       	brne	.+24     	; 0x3804 <__mulsf3+0x1ce>
    37ec:	47 fd       	sbrc	r20, 7
    37ee:	0a c0       	rjmp	.+20     	; 0x3804 <__mulsf3+0x1ce>
    37f0:	e1 14       	cp	r14, r1
    37f2:	f1 04       	cpc	r15, r1
    37f4:	01 05       	cpc	r16, r1
    37f6:	11 05       	cpc	r17, r1
    37f8:	29 f0       	breq	.+10     	; 0x3804 <__mulsf3+0x1ce>
    37fa:	40 5c       	subi	r20, 0xC0	; 192
    37fc:	5f 4f       	sbci	r21, 0xFF	; 255
    37fe:	6f 4f       	sbci	r22, 0xFF	; 255
    3800:	7f 4f       	sbci	r23, 0xFF	; 255
    3802:	40 78       	andi	r20, 0x80	; 128
    3804:	1a 8e       	std	Y+26, r1	; 0x1a
    3806:	fe 17       	cp	r31, r30
    3808:	11 f0       	breq	.+4      	; 0x380e <__mulsf3+0x1d8>
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	8a 8f       	std	Y+26, r24	; 0x1a
    380e:	4d 8f       	std	Y+29, r20	; 0x1d
    3810:	5e 8f       	std	Y+30, r21	; 0x1e
    3812:	6f 8f       	std	Y+31, r22	; 0x1f
    3814:	78 a3       	std	Y+32, r23	; 0x20
    3816:	83 e0       	ldi	r24, 0x03	; 3
    3818:	89 8f       	std	Y+25, r24	; 0x19
    381a:	ce 01       	movw	r24, r28
    381c:	49 96       	adiw	r24, 0x19	; 25
    381e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__pack_f>
    3822:	a0 96       	adiw	r28, 0x20	; 32
    3824:	e2 e1       	ldi	r30, 0x12	; 18
    3826:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__epilogue_restores__>

0000382a <__gtsf2>:
    382a:	a8 e1       	ldi	r26, 0x18	; 24
    382c:	b0 e0       	ldi	r27, 0x00	; 0
    382e:	eb e1       	ldi	r30, 0x1B	; 27
    3830:	fc e1       	ldi	r31, 0x1C	; 28
    3832:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__+0x18>
    3836:	69 83       	std	Y+1, r22	; 0x01
    3838:	7a 83       	std	Y+2, r23	; 0x02
    383a:	8b 83       	std	Y+3, r24	; 0x03
    383c:	9c 83       	std	Y+4, r25	; 0x04
    383e:	2d 83       	std	Y+5, r18	; 0x05
    3840:	3e 83       	std	Y+6, r19	; 0x06
    3842:	4f 83       	std	Y+7, r20	; 0x07
    3844:	58 87       	std	Y+8, r21	; 0x08
    3846:	89 e0       	ldi	r24, 0x09	; 9
    3848:	e8 2e       	mov	r14, r24
    384a:	f1 2c       	mov	r15, r1
    384c:	ec 0e       	add	r14, r28
    384e:	fd 1e       	adc	r15, r29
    3850:	ce 01       	movw	r24, r28
    3852:	01 96       	adiw	r24, 0x01	; 1
    3854:	b7 01       	movw	r22, r14
    3856:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    385a:	8e 01       	movw	r16, r28
    385c:	0f 5e       	subi	r16, 0xEF	; 239
    385e:	1f 4f       	sbci	r17, 0xFF	; 255
    3860:	ce 01       	movw	r24, r28
    3862:	05 96       	adiw	r24, 0x05	; 5
    3864:	b8 01       	movw	r22, r16
    3866:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    386a:	89 85       	ldd	r24, Y+9	; 0x09
    386c:	82 30       	cpi	r24, 0x02	; 2
    386e:	40 f0       	brcs	.+16     	; 0x3880 <__gtsf2+0x56>
    3870:	89 89       	ldd	r24, Y+17	; 0x11
    3872:	82 30       	cpi	r24, 0x02	; 2
    3874:	28 f0       	brcs	.+10     	; 0x3880 <__gtsf2+0x56>
    3876:	c7 01       	movw	r24, r14
    3878:	b8 01       	movw	r22, r16
    387a:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__fpcmp_parts_f>
    387e:	01 c0       	rjmp	.+2      	; 0x3882 <__gtsf2+0x58>
    3880:	8f ef       	ldi	r24, 0xFF	; 255
    3882:	68 96       	adiw	r28, 0x18	; 24
    3884:	e6 e0       	ldi	r30, 0x06	; 6
    3886:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__+0x18>

0000388a <__gesf2>:
    388a:	a8 e1       	ldi	r26, 0x18	; 24
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	eb e4       	ldi	r30, 0x4B	; 75
    3890:	fc e1       	ldi	r31, 0x1C	; 28
    3892:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__+0x18>
    3896:	69 83       	std	Y+1, r22	; 0x01
    3898:	7a 83       	std	Y+2, r23	; 0x02
    389a:	8b 83       	std	Y+3, r24	; 0x03
    389c:	9c 83       	std	Y+4, r25	; 0x04
    389e:	2d 83       	std	Y+5, r18	; 0x05
    38a0:	3e 83       	std	Y+6, r19	; 0x06
    38a2:	4f 83       	std	Y+7, r20	; 0x07
    38a4:	58 87       	std	Y+8, r21	; 0x08
    38a6:	89 e0       	ldi	r24, 0x09	; 9
    38a8:	e8 2e       	mov	r14, r24
    38aa:	f1 2c       	mov	r15, r1
    38ac:	ec 0e       	add	r14, r28
    38ae:	fd 1e       	adc	r15, r29
    38b0:	ce 01       	movw	r24, r28
    38b2:	01 96       	adiw	r24, 0x01	; 1
    38b4:	b7 01       	movw	r22, r14
    38b6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    38ba:	8e 01       	movw	r16, r28
    38bc:	0f 5e       	subi	r16, 0xEF	; 239
    38be:	1f 4f       	sbci	r17, 0xFF	; 255
    38c0:	ce 01       	movw	r24, r28
    38c2:	05 96       	adiw	r24, 0x05	; 5
    38c4:	b8 01       	movw	r22, r16
    38c6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    38ca:	89 85       	ldd	r24, Y+9	; 0x09
    38cc:	82 30       	cpi	r24, 0x02	; 2
    38ce:	40 f0       	brcs	.+16     	; 0x38e0 <__gesf2+0x56>
    38d0:	89 89       	ldd	r24, Y+17	; 0x11
    38d2:	82 30       	cpi	r24, 0x02	; 2
    38d4:	28 f0       	brcs	.+10     	; 0x38e0 <__gesf2+0x56>
    38d6:	c7 01       	movw	r24, r14
    38d8:	b8 01       	movw	r22, r16
    38da:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__fpcmp_parts_f>
    38de:	01 c0       	rjmp	.+2      	; 0x38e2 <__gesf2+0x58>
    38e0:	8f ef       	ldi	r24, 0xFF	; 255
    38e2:	68 96       	adiw	r28, 0x18	; 24
    38e4:	e6 e0       	ldi	r30, 0x06	; 6
    38e6:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__+0x18>

000038ea <__ltsf2>:
    38ea:	a8 e1       	ldi	r26, 0x18	; 24
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	eb e7       	ldi	r30, 0x7B	; 123
    38f0:	fc e1       	ldi	r31, 0x1C	; 28
    38f2:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__+0x18>
    38f6:	69 83       	std	Y+1, r22	; 0x01
    38f8:	7a 83       	std	Y+2, r23	; 0x02
    38fa:	8b 83       	std	Y+3, r24	; 0x03
    38fc:	9c 83       	std	Y+4, r25	; 0x04
    38fe:	2d 83       	std	Y+5, r18	; 0x05
    3900:	3e 83       	std	Y+6, r19	; 0x06
    3902:	4f 83       	std	Y+7, r20	; 0x07
    3904:	58 87       	std	Y+8, r21	; 0x08
    3906:	89 e0       	ldi	r24, 0x09	; 9
    3908:	e8 2e       	mov	r14, r24
    390a:	f1 2c       	mov	r15, r1
    390c:	ec 0e       	add	r14, r28
    390e:	fd 1e       	adc	r15, r29
    3910:	ce 01       	movw	r24, r28
    3912:	01 96       	adiw	r24, 0x01	; 1
    3914:	b7 01       	movw	r22, r14
    3916:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    391a:	8e 01       	movw	r16, r28
    391c:	0f 5e       	subi	r16, 0xEF	; 239
    391e:	1f 4f       	sbci	r17, 0xFF	; 255
    3920:	ce 01       	movw	r24, r28
    3922:	05 96       	adiw	r24, 0x05	; 5
    3924:	b8 01       	movw	r22, r16
    3926:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    392a:	89 85       	ldd	r24, Y+9	; 0x09
    392c:	82 30       	cpi	r24, 0x02	; 2
    392e:	40 f0       	brcs	.+16     	; 0x3940 <__ltsf2+0x56>
    3930:	89 89       	ldd	r24, Y+17	; 0x11
    3932:	82 30       	cpi	r24, 0x02	; 2
    3934:	28 f0       	brcs	.+10     	; 0x3940 <__ltsf2+0x56>
    3936:	c7 01       	movw	r24, r14
    3938:	b8 01       	movw	r22, r16
    393a:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__fpcmp_parts_f>
    393e:	01 c0       	rjmp	.+2      	; 0x3942 <__ltsf2+0x58>
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	68 96       	adiw	r28, 0x18	; 24
    3944:	e6 e0       	ldi	r30, 0x06	; 6
    3946:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__+0x18>

0000394a <__fixsfsi>:
    394a:	ac e0       	ldi	r26, 0x0C	; 12
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	eb ea       	ldi	r30, 0xAB	; 171
    3950:	fc e1       	ldi	r31, 0x1C	; 28
    3952:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <__prologue_saves__+0x20>
    3956:	69 83       	std	Y+1, r22	; 0x01
    3958:	7a 83       	std	Y+2, r23	; 0x02
    395a:	8b 83       	std	Y+3, r24	; 0x03
    395c:	9c 83       	std	Y+4, r25	; 0x04
    395e:	ce 01       	movw	r24, r28
    3960:	01 96       	adiw	r24, 0x01	; 1
    3962:	be 01       	movw	r22, r28
    3964:	6b 5f       	subi	r22, 0xFB	; 251
    3966:	7f 4f       	sbci	r23, 0xFF	; 255
    3968:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__unpack_f>
    396c:	8d 81       	ldd	r24, Y+5	; 0x05
    396e:	82 30       	cpi	r24, 0x02	; 2
    3970:	61 f1       	breq	.+88     	; 0x39ca <__fixsfsi+0x80>
    3972:	82 30       	cpi	r24, 0x02	; 2
    3974:	50 f1       	brcs	.+84     	; 0x39ca <__fixsfsi+0x80>
    3976:	84 30       	cpi	r24, 0x04	; 4
    3978:	21 f4       	brne	.+8      	; 0x3982 <__fixsfsi+0x38>
    397a:	8e 81       	ldd	r24, Y+6	; 0x06
    397c:	88 23       	and	r24, r24
    397e:	51 f1       	breq	.+84     	; 0x39d4 <__fixsfsi+0x8a>
    3980:	2e c0       	rjmp	.+92     	; 0x39de <__fixsfsi+0x94>
    3982:	2f 81       	ldd	r18, Y+7	; 0x07
    3984:	38 85       	ldd	r19, Y+8	; 0x08
    3986:	37 fd       	sbrc	r19, 7
    3988:	20 c0       	rjmp	.+64     	; 0x39ca <__fixsfsi+0x80>
    398a:	6e 81       	ldd	r22, Y+6	; 0x06
    398c:	2f 31       	cpi	r18, 0x1F	; 31
    398e:	31 05       	cpc	r19, r1
    3990:	1c f0       	brlt	.+6      	; 0x3998 <__fixsfsi+0x4e>
    3992:	66 23       	and	r22, r22
    3994:	f9 f0       	breq	.+62     	; 0x39d4 <__fixsfsi+0x8a>
    3996:	23 c0       	rjmp	.+70     	; 0x39de <__fixsfsi+0x94>
    3998:	8e e1       	ldi	r24, 0x1E	; 30
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	82 1b       	sub	r24, r18
    399e:	93 0b       	sbc	r25, r19
    39a0:	29 85       	ldd	r18, Y+9	; 0x09
    39a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    39a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    39a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    39a8:	04 c0       	rjmp	.+8      	; 0x39b2 <__fixsfsi+0x68>
    39aa:	56 95       	lsr	r21
    39ac:	47 95       	ror	r20
    39ae:	37 95       	ror	r19
    39b0:	27 95       	ror	r18
    39b2:	8a 95       	dec	r24
    39b4:	d2 f7       	brpl	.-12     	; 0x39aa <__fixsfsi+0x60>
    39b6:	66 23       	and	r22, r22
    39b8:	b1 f0       	breq	.+44     	; 0x39e6 <__fixsfsi+0x9c>
    39ba:	50 95       	com	r21
    39bc:	40 95       	com	r20
    39be:	30 95       	com	r19
    39c0:	21 95       	neg	r18
    39c2:	3f 4f       	sbci	r19, 0xFF	; 255
    39c4:	4f 4f       	sbci	r20, 0xFF	; 255
    39c6:	5f 4f       	sbci	r21, 0xFF	; 255
    39c8:	0e c0       	rjmp	.+28     	; 0x39e6 <__fixsfsi+0x9c>
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	09 c0       	rjmp	.+18     	; 0x39e6 <__fixsfsi+0x9c>
    39d4:	2f ef       	ldi	r18, 0xFF	; 255
    39d6:	3f ef       	ldi	r19, 0xFF	; 255
    39d8:	4f ef       	ldi	r20, 0xFF	; 255
    39da:	5f e7       	ldi	r21, 0x7F	; 127
    39dc:	04 c0       	rjmp	.+8      	; 0x39e6 <__fixsfsi+0x9c>
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	40 e0       	ldi	r20, 0x00	; 0
    39e4:	50 e8       	ldi	r21, 0x80	; 128
    39e6:	b9 01       	movw	r22, r18
    39e8:	ca 01       	movw	r24, r20
    39ea:	2c 96       	adiw	r28, 0x0c	; 12
    39ec:	e2 e0       	ldi	r30, 0x02	; 2
    39ee:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__epilogue_restores__+0x20>

000039f2 <__pack_f>:
    39f2:	df 92       	push	r13
    39f4:	ef 92       	push	r14
    39f6:	ff 92       	push	r15
    39f8:	0f 93       	push	r16
    39fa:	1f 93       	push	r17
    39fc:	fc 01       	movw	r30, r24
    39fe:	e4 80       	ldd	r14, Z+4	; 0x04
    3a00:	f5 80       	ldd	r15, Z+5	; 0x05
    3a02:	06 81       	ldd	r16, Z+6	; 0x06
    3a04:	17 81       	ldd	r17, Z+7	; 0x07
    3a06:	d1 80       	ldd	r13, Z+1	; 0x01
    3a08:	80 81       	ld	r24, Z
    3a0a:	82 30       	cpi	r24, 0x02	; 2
    3a0c:	58 f4       	brcc	.+22     	; 0x3a24 <__pack_f+0x32>
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	a0 e1       	ldi	r26, 0x10	; 16
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	e8 2a       	or	r14, r24
    3a18:	f9 2a       	or	r15, r25
    3a1a:	0a 2b       	or	r16, r26
    3a1c:	1b 2b       	or	r17, r27
    3a1e:	ef ef       	ldi	r30, 0xFF	; 255
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	a6 c0       	rjmp	.+332    	; 0x3b70 <__pack_f+0x17e>
    3a24:	84 30       	cpi	r24, 0x04	; 4
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <__pack_f+0x38>
    3a28:	9e c0       	rjmp	.+316    	; 0x3b66 <__pack_f+0x174>
    3a2a:	82 30       	cpi	r24, 0x02	; 2
    3a2c:	19 f4       	brne	.+6      	; 0x3a34 <__pack_f+0x42>
    3a2e:	e0 e0       	ldi	r30, 0x00	; 0
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	9b c0       	rjmp	.+310    	; 0x3b6a <__pack_f+0x178>
    3a34:	e1 14       	cp	r14, r1
    3a36:	f1 04       	cpc	r15, r1
    3a38:	01 05       	cpc	r16, r1
    3a3a:	11 05       	cpc	r17, r1
    3a3c:	19 f4       	brne	.+6      	; 0x3a44 <__pack_f+0x52>
    3a3e:	e0 e0       	ldi	r30, 0x00	; 0
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	96 c0       	rjmp	.+300    	; 0x3b70 <__pack_f+0x17e>
    3a44:	62 81       	ldd	r22, Z+2	; 0x02
    3a46:	73 81       	ldd	r23, Z+3	; 0x03
    3a48:	9f ef       	ldi	r25, 0xFF	; 255
    3a4a:	62 38       	cpi	r22, 0x82	; 130
    3a4c:	79 07       	cpc	r23, r25
    3a4e:	0c f0       	brlt	.+2      	; 0x3a52 <__pack_f+0x60>
    3a50:	5b c0       	rjmp	.+182    	; 0x3b08 <__pack_f+0x116>
    3a52:	22 e8       	ldi	r18, 0x82	; 130
    3a54:	3f ef       	ldi	r19, 0xFF	; 255
    3a56:	26 1b       	sub	r18, r22
    3a58:	37 0b       	sbc	r19, r23
    3a5a:	2a 31       	cpi	r18, 0x1A	; 26
    3a5c:	31 05       	cpc	r19, r1
    3a5e:	2c f0       	brlt	.+10     	; 0x3a6a <__pack_f+0x78>
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	40 e0       	ldi	r20, 0x00	; 0
    3a66:	50 e0       	ldi	r21, 0x00	; 0
    3a68:	2a c0       	rjmp	.+84     	; 0x3abe <__pack_f+0xcc>
    3a6a:	b8 01       	movw	r22, r16
    3a6c:	a7 01       	movw	r20, r14
    3a6e:	02 2e       	mov	r0, r18
    3a70:	04 c0       	rjmp	.+8      	; 0x3a7a <__pack_f+0x88>
    3a72:	76 95       	lsr	r23
    3a74:	67 95       	ror	r22
    3a76:	57 95       	ror	r21
    3a78:	47 95       	ror	r20
    3a7a:	0a 94       	dec	r0
    3a7c:	d2 f7       	brpl	.-12     	; 0x3a72 <__pack_f+0x80>
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	a0 e0       	ldi	r26, 0x00	; 0
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	04 c0       	rjmp	.+8      	; 0x3a90 <__pack_f+0x9e>
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	aa 1f       	adc	r26, r26
    3a8e:	bb 1f       	adc	r27, r27
    3a90:	2a 95       	dec	r18
    3a92:	d2 f7       	brpl	.-12     	; 0x3a88 <__pack_f+0x96>
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	a1 09       	sbc	r26, r1
    3a98:	b1 09       	sbc	r27, r1
    3a9a:	8e 21       	and	r24, r14
    3a9c:	9f 21       	and	r25, r15
    3a9e:	a0 23       	and	r26, r16
    3aa0:	b1 23       	and	r27, r17
    3aa2:	00 97       	sbiw	r24, 0x00	; 0
    3aa4:	a1 05       	cpc	r26, r1
    3aa6:	b1 05       	cpc	r27, r1
    3aa8:	21 f0       	breq	.+8      	; 0x3ab2 <__pack_f+0xc0>
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	a0 e0       	ldi	r26, 0x00	; 0
    3ab0:	b0 e0       	ldi	r27, 0x00	; 0
    3ab2:	9a 01       	movw	r18, r20
    3ab4:	ab 01       	movw	r20, r22
    3ab6:	28 2b       	or	r18, r24
    3ab8:	39 2b       	or	r19, r25
    3aba:	4a 2b       	or	r20, r26
    3abc:	5b 2b       	or	r21, r27
    3abe:	da 01       	movw	r26, r20
    3ac0:	c9 01       	movw	r24, r18
    3ac2:	8f 77       	andi	r24, 0x7F	; 127
    3ac4:	90 70       	andi	r25, 0x00	; 0
    3ac6:	a0 70       	andi	r26, 0x00	; 0
    3ac8:	b0 70       	andi	r27, 0x00	; 0
    3aca:	80 34       	cpi	r24, 0x40	; 64
    3acc:	91 05       	cpc	r25, r1
    3ace:	a1 05       	cpc	r26, r1
    3ad0:	b1 05       	cpc	r27, r1
    3ad2:	39 f4       	brne	.+14     	; 0x3ae2 <__pack_f+0xf0>
    3ad4:	27 ff       	sbrs	r18, 7
    3ad6:	09 c0       	rjmp	.+18     	; 0x3aea <__pack_f+0xf8>
    3ad8:	20 5c       	subi	r18, 0xC0	; 192
    3ada:	3f 4f       	sbci	r19, 0xFF	; 255
    3adc:	4f 4f       	sbci	r20, 0xFF	; 255
    3ade:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae0:	04 c0       	rjmp	.+8      	; 0x3aea <__pack_f+0xf8>
    3ae2:	21 5c       	subi	r18, 0xC1	; 193
    3ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae6:	4f 4f       	sbci	r20, 0xFF	; 255
    3ae8:	5f 4f       	sbci	r21, 0xFF	; 255
    3aea:	e0 e0       	ldi	r30, 0x00	; 0
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	20 30       	cpi	r18, 0x00	; 0
    3af0:	a0 e0       	ldi	r26, 0x00	; 0
    3af2:	3a 07       	cpc	r19, r26
    3af4:	a0 e0       	ldi	r26, 0x00	; 0
    3af6:	4a 07       	cpc	r20, r26
    3af8:	a0 e4       	ldi	r26, 0x40	; 64
    3afa:	5a 07       	cpc	r21, r26
    3afc:	10 f0       	brcs	.+4      	; 0x3b02 <__pack_f+0x110>
    3afe:	e1 e0       	ldi	r30, 0x01	; 1
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	79 01       	movw	r14, r18
    3b04:	8a 01       	movw	r16, r20
    3b06:	27 c0       	rjmp	.+78     	; 0x3b56 <__pack_f+0x164>
    3b08:	60 38       	cpi	r22, 0x80	; 128
    3b0a:	71 05       	cpc	r23, r1
    3b0c:	64 f5       	brge	.+88     	; 0x3b66 <__pack_f+0x174>
    3b0e:	fb 01       	movw	r30, r22
    3b10:	e1 58       	subi	r30, 0x81	; 129
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	d8 01       	movw	r26, r16
    3b16:	c7 01       	movw	r24, r14
    3b18:	8f 77       	andi	r24, 0x7F	; 127
    3b1a:	90 70       	andi	r25, 0x00	; 0
    3b1c:	a0 70       	andi	r26, 0x00	; 0
    3b1e:	b0 70       	andi	r27, 0x00	; 0
    3b20:	80 34       	cpi	r24, 0x40	; 64
    3b22:	91 05       	cpc	r25, r1
    3b24:	a1 05       	cpc	r26, r1
    3b26:	b1 05       	cpc	r27, r1
    3b28:	39 f4       	brne	.+14     	; 0x3b38 <__pack_f+0x146>
    3b2a:	e7 fe       	sbrs	r14, 7
    3b2c:	0d c0       	rjmp	.+26     	; 0x3b48 <__pack_f+0x156>
    3b2e:	80 e4       	ldi	r24, 0x40	; 64
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	a0 e0       	ldi	r26, 0x00	; 0
    3b34:	b0 e0       	ldi	r27, 0x00	; 0
    3b36:	04 c0       	rjmp	.+8      	; 0x3b40 <__pack_f+0x14e>
    3b38:	8f e3       	ldi	r24, 0x3F	; 63
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	a0 e0       	ldi	r26, 0x00	; 0
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	e8 0e       	add	r14, r24
    3b42:	f9 1e       	adc	r15, r25
    3b44:	0a 1f       	adc	r16, r26
    3b46:	1b 1f       	adc	r17, r27
    3b48:	17 ff       	sbrs	r17, 7
    3b4a:	05 c0       	rjmp	.+10     	; 0x3b56 <__pack_f+0x164>
    3b4c:	16 95       	lsr	r17
    3b4e:	07 95       	ror	r16
    3b50:	f7 94       	ror	r15
    3b52:	e7 94       	ror	r14
    3b54:	31 96       	adiw	r30, 0x01	; 1
    3b56:	87 e0       	ldi	r24, 0x07	; 7
    3b58:	16 95       	lsr	r17
    3b5a:	07 95       	ror	r16
    3b5c:	f7 94       	ror	r15
    3b5e:	e7 94       	ror	r14
    3b60:	8a 95       	dec	r24
    3b62:	d1 f7       	brne	.-12     	; 0x3b58 <__pack_f+0x166>
    3b64:	05 c0       	rjmp	.+10     	; 0x3b70 <__pack_f+0x17e>
    3b66:	ef ef       	ldi	r30, 0xFF	; 255
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	ee 24       	eor	r14, r14
    3b6c:	ff 24       	eor	r15, r15
    3b6e:	87 01       	movw	r16, r14
    3b70:	6e 2f       	mov	r22, r30
    3b72:	67 95       	ror	r22
    3b74:	66 27       	eor	r22, r22
    3b76:	67 95       	ror	r22
    3b78:	90 2f       	mov	r25, r16
    3b7a:	9f 77       	andi	r25, 0x7F	; 127
    3b7c:	d7 94       	ror	r13
    3b7e:	dd 24       	eor	r13, r13
    3b80:	d7 94       	ror	r13
    3b82:	8e 2f       	mov	r24, r30
    3b84:	86 95       	lsr	r24
    3b86:	49 2f       	mov	r20, r25
    3b88:	46 2b       	or	r20, r22
    3b8a:	58 2f       	mov	r21, r24
    3b8c:	5d 29       	or	r21, r13
    3b8e:	b7 01       	movw	r22, r14
    3b90:	ca 01       	movw	r24, r20
    3b92:	1f 91       	pop	r17
    3b94:	0f 91       	pop	r16
    3b96:	ff 90       	pop	r15
    3b98:	ef 90       	pop	r14
    3b9a:	df 90       	pop	r13
    3b9c:	08 95       	ret

00003b9e <__unpack_f>:
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	db 01       	movw	r26, r22
    3ba2:	40 81       	ld	r20, Z
    3ba4:	51 81       	ldd	r21, Z+1	; 0x01
    3ba6:	22 81       	ldd	r18, Z+2	; 0x02
    3ba8:	62 2f       	mov	r22, r18
    3baa:	6f 77       	andi	r22, 0x7F	; 127
    3bac:	70 e0       	ldi	r23, 0x00	; 0
    3bae:	22 1f       	adc	r18, r18
    3bb0:	22 27       	eor	r18, r18
    3bb2:	22 1f       	adc	r18, r18
    3bb4:	93 81       	ldd	r25, Z+3	; 0x03
    3bb6:	89 2f       	mov	r24, r25
    3bb8:	88 0f       	add	r24, r24
    3bba:	82 2b       	or	r24, r18
    3bbc:	28 2f       	mov	r18, r24
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	99 27       	eor	r25, r25
    3bc4:	99 1f       	adc	r25, r25
    3bc6:	11 96       	adiw	r26, 0x01	; 1
    3bc8:	9c 93       	st	X, r25
    3bca:	11 97       	sbiw	r26, 0x01	; 1
    3bcc:	21 15       	cp	r18, r1
    3bce:	31 05       	cpc	r19, r1
    3bd0:	a9 f5       	brne	.+106    	; 0x3c3c <__unpack_f+0x9e>
    3bd2:	41 15       	cp	r20, r1
    3bd4:	51 05       	cpc	r21, r1
    3bd6:	61 05       	cpc	r22, r1
    3bd8:	71 05       	cpc	r23, r1
    3bda:	11 f4       	brne	.+4      	; 0x3be0 <__unpack_f+0x42>
    3bdc:	82 e0       	ldi	r24, 0x02	; 2
    3bde:	37 c0       	rjmp	.+110    	; 0x3c4e <__unpack_f+0xb0>
    3be0:	82 e8       	ldi	r24, 0x82	; 130
    3be2:	9f ef       	ldi	r25, 0xFF	; 255
    3be4:	13 96       	adiw	r26, 0x03	; 3
    3be6:	9c 93       	st	X, r25
    3be8:	8e 93       	st	-X, r24
    3bea:	12 97       	sbiw	r26, 0x02	; 2
    3bec:	9a 01       	movw	r18, r20
    3bee:	ab 01       	movw	r20, r22
    3bf0:	67 e0       	ldi	r22, 0x07	; 7
    3bf2:	22 0f       	add	r18, r18
    3bf4:	33 1f       	adc	r19, r19
    3bf6:	44 1f       	adc	r20, r20
    3bf8:	55 1f       	adc	r21, r21
    3bfa:	6a 95       	dec	r22
    3bfc:	d1 f7       	brne	.-12     	; 0x3bf2 <__unpack_f+0x54>
    3bfe:	83 e0       	ldi	r24, 0x03	; 3
    3c00:	8c 93       	st	X, r24
    3c02:	0d c0       	rjmp	.+26     	; 0x3c1e <__unpack_f+0x80>
    3c04:	22 0f       	add	r18, r18
    3c06:	33 1f       	adc	r19, r19
    3c08:	44 1f       	adc	r20, r20
    3c0a:	55 1f       	adc	r21, r21
    3c0c:	12 96       	adiw	r26, 0x02	; 2
    3c0e:	8d 91       	ld	r24, X+
    3c10:	9c 91       	ld	r25, X
    3c12:	13 97       	sbiw	r26, 0x03	; 3
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	13 96       	adiw	r26, 0x03	; 3
    3c18:	9c 93       	st	X, r25
    3c1a:	8e 93       	st	-X, r24
    3c1c:	12 97       	sbiw	r26, 0x02	; 2
    3c1e:	20 30       	cpi	r18, 0x00	; 0
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	38 07       	cpc	r19, r24
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	48 07       	cpc	r20, r24
    3c28:	80 e4       	ldi	r24, 0x40	; 64
    3c2a:	58 07       	cpc	r21, r24
    3c2c:	58 f3       	brcs	.-42     	; 0x3c04 <__unpack_f+0x66>
    3c2e:	14 96       	adiw	r26, 0x04	; 4
    3c30:	2d 93       	st	X+, r18
    3c32:	3d 93       	st	X+, r19
    3c34:	4d 93       	st	X+, r20
    3c36:	5c 93       	st	X, r21
    3c38:	17 97       	sbiw	r26, 0x07	; 7
    3c3a:	08 95       	ret
    3c3c:	2f 3f       	cpi	r18, 0xFF	; 255
    3c3e:	31 05       	cpc	r19, r1
    3c40:	79 f4       	brne	.+30     	; 0x3c60 <__unpack_f+0xc2>
    3c42:	41 15       	cp	r20, r1
    3c44:	51 05       	cpc	r21, r1
    3c46:	61 05       	cpc	r22, r1
    3c48:	71 05       	cpc	r23, r1
    3c4a:	19 f4       	brne	.+6      	; 0x3c52 <__unpack_f+0xb4>
    3c4c:	84 e0       	ldi	r24, 0x04	; 4
    3c4e:	8c 93       	st	X, r24
    3c50:	08 95       	ret
    3c52:	64 ff       	sbrs	r22, 4
    3c54:	03 c0       	rjmp	.+6      	; 0x3c5c <__unpack_f+0xbe>
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	8c 93       	st	X, r24
    3c5a:	12 c0       	rjmp	.+36     	; 0x3c80 <__unpack_f+0xe2>
    3c5c:	1c 92       	st	X, r1
    3c5e:	10 c0       	rjmp	.+32     	; 0x3c80 <__unpack_f+0xe2>
    3c60:	2f 57       	subi	r18, 0x7F	; 127
    3c62:	30 40       	sbci	r19, 0x00	; 0
    3c64:	13 96       	adiw	r26, 0x03	; 3
    3c66:	3c 93       	st	X, r19
    3c68:	2e 93       	st	-X, r18
    3c6a:	12 97       	sbiw	r26, 0x02	; 2
    3c6c:	83 e0       	ldi	r24, 0x03	; 3
    3c6e:	8c 93       	st	X, r24
    3c70:	87 e0       	ldi	r24, 0x07	; 7
    3c72:	44 0f       	add	r20, r20
    3c74:	55 1f       	adc	r21, r21
    3c76:	66 1f       	adc	r22, r22
    3c78:	77 1f       	adc	r23, r23
    3c7a:	8a 95       	dec	r24
    3c7c:	d1 f7       	brne	.-12     	; 0x3c72 <__unpack_f+0xd4>
    3c7e:	70 64       	ori	r23, 0x40	; 64
    3c80:	14 96       	adiw	r26, 0x04	; 4
    3c82:	4d 93       	st	X+, r20
    3c84:	5d 93       	st	X+, r21
    3c86:	6d 93       	st	X+, r22
    3c88:	7c 93       	st	X, r23
    3c8a:	17 97       	sbiw	r26, 0x07	; 7
    3c8c:	08 95       	ret

00003c8e <__fpcmp_parts_f>:
    3c8e:	1f 93       	push	r17
    3c90:	dc 01       	movw	r26, r24
    3c92:	fb 01       	movw	r30, r22
    3c94:	9c 91       	ld	r25, X
    3c96:	92 30       	cpi	r25, 0x02	; 2
    3c98:	08 f4       	brcc	.+2      	; 0x3c9c <__fpcmp_parts_f+0xe>
    3c9a:	47 c0       	rjmp	.+142    	; 0x3d2a <__fpcmp_parts_f+0x9c>
    3c9c:	80 81       	ld	r24, Z
    3c9e:	82 30       	cpi	r24, 0x02	; 2
    3ca0:	08 f4       	brcc	.+2      	; 0x3ca4 <__fpcmp_parts_f+0x16>
    3ca2:	43 c0       	rjmp	.+134    	; 0x3d2a <__fpcmp_parts_f+0x9c>
    3ca4:	94 30       	cpi	r25, 0x04	; 4
    3ca6:	51 f4       	brne	.+20     	; 0x3cbc <__fpcmp_parts_f+0x2e>
    3ca8:	11 96       	adiw	r26, 0x01	; 1
    3caa:	1c 91       	ld	r17, X
    3cac:	84 30       	cpi	r24, 0x04	; 4
    3cae:	99 f5       	brne	.+102    	; 0x3d16 <__fpcmp_parts_f+0x88>
    3cb0:	81 81       	ldd	r24, Z+1	; 0x01
    3cb2:	68 2f       	mov	r22, r24
    3cb4:	70 e0       	ldi	r23, 0x00	; 0
    3cb6:	61 1b       	sub	r22, r17
    3cb8:	71 09       	sbc	r23, r1
    3cba:	3f c0       	rjmp	.+126    	; 0x3d3a <__fpcmp_parts_f+0xac>
    3cbc:	84 30       	cpi	r24, 0x04	; 4
    3cbe:	21 f0       	breq	.+8      	; 0x3cc8 <__fpcmp_parts_f+0x3a>
    3cc0:	92 30       	cpi	r25, 0x02	; 2
    3cc2:	31 f4       	brne	.+12     	; 0x3cd0 <__fpcmp_parts_f+0x42>
    3cc4:	82 30       	cpi	r24, 0x02	; 2
    3cc6:	b9 f1       	breq	.+110    	; 0x3d36 <__fpcmp_parts_f+0xa8>
    3cc8:	81 81       	ldd	r24, Z+1	; 0x01
    3cca:	88 23       	and	r24, r24
    3ccc:	89 f1       	breq	.+98     	; 0x3d30 <__fpcmp_parts_f+0xa2>
    3cce:	2d c0       	rjmp	.+90     	; 0x3d2a <__fpcmp_parts_f+0x9c>
    3cd0:	11 96       	adiw	r26, 0x01	; 1
    3cd2:	1c 91       	ld	r17, X
    3cd4:	11 97       	sbiw	r26, 0x01	; 1
    3cd6:	82 30       	cpi	r24, 0x02	; 2
    3cd8:	f1 f0       	breq	.+60     	; 0x3d16 <__fpcmp_parts_f+0x88>
    3cda:	81 81       	ldd	r24, Z+1	; 0x01
    3cdc:	18 17       	cp	r17, r24
    3cde:	d9 f4       	brne	.+54     	; 0x3d16 <__fpcmp_parts_f+0x88>
    3ce0:	12 96       	adiw	r26, 0x02	; 2
    3ce2:	2d 91       	ld	r18, X+
    3ce4:	3c 91       	ld	r19, X
    3ce6:	13 97       	sbiw	r26, 0x03	; 3
    3ce8:	82 81       	ldd	r24, Z+2	; 0x02
    3cea:	93 81       	ldd	r25, Z+3	; 0x03
    3cec:	82 17       	cp	r24, r18
    3cee:	93 07       	cpc	r25, r19
    3cf0:	94 f0       	brlt	.+36     	; 0x3d16 <__fpcmp_parts_f+0x88>
    3cf2:	28 17       	cp	r18, r24
    3cf4:	39 07       	cpc	r19, r25
    3cf6:	bc f0       	brlt	.+46     	; 0x3d26 <__fpcmp_parts_f+0x98>
    3cf8:	14 96       	adiw	r26, 0x04	; 4
    3cfa:	8d 91       	ld	r24, X+
    3cfc:	9d 91       	ld	r25, X+
    3cfe:	0d 90       	ld	r0, X+
    3d00:	bc 91       	ld	r27, X
    3d02:	a0 2d       	mov	r26, r0
    3d04:	24 81       	ldd	r18, Z+4	; 0x04
    3d06:	35 81       	ldd	r19, Z+5	; 0x05
    3d08:	46 81       	ldd	r20, Z+6	; 0x06
    3d0a:	57 81       	ldd	r21, Z+7	; 0x07
    3d0c:	28 17       	cp	r18, r24
    3d0e:	39 07       	cpc	r19, r25
    3d10:	4a 07       	cpc	r20, r26
    3d12:	5b 07       	cpc	r21, r27
    3d14:	18 f4       	brcc	.+6      	; 0x3d1c <__fpcmp_parts_f+0x8e>
    3d16:	11 23       	and	r17, r17
    3d18:	41 f0       	breq	.+16     	; 0x3d2a <__fpcmp_parts_f+0x9c>
    3d1a:	0a c0       	rjmp	.+20     	; 0x3d30 <__fpcmp_parts_f+0xa2>
    3d1c:	82 17       	cp	r24, r18
    3d1e:	93 07       	cpc	r25, r19
    3d20:	a4 07       	cpc	r26, r20
    3d22:	b5 07       	cpc	r27, r21
    3d24:	40 f4       	brcc	.+16     	; 0x3d36 <__fpcmp_parts_f+0xa8>
    3d26:	11 23       	and	r17, r17
    3d28:	19 f0       	breq	.+6      	; 0x3d30 <__fpcmp_parts_f+0xa2>
    3d2a:	61 e0       	ldi	r22, 0x01	; 1
    3d2c:	70 e0       	ldi	r23, 0x00	; 0
    3d2e:	05 c0       	rjmp	.+10     	; 0x3d3a <__fpcmp_parts_f+0xac>
    3d30:	6f ef       	ldi	r22, 0xFF	; 255
    3d32:	7f ef       	ldi	r23, 0xFF	; 255
    3d34:	02 c0       	rjmp	.+4      	; 0x3d3a <__fpcmp_parts_f+0xac>
    3d36:	60 e0       	ldi	r22, 0x00	; 0
    3d38:	70 e0       	ldi	r23, 0x00	; 0
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	1f 91       	pop	r17
    3d3e:	08 95       	ret

00003d40 <__udivmodqi4>:
    3d40:	99 1b       	sub	r25, r25
    3d42:	79 e0       	ldi	r23, 0x09	; 9
    3d44:	04 c0       	rjmp	.+8      	; 0x3d4e <__udivmodqi4_ep>

00003d46 <__udivmodqi4_loop>:
    3d46:	99 1f       	adc	r25, r25
    3d48:	96 17       	cp	r25, r22
    3d4a:	08 f0       	brcs	.+2      	; 0x3d4e <__udivmodqi4_ep>
    3d4c:	96 1b       	sub	r25, r22

00003d4e <__udivmodqi4_ep>:
    3d4e:	88 1f       	adc	r24, r24
    3d50:	7a 95       	dec	r23
    3d52:	c9 f7       	brne	.-14     	; 0x3d46 <__udivmodqi4_loop>
    3d54:	80 95       	com	r24
    3d56:	08 95       	ret

00003d58 <__divmodhi4>:
    3d58:	97 fb       	bst	r25, 7
    3d5a:	09 2e       	mov	r0, r25
    3d5c:	07 26       	eor	r0, r23
    3d5e:	0a d0       	rcall	.+20     	; 0x3d74 <__divmodhi4_neg1>
    3d60:	77 fd       	sbrc	r23, 7
    3d62:	04 d0       	rcall	.+8      	; 0x3d6c <__divmodhi4_neg2>
    3d64:	0c d0       	rcall	.+24     	; 0x3d7e <__udivmodhi4>
    3d66:	06 d0       	rcall	.+12     	; 0x3d74 <__divmodhi4_neg1>
    3d68:	00 20       	and	r0, r0
    3d6a:	1a f4       	brpl	.+6      	; 0x3d72 <__divmodhi4_exit>

00003d6c <__divmodhi4_neg2>:
    3d6c:	70 95       	com	r23
    3d6e:	61 95       	neg	r22
    3d70:	7f 4f       	sbci	r23, 0xFF	; 255

00003d72 <__divmodhi4_exit>:
    3d72:	08 95       	ret

00003d74 <__divmodhi4_neg1>:
    3d74:	f6 f7       	brtc	.-4      	; 0x3d72 <__divmodhi4_exit>
    3d76:	90 95       	com	r25
    3d78:	81 95       	neg	r24
    3d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7c:	08 95       	ret

00003d7e <__udivmodhi4>:
    3d7e:	aa 1b       	sub	r26, r26
    3d80:	bb 1b       	sub	r27, r27
    3d82:	51 e1       	ldi	r21, 0x11	; 17
    3d84:	07 c0       	rjmp	.+14     	; 0x3d94 <__udivmodhi4_ep>

00003d86 <__udivmodhi4_loop>:
    3d86:	aa 1f       	adc	r26, r26
    3d88:	bb 1f       	adc	r27, r27
    3d8a:	a6 17       	cp	r26, r22
    3d8c:	b7 07       	cpc	r27, r23
    3d8e:	10 f0       	brcs	.+4      	; 0x3d94 <__udivmodhi4_ep>
    3d90:	a6 1b       	sub	r26, r22
    3d92:	b7 0b       	sbc	r27, r23

00003d94 <__udivmodhi4_ep>:
    3d94:	88 1f       	adc	r24, r24
    3d96:	99 1f       	adc	r25, r25
    3d98:	5a 95       	dec	r21
    3d9a:	a9 f7       	brne	.-22     	; 0x3d86 <__udivmodhi4_loop>
    3d9c:	80 95       	com	r24
    3d9e:	90 95       	com	r25
    3da0:	bc 01       	movw	r22, r24
    3da2:	cd 01       	movw	r24, r26
    3da4:	08 95       	ret

00003da6 <__prologue_saves__>:
    3da6:	2f 92       	push	r2
    3da8:	3f 92       	push	r3
    3daa:	4f 92       	push	r4
    3dac:	5f 92       	push	r5
    3dae:	6f 92       	push	r6
    3db0:	7f 92       	push	r7
    3db2:	8f 92       	push	r8
    3db4:	9f 92       	push	r9
    3db6:	af 92       	push	r10
    3db8:	bf 92       	push	r11
    3dba:	cf 92       	push	r12
    3dbc:	df 92       	push	r13
    3dbe:	ef 92       	push	r14
    3dc0:	ff 92       	push	r15
    3dc2:	0f 93       	push	r16
    3dc4:	1f 93       	push	r17
    3dc6:	cf 93       	push	r28
    3dc8:	df 93       	push	r29
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62
    3dce:	ca 1b       	sub	r28, r26
    3dd0:	db 0b       	sbc	r29, r27
    3dd2:	0f b6       	in	r0, 0x3f	; 63
    3dd4:	f8 94       	cli
    3dd6:	de bf       	out	0x3e, r29	; 62
    3dd8:	0f be       	out	0x3f, r0	; 63
    3dda:	cd bf       	out	0x3d, r28	; 61
    3ddc:	09 94       	ijmp

00003dde <__epilogue_restores__>:
    3dde:	2a 88       	ldd	r2, Y+18	; 0x12
    3de0:	39 88       	ldd	r3, Y+17	; 0x11
    3de2:	48 88       	ldd	r4, Y+16	; 0x10
    3de4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3de6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3de8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dea:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dec:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dee:	aa 84       	ldd	r10, Y+10	; 0x0a
    3df0:	b9 84       	ldd	r11, Y+9	; 0x09
    3df2:	c8 84       	ldd	r12, Y+8	; 0x08
    3df4:	df 80       	ldd	r13, Y+7	; 0x07
    3df6:	ee 80       	ldd	r14, Y+6	; 0x06
    3df8:	fd 80       	ldd	r15, Y+5	; 0x05
    3dfa:	0c 81       	ldd	r16, Y+4	; 0x04
    3dfc:	1b 81       	ldd	r17, Y+3	; 0x03
    3dfe:	aa 81       	ldd	r26, Y+2	; 0x02
    3e00:	b9 81       	ldd	r27, Y+1	; 0x01
    3e02:	ce 0f       	add	r28, r30
    3e04:	d1 1d       	adc	r29, r1
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
    3e10:	ed 01       	movw	r28, r26
    3e12:	08 95       	ret

00003e14 <_exit>:
    3e14:	f8 94       	cli

00003e16 <__stop_program>:
    3e16:	ff cf       	rjmp	.-2      	; 0x3e16 <__stop_program>

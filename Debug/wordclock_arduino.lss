
wordclock_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  000034ac  00003540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080016c  0080016c  000035ac  2**0
                  ALLOC
  3 .stab         00004080  00000000  00000000  000035ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000180f  00000000  00000000  0000762c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ea       	ldi	r30, 0xAC	; 172
      7c:	f4 e3       	ldi	r31, 0x34	; 52
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ac 36       	cpi	r26, 0x6C	; 108
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ac e6       	ldi	r26, 0x6C	; 108
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 37       	cpi	r26, 0x72	; 114
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <main>
      9e:	0c 94 54 1a 	jmp	0x34a8	; 0x34a8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initOutput>:

#define SET(port,b) (port) |= (1<<(b))
#define CLR(port,b) (port) &= ~(1<<(b))


void initOutput() {
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	DDRD = (1 << DDD3) | (1 << DDD4) | (1 << DDD5);
      ae:	ea e2       	ldi	r30, 0x2A	; 42
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	88 e3       	ldi	r24, 0x38	; 56
      b4:	80 83       	st	Z, r24
}
      b6:	cf 91       	pop	r28
      b8:	df 91       	pop	r29
      ba:	08 95       	ret

000000bc <setRegisters>:

void setRegisters(char word) {
      bc:	df 93       	push	r29
      be:	cf 93       	push	r28
      c0:	00 d0       	rcall	.+0      	; 0xc2 <setRegisters+0x6>
      c2:	00 d0       	rcall	.+0      	; 0xc4 <setRegisters+0x8>
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	8c 83       	std	Y+4, r24	; 0x04
	SET(PORTD, PD4);
      ca:	ab e2       	ldi	r26, 0x2B	; 43
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	eb e2       	ldi	r30, 0x2B	; 43
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	80 61       	ori	r24, 0x10	; 16
      d6:	8c 93       	st	X, r24
	for (int i = 0; i < 8; i++) {
      d8:	1b 82       	std	Y+3, r1	; 0x03
      da:	1a 82       	std	Y+2, r1	; 0x02
      dc:	2f c0       	rjmp	.+94     	; 0x13c <setRegisters+0x80>
		CLR(PORTD, PD5);
      de:	ab e2       	ldi	r26, 0x2B	; 43
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	eb e2       	ldi	r30, 0x2B	; 43
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	8f 7d       	andi	r24, 0xDF	; 223
      ea:	8c 93       	st	X, r24
		char data = word << i;
      ec:	8c 81       	ldd	r24, Y+4	; 0x04
      ee:	88 2f       	mov	r24, r24
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0a 80       	ldd	r0, Y+2	; 0x02
      f4:	02 c0       	rjmp	.+4      	; 0xfa <setRegisters+0x3e>
      f6:	88 0f       	add	r24, r24
      f8:	99 1f       	adc	r25, r25
      fa:	0a 94       	dec	r0
      fc:	e2 f7       	brpl	.-8      	; 0xf6 <setRegisters+0x3a>
      fe:	89 83       	std	Y+1, r24	; 0x01
		if (data & 0x80) {
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	88 23       	and	r24, r24
     104:	44 f4       	brge	.+16     	; 0x116 <setRegisters+0x5a>
			SET(PORTD, PD3);
     106:	ab e2       	ldi	r26, 0x2B	; 43
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	eb e2       	ldi	r30, 0x2B	; 43
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	88 60       	ori	r24, 0x08	; 8
     112:	8c 93       	st	X, r24
     114:	07 c0       	rjmp	.+14     	; 0x124 <setRegisters+0x68>
		} else {
			CLR(PORTD, PD3);
     116:	ab e2       	ldi	r26, 0x2B	; 43
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	eb e2       	ldi	r30, 0x2B	; 43
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	87 7f       	andi	r24, 0xF7	; 247
     122:	8c 93       	st	X, r24
		}
		SET(PORTD, PD5);
     124:	ab e2       	ldi	r26, 0x2B	; 43
     126:	b0 e0       	ldi	r27, 0x00	; 0
     128:	eb e2       	ldi	r30, 0x2B	; 43
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	80 81       	ld	r24, Z
     12e:	80 62       	ori	r24, 0x20	; 32
     130:	8c 93       	st	X, r24
	DDRD = (1 << DDD3) | (1 << DDD4) | (1 << DDD5);
}

void setRegisters(char word) {
	SET(PORTD, PD4);
	for (int i = 0; i < 8; i++) {
     132:	8a 81       	ldd	r24, Y+2	; 0x02
     134:	9b 81       	ldd	r25, Y+3	; 0x03
     136:	01 96       	adiw	r24, 0x01	; 1
     138:	9b 83       	std	Y+3, r25	; 0x03
     13a:	8a 83       	std	Y+2, r24	; 0x02
     13c:	8a 81       	ldd	r24, Y+2	; 0x02
     13e:	9b 81       	ldd	r25, Y+3	; 0x03
     140:	88 30       	cpi	r24, 0x08	; 8
     142:	91 05       	cpc	r25, r1
     144:	64 f2       	brlt	.-104    	; 0xde <setRegisters+0x22>
		} else {
			CLR(PORTD, PD3);
		}
		SET(PORTD, PD5);
	}
}
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <setTime>:

void setTime(char reg1, char reg2, char reg3) {
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	00 d0       	rcall	.+0      	; 0x15a <setTime+0x6>
     15a:	0f 92       	push	r0
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	89 83       	std	Y+1, r24	; 0x01
     162:	6a 83       	std	Y+2, r22	; 0x02
     164:	4b 83       	std	Y+3, r20	; 0x03
	setRegisters(reg3);
     166:	8b 81       	ldd	r24, Y+3	; 0x03
     168:	0e 94 5e 00 	call	0xbc	; 0xbc <setRegisters>
	setRegisters(reg2);
     16c:	8a 81       	ldd	r24, Y+2	; 0x02
     16e:	0e 94 5e 00 	call	0xbc	; 0xbc <setRegisters>
	setRegisters(reg1);
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	0e 94 5e 00 	call	0xbc	; 0xbc <setRegisters>
}
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	cf 91       	pop	r28
     180:	df 91       	pop	r29
     182:	08 95       	ret

00000184 <ds1302_init>:
#include <util/delay.h>
#include "ds1302.h"



void ds1302_init(void) {
     184:	df 93       	push	r29
     186:	cf 93       	push	r28
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
	DS1302_CLK_DIR_OUT;
     18c:	a4 e2       	ldi	r26, 0x24	; 36
     18e:	b0 e0       	ldi	r27, 0x00	; 0
     190:	e4 e2       	ldi	r30, 0x24	; 36
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	81 60       	ori	r24, 0x01	; 1
     198:	8c 93       	st	X, r24
	DS1302_RST_DIR_OUT;
     19a:	a4 e2       	ldi	r26, 0x24	; 36
     19c:	b0 e0       	ldi	r27, 0x00	; 0
     19e:	e4 e2       	ldi	r30, 0x24	; 36
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	8c 93       	st	X, r24
	DS1302_IO_DIR_OUT;
     1a6:	a4 e2       	ldi	r26, 0x24	; 36
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	e4 e2       	ldi	r30, 0x24	; 36
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	82 60       	ori	r24, 0x02	; 2
     1b2:	8c 93       	st	X, r24
}
     1b4:	cf 91       	pop	r28
     1b6:	df 91       	pop	r29
     1b8:	08 95       	ret

000001ba <ds1302_reset>:

void ds1302_reset(void) {
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	c8 54       	subi	r28, 0x48	; 72
     1c8:	d0 40       	sbci	r29, 0x00	; 0
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
	DS1302_CLK_0;
     1d4:	a5 e2       	ldi	r26, 0x25	; 37
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e5 e2       	ldi	r30, 0x25	; 37
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	8e 7f       	andi	r24, 0xFE	; 254
     1e0:	8c 93       	st	X, r24
     1e2:	fe 01       	movw	r30, r28
     1e4:	eb 5b       	subi	r30, 0xBB	; 187
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	a0 e2       	ldi	r26, 0x20	; 32
     1ee:	b1 e4       	ldi	r27, 0x41	; 65
     1f0:	80 83       	st	Z, r24
     1f2:	91 83       	std	Z+1, r25	; 0x01
     1f4:	a2 83       	std	Z+2, r26	; 0x02
     1f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1f8:	8e 01       	movw	r16, r28
     1fa:	0f 5b       	subi	r16, 0xBF	; 191
     1fc:	1f 4f       	sbci	r17, 0xFF	; 255
     1fe:	fe 01       	movw	r30, r28
     200:	eb 5b       	subi	r30, 0xBB	; 187
     202:	ff 4f       	sbci	r31, 0xFF	; 255
     204:	60 81       	ld	r22, Z
     206:	71 81       	ldd	r23, Z+1	; 0x01
     208:	82 81       	ldd	r24, Z+2	; 0x02
     20a:	93 81       	ldd	r25, Z+3	; 0x03
     20c:	2b ea       	ldi	r18, 0xAB	; 171
     20e:	3a ea       	ldi	r19, 0xAA	; 170
     210:	4a ea       	ldi	r20, 0xAA	; 170
     212:	50 e4       	ldi	r21, 0x40	; 64
     214:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     218:	dc 01       	movw	r26, r24
     21a:	cb 01       	movw	r24, r22
     21c:	f8 01       	movw	r30, r16
     21e:	80 83       	st	Z, r24
     220:	91 83       	std	Z+1, r25	; 0x01
     222:	a2 83       	std	Z+2, r26	; 0x02
     224:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     226:	fe 01       	movw	r30, r28
     228:	ef 5b       	subi	r30, 0xBF	; 191
     22a:	ff 4f       	sbci	r31, 0xFF	; 255
     22c:	60 81       	ld	r22, Z
     22e:	71 81       	ldd	r23, Z+1	; 0x01
     230:	82 81       	ldd	r24, Z+2	; 0x02
     232:	93 81       	ldd	r25, Z+3	; 0x03
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e8       	ldi	r20, 0x80	; 128
     23a:	5f e3       	ldi	r21, 0x3F	; 63
     23c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     240:	88 23       	and	r24, r24
     242:	34 f4       	brge	.+12     	; 0x250 <ds1302_reset+0x96>
		__ticks = 1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	fe 01       	movw	r30, r28
     248:	e0 5c       	subi	r30, 0xC0	; 192
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	80 83       	st	Z, r24
     24e:	9d c0       	rjmp	.+314    	; 0x38a <ds1302_reset+0x1d0>
	else if (__tmp > 255)
     250:	fe 01       	movw	r30, r28
     252:	ef 5b       	subi	r30, 0xBF	; 191
     254:	ff 4f       	sbci	r31, 0xFF	; 255
     256:	60 81       	ld	r22, Z
     258:	71 81       	ldd	r23, Z+1	; 0x01
     25a:	82 81       	ldd	r24, Z+2	; 0x02
     25c:	93 81       	ldd	r25, Z+3	; 0x03
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	4f e7       	ldi	r20, 0x7F	; 127
     264:	53 e4       	ldi	r21, 0x43	; 67
     266:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     26a:	18 16       	cp	r1, r24
     26c:	0c f0       	brlt	.+2      	; 0x270 <ds1302_reset+0xb6>
     26e:	7e c0       	rjmp	.+252    	; 0x36c <ds1302_reset+0x1b2>
	{
		_delay_ms(__us / 1000.0);
     270:	fe 01       	movw	r30, r28
     272:	eb 5b       	subi	r30, 0xBB	; 187
     274:	ff 4f       	sbci	r31, 0xFF	; 255
     276:	60 81       	ld	r22, Z
     278:	71 81       	ldd	r23, Z+1	; 0x01
     27a:	82 81       	ldd	r24, Z+2	; 0x02
     27c:	93 81       	ldd	r25, Z+3	; 0x03
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	4a e7       	ldi	r20, 0x7A	; 122
     284:	54 e4       	ldi	r21, 0x44	; 68
     286:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	8c af       	std	Y+60, r24	; 0x3c
     290:	9d af       	std	Y+61, r25	; 0x3d
     292:	ae af       	std	Y+62, r26	; 0x3e
     294:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     296:	6c ad       	ldd	r22, Y+60	; 0x3c
     298:	7d ad       	ldd	r23, Y+61	; 0x3d
     29a:	8e ad       	ldd	r24, Y+62	; 0x3e
     29c:	9f ad       	ldd	r25, Y+63	; 0x3f
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	4a e7       	ldi	r20, 0x7A	; 122
     2a4:	55 e4       	ldi	r21, 0x45	; 69
     2a6:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	88 af       	std	Y+56, r24	; 0x38
     2b0:	99 af       	std	Y+57, r25	; 0x39
     2b2:	aa af       	std	Y+58, r26	; 0x3a
     2b4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     2b6:	68 ad       	ldd	r22, Y+56	; 0x38
     2b8:	79 ad       	ldd	r23, Y+57	; 0x39
     2ba:	8a ad       	ldd	r24, Y+58	; 0x3a
     2bc:	9b ad       	ldd	r25, Y+59	; 0x3b
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e8       	ldi	r20, 0x80	; 128
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     2ca:	88 23       	and	r24, r24
     2cc:	2c f4       	brge	.+10     	; 0x2d8 <ds1302_reset+0x11e>
		__ticks = 1;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	9f ab       	std	Y+55, r25	; 0x37
     2d4:	8e ab       	std	Y+54, r24	; 0x36
     2d6:	3f c0       	rjmp	.+126    	; 0x356 <ds1302_reset+0x19c>
	else if (__tmp > 65535)
     2d8:	68 ad       	ldd	r22, Y+56	; 0x38
     2da:	79 ad       	ldd	r23, Y+57	; 0x39
     2dc:	8a ad       	ldd	r24, Y+58	; 0x3a
     2de:	9b ad       	ldd	r25, Y+59	; 0x3b
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	3f ef       	ldi	r19, 0xFF	; 255
     2e4:	4f e7       	ldi	r20, 0x7F	; 127
     2e6:	57 e4       	ldi	r21, 0x47	; 71
     2e8:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     2ec:	18 16       	cp	r1, r24
     2ee:	4c f5       	brge	.+82     	; 0x342 <ds1302_reset+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2f0:	6c ad       	ldd	r22, Y+60	; 0x3c
     2f2:	7d ad       	ldd	r23, Y+61	; 0x3d
     2f4:	8e ad       	ldd	r24, Y+62	; 0x3e
     2f6:	9f ad       	ldd	r25, Y+63	; 0x3f
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e2       	ldi	r20, 0x20	; 32
     2fe:	51 e4       	ldi	r21, 0x41	; 65
     300:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     304:	dc 01       	movw	r26, r24
     306:	cb 01       	movw	r24, r22
     308:	bc 01       	movw	r22, r24
     30a:	cd 01       	movw	r24, r26
     30c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     310:	dc 01       	movw	r26, r24
     312:	cb 01       	movw	r24, r22
     314:	9f ab       	std	Y+55, r25	; 0x37
     316:	8e ab       	std	Y+54, r24	; 0x36
     318:	0f c0       	rjmp	.+30     	; 0x338 <ds1302_reset+0x17e>
     31a:	80 e9       	ldi	r24, 0x90	; 144
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	9d ab       	std	Y+53, r25	; 0x35
     320:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     322:	8c a9       	ldd	r24, Y+52	; 0x34
     324:	9d a9       	ldd	r25, Y+53	; 0x35
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <ds1302_reset+0x16c>
     32a:	9d ab       	std	Y+53, r25	; 0x35
     32c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     32e:	8e a9       	ldd	r24, Y+54	; 0x36
     330:	9f a9       	ldd	r25, Y+55	; 0x37
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	9f ab       	std	Y+55, r25	; 0x37
     336:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     338:	8e a9       	ldd	r24, Y+54	; 0x36
     33a:	9f a9       	ldd	r25, Y+55	; 0x37
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	69 f7       	brne	.-38     	; 0x31a <ds1302_reset+0x160>
     340:	2d c0       	rjmp	.+90     	; 0x39c <ds1302_reset+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     342:	68 ad       	ldd	r22, Y+56	; 0x38
     344:	79 ad       	ldd	r23, Y+57	; 0x39
     346:	8a ad       	ldd	r24, Y+58	; 0x3a
     348:	9b ad       	ldd	r25, Y+59	; 0x3b
     34a:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	9f ab       	std	Y+55, r25	; 0x37
     354:	8e ab       	std	Y+54, r24	; 0x36
     356:	8e a9       	ldd	r24, Y+54	; 0x36
     358:	9f a9       	ldd	r25, Y+55	; 0x37
     35a:	9b ab       	std	Y+51, r25	; 0x33
     35c:	8a ab       	std	Y+50, r24	; 0x32
     35e:	8a a9       	ldd	r24, Y+50	; 0x32
     360:	9b a9       	ldd	r25, Y+51	; 0x33
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <ds1302_reset+0x1a8>
     366:	9b ab       	std	Y+51, r25	; 0x33
     368:	8a ab       	std	Y+50, r24	; 0x32
     36a:	18 c0       	rjmp	.+48     	; 0x39c <ds1302_reset+0x1e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     36c:	fe 01       	movw	r30, r28
     36e:	ef 5b       	subi	r30, 0xBF	; 191
     370:	ff 4f       	sbci	r31, 0xFF	; 255
     372:	60 81       	ld	r22, Z
     374:	71 81       	ldd	r23, Z+1	; 0x01
     376:	82 81       	ldd	r24, Z+2	; 0x02
     378:	93 81       	ldd	r25, Z+3	; 0x03
     37a:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	fe 01       	movw	r30, r28
     384:	e0 5c       	subi	r30, 0xC0	; 192
     386:	ff 4f       	sbci	r31, 0xFF	; 255
     388:	80 83       	st	Z, r24
     38a:	fe 01       	movw	r30, r28
     38c:	e0 5c       	subi	r30, 0xC0	; 192
     38e:	ff 4f       	sbci	r31, 0xFF	; 255
     390:	80 81       	ld	r24, Z
     392:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     394:	89 a9       	ldd	r24, Y+49	; 0x31
     396:	8a 95       	dec	r24
     398:	f1 f7       	brne	.-4      	; 0x396 <ds1302_reset+0x1dc>
     39a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	DS1302_RST_0;
     39c:	a5 e2       	ldi	r26, 0x25	; 37
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	e5 e2       	ldi	r30, 0x25	; 37
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	8c 93       	st	X, r24
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	a0 e2       	ldi	r26, 0x20	; 32
     3ae:	b1 e4       	ldi	r27, 0x41	; 65
     3b0:	8d a7       	std	Y+45, r24	; 0x2d
     3b2:	9e a7       	std	Y+46, r25	; 0x2e
     3b4:	af a7       	std	Y+47, r26	; 0x2f
     3b6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     3b8:	6d a5       	ldd	r22, Y+45	; 0x2d
     3ba:	7e a5       	ldd	r23, Y+46	; 0x2e
     3bc:	8f a5       	ldd	r24, Y+47	; 0x2f
     3be:	98 a9       	ldd	r25, Y+48	; 0x30
     3c0:	2b ea       	ldi	r18, 0xAB	; 171
     3c2:	3a ea       	ldi	r19, 0xAA	; 170
     3c4:	4a ea       	ldi	r20, 0xAA	; 170
     3c6:	50 e4       	ldi	r21, 0x40	; 64
     3c8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     3cc:	dc 01       	movw	r26, r24
     3ce:	cb 01       	movw	r24, r22
     3d0:	89 a7       	std	Y+41, r24	; 0x29
     3d2:	9a a7       	std	Y+42, r25	; 0x2a
     3d4:	ab a7       	std	Y+43, r26	; 0x2b
     3d6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     3d8:	69 a5       	ldd	r22, Y+41	; 0x29
     3da:	7a a5       	ldd	r23, Y+42	; 0x2a
     3dc:	8b a5       	ldd	r24, Y+43	; 0x2b
     3de:	9c a5       	ldd	r25, Y+44	; 0x2c
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e8       	ldi	r20, 0x80	; 128
     3e6:	5f e3       	ldi	r21, 0x3F	; 63
     3e8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     3ec:	88 23       	and	r24, r24
     3ee:	1c f4       	brge	.+6      	; 0x3f6 <ds1302_reset+0x23c>
		__ticks = 1;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	88 a7       	std	Y+40, r24	; 0x28
     3f4:	91 c0       	rjmp	.+290    	; 0x518 <ds1302_reset+0x35e>
	else if (__tmp > 255)
     3f6:	69 a5       	ldd	r22, Y+41	; 0x29
     3f8:	7a a5       	ldd	r23, Y+42	; 0x2a
     3fa:	8b a5       	ldd	r24, Y+43	; 0x2b
     3fc:	9c a5       	ldd	r25, Y+44	; 0x2c
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	4f e7       	ldi	r20, 0x7F	; 127
     404:	53 e4       	ldi	r21, 0x43	; 67
     406:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     40a:	18 16       	cp	r1, r24
     40c:	0c f0       	brlt	.+2      	; 0x410 <ds1302_reset+0x256>
     40e:	7b c0       	rjmp	.+246    	; 0x506 <ds1302_reset+0x34c>
	{
		_delay_ms(__us / 1000.0);
     410:	6d a5       	ldd	r22, Y+45	; 0x2d
     412:	7e a5       	ldd	r23, Y+46	; 0x2e
     414:	8f a5       	ldd	r24, Y+47	; 0x2f
     416:	98 a9       	ldd	r25, Y+48	; 0x30
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	4a e7       	ldi	r20, 0x7A	; 122
     41e:	54 e4       	ldi	r21, 0x44	; 68
     420:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	8c a3       	std	Y+36, r24	; 0x24
     42a:	9d a3       	std	Y+37, r25	; 0x25
     42c:	ae a3       	std	Y+38, r26	; 0x26
     42e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     430:	6c a1       	ldd	r22, Y+36	; 0x24
     432:	7d a1       	ldd	r23, Y+37	; 0x25
     434:	8e a1       	ldd	r24, Y+38	; 0x26
     436:	9f a1       	ldd	r25, Y+39	; 0x27
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	4a e7       	ldi	r20, 0x7A	; 122
     43e:	55 e4       	ldi	r21, 0x45	; 69
     440:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	88 a3       	std	Y+32, r24	; 0x20
     44a:	99 a3       	std	Y+33, r25	; 0x21
     44c:	aa a3       	std	Y+34, r26	; 0x22
     44e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     450:	68 a1       	ldd	r22, Y+32	; 0x20
     452:	79 a1       	ldd	r23, Y+33	; 0x21
     454:	8a a1       	ldd	r24, Y+34	; 0x22
     456:	9b a1       	ldd	r25, Y+35	; 0x23
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e8       	ldi	r20, 0x80	; 128
     45e:	5f e3       	ldi	r21, 0x3F	; 63
     460:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     464:	88 23       	and	r24, r24
     466:	2c f4       	brge	.+10     	; 0x472 <ds1302_reset+0x2b8>
		__ticks = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	9f 8f       	std	Y+31, r25	; 0x1f
     46e:	8e 8f       	std	Y+30, r24	; 0x1e
     470:	3f c0       	rjmp	.+126    	; 0x4f0 <ds1302_reset+0x336>
	else if (__tmp > 65535)
     472:	68 a1       	ldd	r22, Y+32	; 0x20
     474:	79 a1       	ldd	r23, Y+33	; 0x21
     476:	8a a1       	ldd	r24, Y+34	; 0x22
     478:	9b a1       	ldd	r25, Y+35	; 0x23
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	3f ef       	ldi	r19, 0xFF	; 255
     47e:	4f e7       	ldi	r20, 0x7F	; 127
     480:	57 e4       	ldi	r21, 0x47	; 71
     482:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     486:	18 16       	cp	r1, r24
     488:	4c f5       	brge	.+82     	; 0x4dc <ds1302_reset+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     48a:	6c a1       	ldd	r22, Y+36	; 0x24
     48c:	7d a1       	ldd	r23, Y+37	; 0x25
     48e:	8e a1       	ldd	r24, Y+38	; 0x26
     490:	9f a1       	ldd	r25, Y+39	; 0x27
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e2       	ldi	r20, 0x20	; 32
     498:	51 e4       	ldi	r21, 0x41	; 65
     49a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     49e:	dc 01       	movw	r26, r24
     4a0:	cb 01       	movw	r24, r22
     4a2:	bc 01       	movw	r22, r24
     4a4:	cd 01       	movw	r24, r26
     4a6:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	9f 8f       	std	Y+31, r25	; 0x1f
     4b0:	8e 8f       	std	Y+30, r24	; 0x1e
     4b2:	0f c0       	rjmp	.+30     	; 0x4d2 <ds1302_reset+0x318>
     4b4:	80 e9       	ldi	r24, 0x90	; 144
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	9d 8f       	std	Y+29, r25	; 0x1d
     4ba:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4be:	9d 8d       	ldd	r25, Y+29	; 0x1d
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <ds1302_reset+0x306>
     4c4:	9d 8f       	std	Y+29, r25	; 0x1d
     4c6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	9f 8f       	std	Y+31, r25	; 0x1f
     4d0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     4d6:	00 97       	sbiw	r24, 0x00	; 0
     4d8:	69 f7       	brne	.-38     	; 0x4b4 <ds1302_reset+0x2fa>
     4da:	24 c0       	rjmp	.+72     	; 0x524 <ds1302_reset+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4dc:	68 a1       	ldd	r22, Y+32	; 0x20
     4de:	79 a1       	ldd	r23, Y+33	; 0x21
     4e0:	8a a1       	ldd	r24, Y+34	; 0x22
     4e2:	9b a1       	ldd	r25, Y+35	; 0x23
     4e4:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	9f 8f       	std	Y+31, r25	; 0x1f
     4ee:	8e 8f       	std	Y+30, r24	; 0x1e
     4f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     4f4:	9b 8f       	std	Y+27, r25	; 0x1b
     4f6:	8a 8f       	std	Y+26, r24	; 0x1a
     4f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     4fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <ds1302_reset+0x342>
     500:	9b 8f       	std	Y+27, r25	; 0x1b
     502:	8a 8f       	std	Y+26, r24	; 0x1a
     504:	0f c0       	rjmp	.+30     	; 0x524 <ds1302_reset+0x36a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     506:	69 a5       	ldd	r22, Y+41	; 0x29
     508:	7a a5       	ldd	r23, Y+42	; 0x2a
     50a:	8b a5       	ldd	r24, Y+43	; 0x2b
     50c:	9c a5       	ldd	r25, Y+44	; 0x2c
     50e:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	88 a7       	std	Y+40, r24	; 0x28
     518:	88 a5       	ldd	r24, Y+40	; 0x28
     51a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     51c:	89 8d       	ldd	r24, Y+25	; 0x19
     51e:	8a 95       	dec	r24
     520:	f1 f7       	brne	.-4      	; 0x51e <ds1302_reset+0x364>
     522:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DS1302_RST_1;
     524:	a5 e2       	ldi	r26, 0x25	; 37
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e5 e2       	ldi	r30, 0x25	; 37
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	8c 93       	st	X, r24
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	a0 e2       	ldi	r26, 0x20	; 32
     536:	b1 e4       	ldi	r27, 0x41	; 65
     538:	8d 8b       	std	Y+21, r24	; 0x15
     53a:	9e 8b       	std	Y+22, r25	; 0x16
     53c:	af 8b       	std	Y+23, r26	; 0x17
     53e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     540:	6d 89       	ldd	r22, Y+21	; 0x15
     542:	7e 89       	ldd	r23, Y+22	; 0x16
     544:	8f 89       	ldd	r24, Y+23	; 0x17
     546:	98 8d       	ldd	r25, Y+24	; 0x18
     548:	2b ea       	ldi	r18, 0xAB	; 171
     54a:	3a ea       	ldi	r19, 0xAA	; 170
     54c:	4a ea       	ldi	r20, 0xAA	; 170
     54e:	50 e4       	ldi	r21, 0x40	; 64
     550:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	89 8b       	std	Y+17, r24	; 0x11
     55a:	9a 8b       	std	Y+18, r25	; 0x12
     55c:	ab 8b       	std	Y+19, r26	; 0x13
     55e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     560:	69 89       	ldd	r22, Y+17	; 0x11
     562:	7a 89       	ldd	r23, Y+18	; 0x12
     564:	8b 89       	ldd	r24, Y+19	; 0x13
     566:	9c 89       	ldd	r25, Y+20	; 0x14
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e8       	ldi	r20, 0x80	; 128
     56e:	5f e3       	ldi	r21, 0x3F	; 63
     570:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     574:	88 23       	and	r24, r24
     576:	1c f4       	brge	.+6      	; 0x57e <ds1302_reset+0x3c4>
		__ticks = 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	88 8b       	std	Y+16, r24	; 0x10
     57c:	91 c0       	rjmp	.+290    	; 0x6a0 <ds1302_reset+0x4e6>
	else if (__tmp > 255)
     57e:	69 89       	ldd	r22, Y+17	; 0x11
     580:	7a 89       	ldd	r23, Y+18	; 0x12
     582:	8b 89       	ldd	r24, Y+19	; 0x13
     584:	9c 89       	ldd	r25, Y+20	; 0x14
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	4f e7       	ldi	r20, 0x7F	; 127
     58c:	53 e4       	ldi	r21, 0x43	; 67
     58e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     592:	18 16       	cp	r1, r24
     594:	0c f0       	brlt	.+2      	; 0x598 <ds1302_reset+0x3de>
     596:	7b c0       	rjmp	.+246    	; 0x68e <ds1302_reset+0x4d4>
	{
		_delay_ms(__us / 1000.0);
     598:	6d 89       	ldd	r22, Y+21	; 0x15
     59a:	7e 89       	ldd	r23, Y+22	; 0x16
     59c:	8f 89       	ldd	r24, Y+23	; 0x17
     59e:	98 8d       	ldd	r25, Y+24	; 0x18
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	4a e7       	ldi	r20, 0x7A	; 122
     5a6:	54 e4       	ldi	r21, 0x44	; 68
     5a8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	8c 87       	std	Y+12, r24	; 0x0c
     5b2:	9d 87       	std	Y+13, r25	; 0x0d
     5b4:	ae 87       	std	Y+14, r26	; 0x0e
     5b6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5b8:	6c 85       	ldd	r22, Y+12	; 0x0c
     5ba:	7d 85       	ldd	r23, Y+13	; 0x0d
     5bc:	8e 85       	ldd	r24, Y+14	; 0x0e
     5be:	9f 85       	ldd	r25, Y+15	; 0x0f
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	4a e7       	ldi	r20, 0x7A	; 122
     5c6:	55 e4       	ldi	r21, 0x45	; 69
     5c8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	88 87       	std	Y+8, r24	; 0x08
     5d2:	99 87       	std	Y+9, r25	; 0x09
     5d4:	aa 87       	std	Y+10, r26	; 0x0a
     5d6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     5d8:	68 85       	ldd	r22, Y+8	; 0x08
     5da:	79 85       	ldd	r23, Y+9	; 0x09
     5dc:	8a 85       	ldd	r24, Y+10	; 0x0a
     5de:	9b 85       	ldd	r25, Y+11	; 0x0b
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e8       	ldi	r20, 0x80	; 128
     5e6:	5f e3       	ldi	r21, 0x3F	; 63
     5e8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     5ec:	88 23       	and	r24, r24
     5ee:	2c f4       	brge	.+10     	; 0x5fa <ds1302_reset+0x440>
		__ticks = 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	9f 83       	std	Y+7, r25	; 0x07
     5f6:	8e 83       	std	Y+6, r24	; 0x06
     5f8:	3f c0       	rjmp	.+126    	; 0x678 <ds1302_reset+0x4be>
	else if (__tmp > 65535)
     5fa:	68 85       	ldd	r22, Y+8	; 0x08
     5fc:	79 85       	ldd	r23, Y+9	; 0x09
     5fe:	8a 85       	ldd	r24, Y+10	; 0x0a
     600:	9b 85       	ldd	r25, Y+11	; 0x0b
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	3f ef       	ldi	r19, 0xFF	; 255
     606:	4f e7       	ldi	r20, 0x7F	; 127
     608:	57 e4       	ldi	r21, 0x47	; 71
     60a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     60e:	18 16       	cp	r1, r24
     610:	4c f5       	brge	.+82     	; 0x664 <ds1302_reset+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     612:	6c 85       	ldd	r22, Y+12	; 0x0c
     614:	7d 85       	ldd	r23, Y+13	; 0x0d
     616:	8e 85       	ldd	r24, Y+14	; 0x0e
     618:	9f 85       	ldd	r25, Y+15	; 0x0f
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e2       	ldi	r20, 0x20	; 32
     620:	51 e4       	ldi	r21, 0x41	; 65
     622:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	bc 01       	movw	r22, r24
     62c:	cd 01       	movw	r24, r26
     62e:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	9f 83       	std	Y+7, r25	; 0x07
     638:	8e 83       	std	Y+6, r24	; 0x06
     63a:	0f c0       	rjmp	.+30     	; 0x65a <ds1302_reset+0x4a0>
     63c:	80 e9       	ldi	r24, 0x90	; 144
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	9d 83       	std	Y+5, r25	; 0x05
     642:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     644:	8c 81       	ldd	r24, Y+4	; 0x04
     646:	9d 81       	ldd	r25, Y+5	; 0x05
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <ds1302_reset+0x48e>
     64c:	9d 83       	std	Y+5, r25	; 0x05
     64e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     650:	8e 81       	ldd	r24, Y+6	; 0x06
     652:	9f 81       	ldd	r25, Y+7	; 0x07
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	9f 83       	std	Y+7, r25	; 0x07
     658:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     65a:	8e 81       	ldd	r24, Y+6	; 0x06
     65c:	9f 81       	ldd	r25, Y+7	; 0x07
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	69 f7       	brne	.-38     	; 0x63c <ds1302_reset+0x482>
     662:	24 c0       	rjmp	.+72     	; 0x6ac <ds1302_reset+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     664:	68 85       	ldd	r22, Y+8	; 0x08
     666:	79 85       	ldd	r23, Y+9	; 0x09
     668:	8a 85       	ldd	r24, Y+10	; 0x0a
     66a:	9b 85       	ldd	r25, Y+11	; 0x0b
     66c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	9f 83       	std	Y+7, r25	; 0x07
     676:	8e 83       	std	Y+6, r24	; 0x06
     678:	8e 81       	ldd	r24, Y+6	; 0x06
     67a:	9f 81       	ldd	r25, Y+7	; 0x07
     67c:	9b 83       	std	Y+3, r25	; 0x03
     67e:	8a 83       	std	Y+2, r24	; 0x02
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	9b 81       	ldd	r25, Y+3	; 0x03
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <ds1302_reset+0x4ca>
     688:	9b 83       	std	Y+3, r25	; 0x03
     68a:	8a 83       	std	Y+2, r24	; 0x02
     68c:	0f c0       	rjmp	.+30     	; 0x6ac <ds1302_reset+0x4f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     68e:	69 89       	ldd	r22, Y+17	; 0x11
     690:	7a 89       	ldd	r23, Y+18	; 0x12
     692:	8b 89       	ldd	r24, Y+19	; 0x13
     694:	9c 89       	ldd	r25, Y+20	; 0x14
     696:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	88 8b       	std	Y+16, r24	; 0x10
     6a0:	88 89       	ldd	r24, Y+16	; 0x10
     6a2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	8a 95       	dec	r24
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <ds1302_reset+0x4ec>
     6aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
     6ac:	c8 5b       	subi	r28, 0xB8	; 184
     6ae:	df 4f       	sbci	r29, 0xFF	; 255
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	cf 91       	pop	r28
     6bc:	df 91       	pop	r29
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <ds1302_write_byte>:

void ds1302_write_byte(unsigned char data) {
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	df 93       	push	r29
     6ca:	cf 93       	push	r28
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	ca 54       	subi	r28, 0x4A	; 74
     6d2:	d0 40       	sbci	r29, 0x00	; 0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	fe 01       	movw	r30, r28
     6e0:	e6 5b       	subi	r30, 0xB6	; 182
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	80 83       	st	Z, r24
	unsigned char i;
	for (i = 0; i < 8; i++) {
     6e6:	fe 01       	movw	r30, r28
     6e8:	e7 5b       	subi	r30, 0xB7	; 183
     6ea:	ff 4f       	sbci	r31, 0xFF	; 255
     6ec:	10 82       	st	Z, r1
     6ee:	92 c2       	rjmp	.+1316   	; 0xc14 <__stack+0x315>
		DS1302_CLK_0;
     6f0:	a5 e2       	ldi	r26, 0x25	; 37
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	e5 e2       	ldi	r30, 0x25	; 37
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	8e 7f       	andi	r24, 0xFE	; 254
     6fc:	8c 93       	st	X, r24
     6fe:	fe 01       	movw	r30, r28
     700:	eb 5b       	subi	r30, 0xBB	; 187
     702:	ff 4f       	sbci	r31, 0xFF	; 255
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	a0 e2       	ldi	r26, 0x20	; 32
     70a:	b1 e4       	ldi	r27, 0x41	; 65
     70c:	80 83       	st	Z, r24
     70e:	91 83       	std	Z+1, r25	; 0x01
     710:	a2 83       	std	Z+2, r26	; 0x02
     712:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     714:	8e 01       	movw	r16, r28
     716:	0f 5b       	subi	r16, 0xBF	; 191
     718:	1f 4f       	sbci	r17, 0xFF	; 255
     71a:	fe 01       	movw	r30, r28
     71c:	eb 5b       	subi	r30, 0xBB	; 187
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	60 81       	ld	r22, Z
     722:	71 81       	ldd	r23, Z+1	; 0x01
     724:	82 81       	ldd	r24, Z+2	; 0x02
     726:	93 81       	ldd	r25, Z+3	; 0x03
     728:	2b ea       	ldi	r18, 0xAB	; 171
     72a:	3a ea       	ldi	r19, 0xAA	; 170
     72c:	4a ea       	ldi	r20, 0xAA	; 170
     72e:	50 e4       	ldi	r21, 0x40	; 64
     730:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	f8 01       	movw	r30, r16
     73a:	80 83       	st	Z, r24
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	a2 83       	std	Z+2, r26	; 0x02
     740:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     742:	fe 01       	movw	r30, r28
     744:	ef 5b       	subi	r30, 0xBF	; 191
     746:	ff 4f       	sbci	r31, 0xFF	; 255
     748:	60 81       	ld	r22, Z
     74a:	71 81       	ldd	r23, Z+1	; 0x01
     74c:	82 81       	ldd	r24, Z+2	; 0x02
     74e:	93 81       	ldd	r25, Z+3	; 0x03
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e8       	ldi	r20, 0x80	; 128
     756:	5f e3       	ldi	r21, 0x3F	; 63
     758:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     75c:	88 23       	and	r24, r24
     75e:	34 f4       	brge	.+12     	; 0x76c <ds1302_write_byte+0xa8>
		__ticks = 1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	fe 01       	movw	r30, r28
     764:	e0 5c       	subi	r30, 0xC0	; 192
     766:	ff 4f       	sbci	r31, 0xFF	; 255
     768:	80 83       	st	Z, r24
     76a:	9d c0       	rjmp	.+314    	; 0x8a6 <ds1302_write_byte+0x1e2>
	else if (__tmp > 255)
     76c:	fe 01       	movw	r30, r28
     76e:	ef 5b       	subi	r30, 0xBF	; 191
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	60 81       	ld	r22, Z
     774:	71 81       	ldd	r23, Z+1	; 0x01
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	93 81       	ldd	r25, Z+3	; 0x03
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	4f e7       	ldi	r20, 0x7F	; 127
     780:	53 e4       	ldi	r21, 0x43	; 67
     782:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     786:	18 16       	cp	r1, r24
     788:	0c f0       	brlt	.+2      	; 0x78c <ds1302_write_byte+0xc8>
     78a:	7e c0       	rjmp	.+252    	; 0x888 <ds1302_write_byte+0x1c4>
	{
		_delay_ms(__us / 1000.0);
     78c:	fe 01       	movw	r30, r28
     78e:	eb 5b       	subi	r30, 0xBB	; 187
     790:	ff 4f       	sbci	r31, 0xFF	; 255
     792:	60 81       	ld	r22, Z
     794:	71 81       	ldd	r23, Z+1	; 0x01
     796:	82 81       	ldd	r24, Z+2	; 0x02
     798:	93 81       	ldd	r25, Z+3	; 0x03
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	4a e7       	ldi	r20, 0x7A	; 122
     7a0:	54 e4       	ldi	r21, 0x44	; 68
     7a2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	8c af       	std	Y+60, r24	; 0x3c
     7ac:	9d af       	std	Y+61, r25	; 0x3d
     7ae:	ae af       	std	Y+62, r26	; 0x3e
     7b0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7b2:	6c ad       	ldd	r22, Y+60	; 0x3c
     7b4:	7d ad       	ldd	r23, Y+61	; 0x3d
     7b6:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b8:	9f ad       	ldd	r25, Y+63	; 0x3f
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	4a e7       	ldi	r20, 0x7A	; 122
     7c0:	55 e4       	ldi	r21, 0x45	; 69
     7c2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	88 af       	std	Y+56, r24	; 0x38
     7cc:	99 af       	std	Y+57, r25	; 0x39
     7ce:	aa af       	std	Y+58, r26	; 0x3a
     7d0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     7d2:	68 ad       	ldd	r22, Y+56	; 0x38
     7d4:	79 ad       	ldd	r23, Y+57	; 0x39
     7d6:	8a ad       	ldd	r24, Y+58	; 0x3a
     7d8:	9b ad       	ldd	r25, Y+59	; 0x3b
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e8       	ldi	r20, 0x80	; 128
     7e0:	5f e3       	ldi	r21, 0x3F	; 63
     7e2:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     7e6:	88 23       	and	r24, r24
     7e8:	2c f4       	brge	.+10     	; 0x7f4 <ds1302_write_byte+0x130>
		__ticks = 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	9f ab       	std	Y+55, r25	; 0x37
     7f0:	8e ab       	std	Y+54, r24	; 0x36
     7f2:	3f c0       	rjmp	.+126    	; 0x872 <ds1302_write_byte+0x1ae>
	else if (__tmp > 65535)
     7f4:	68 ad       	ldd	r22, Y+56	; 0x38
     7f6:	79 ad       	ldd	r23, Y+57	; 0x39
     7f8:	8a ad       	ldd	r24, Y+58	; 0x3a
     7fa:	9b ad       	ldd	r25, Y+59	; 0x3b
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	3f ef       	ldi	r19, 0xFF	; 255
     800:	4f e7       	ldi	r20, 0x7F	; 127
     802:	57 e4       	ldi	r21, 0x47	; 71
     804:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     808:	18 16       	cp	r1, r24
     80a:	4c f5       	brge	.+82     	; 0x85e <ds1302_write_byte+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     80c:	6c ad       	ldd	r22, Y+60	; 0x3c
     80e:	7d ad       	ldd	r23, Y+61	; 0x3d
     810:	8e ad       	ldd	r24, Y+62	; 0x3e
     812:	9f ad       	ldd	r25, Y+63	; 0x3f
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e2       	ldi	r20, 0x20	; 32
     81a:	51 e4       	ldi	r21, 0x41	; 65
     81c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	bc 01       	movw	r22, r24
     826:	cd 01       	movw	r24, r26
     828:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	9f ab       	std	Y+55, r25	; 0x37
     832:	8e ab       	std	Y+54, r24	; 0x36
     834:	0f c0       	rjmp	.+30     	; 0x854 <ds1302_write_byte+0x190>
     836:	80 e9       	ldi	r24, 0x90	; 144
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	9d ab       	std	Y+53, r25	; 0x35
     83c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     83e:	8c a9       	ldd	r24, Y+52	; 0x34
     840:	9d a9       	ldd	r25, Y+53	; 0x35
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <ds1302_write_byte+0x17e>
     846:	9d ab       	std	Y+53, r25	; 0x35
     848:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84a:	8e a9       	ldd	r24, Y+54	; 0x36
     84c:	9f a9       	ldd	r25, Y+55	; 0x37
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	9f ab       	std	Y+55, r25	; 0x37
     852:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     854:	8e a9       	ldd	r24, Y+54	; 0x36
     856:	9f a9       	ldd	r25, Y+55	; 0x37
     858:	00 97       	sbiw	r24, 0x00	; 0
     85a:	69 f7       	brne	.-38     	; 0x836 <ds1302_write_byte+0x172>
     85c:	2d c0       	rjmp	.+90     	; 0x8b8 <ds1302_write_byte+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     85e:	68 ad       	ldd	r22, Y+56	; 0x38
     860:	79 ad       	ldd	r23, Y+57	; 0x39
     862:	8a ad       	ldd	r24, Y+58	; 0x3a
     864:	9b ad       	ldd	r25, Y+59	; 0x3b
     866:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     86a:	dc 01       	movw	r26, r24
     86c:	cb 01       	movw	r24, r22
     86e:	9f ab       	std	Y+55, r25	; 0x37
     870:	8e ab       	std	Y+54, r24	; 0x36
     872:	8e a9       	ldd	r24, Y+54	; 0x36
     874:	9f a9       	ldd	r25, Y+55	; 0x37
     876:	9b ab       	std	Y+51, r25	; 0x33
     878:	8a ab       	std	Y+50, r24	; 0x32
     87a:	8a a9       	ldd	r24, Y+50	; 0x32
     87c:	9b a9       	ldd	r25, Y+51	; 0x33
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <ds1302_write_byte+0x1ba>
     882:	9b ab       	std	Y+51, r25	; 0x33
     884:	8a ab       	std	Y+50, r24	; 0x32
     886:	18 c0       	rjmp	.+48     	; 0x8b8 <ds1302_write_byte+0x1f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     888:	fe 01       	movw	r30, r28
     88a:	ef 5b       	subi	r30, 0xBF	; 191
     88c:	ff 4f       	sbci	r31, 0xFF	; 255
     88e:	60 81       	ld	r22, Z
     890:	71 81       	ldd	r23, Z+1	; 0x01
     892:	82 81       	ldd	r24, Z+2	; 0x02
     894:	93 81       	ldd	r25, Z+3	; 0x03
     896:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	fe 01       	movw	r30, r28
     8a0:	e0 5c       	subi	r30, 0xC0	; 192
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	80 83       	st	Z, r24
     8a6:	fe 01       	movw	r30, r28
     8a8:	e0 5c       	subi	r30, 0xC0	; 192
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	80 81       	ld	r24, Z
     8ae:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8b0:	89 a9       	ldd	r24, Y+49	; 0x31
     8b2:	8a 95       	dec	r24
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <ds1302_write_byte+0x1ee>
     8b6:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		if (data & 0x01)
     8b8:	fe 01       	movw	r30, r28
     8ba:	e6 5b       	subi	r30, 0xB6	; 182
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	80 81       	ld	r24, Z
     8c0:	88 2f       	mov	r24, r24
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	81 70       	andi	r24, 0x01	; 1
     8c6:	90 70       	andi	r25, 0x00	; 0
     8c8:	88 23       	and	r24, r24
     8ca:	41 f0       	breq	.+16     	; 0x8dc <ds1302_write_byte+0x218>
			DS1302_IO_1;
     8cc:	a5 e2       	ldi	r26, 0x25	; 37
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	e5 e2       	ldi	r30, 0x25	; 37
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	82 60       	ori	r24, 0x02	; 2
     8d8:	8c 93       	st	X, r24
     8da:	07 c0       	rjmp	.+14     	; 0x8ea <ds1302_write_byte+0x226>
		else
			DS1302_IO_0;
     8dc:	a5 e2       	ldi	r26, 0x25	; 37
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	e5 e2       	ldi	r30, 0x25	; 37
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	8d 7f       	andi	r24, 0xFD	; 253
     8e8:	8c 93       	st	X, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	a0 e2       	ldi	r26, 0x20	; 32
     8f0:	b1 e4       	ldi	r27, 0x41	; 65
     8f2:	8d a7       	std	Y+45, r24	; 0x2d
     8f4:	9e a7       	std	Y+46, r25	; 0x2e
     8f6:	af a7       	std	Y+47, r26	; 0x2f
     8f8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     8fa:	6d a5       	ldd	r22, Y+45	; 0x2d
     8fc:	7e a5       	ldd	r23, Y+46	; 0x2e
     8fe:	8f a5       	ldd	r24, Y+47	; 0x2f
     900:	98 a9       	ldd	r25, Y+48	; 0x30
     902:	2b ea       	ldi	r18, 0xAB	; 171
     904:	3a ea       	ldi	r19, 0xAA	; 170
     906:	4a ea       	ldi	r20, 0xAA	; 170
     908:	50 e4       	ldi	r21, 0x40	; 64
     90a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	89 a7       	std	Y+41, r24	; 0x29
     914:	9a a7       	std	Y+42, r25	; 0x2a
     916:	ab a7       	std	Y+43, r26	; 0x2b
     918:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     91a:	69 a5       	ldd	r22, Y+41	; 0x29
     91c:	7a a5       	ldd	r23, Y+42	; 0x2a
     91e:	8b a5       	ldd	r24, Y+43	; 0x2b
     920:	9c a5       	ldd	r25, Y+44	; 0x2c
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e8       	ldi	r20, 0x80	; 128
     928:	5f e3       	ldi	r21, 0x3F	; 63
     92a:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     92e:	88 23       	and	r24, r24
     930:	1c f4       	brge	.+6      	; 0x938 <__stack+0x39>
		__ticks = 1;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	88 a7       	std	Y+40, r24	; 0x28
     936:	91 c0       	rjmp	.+290    	; 0xa5a <__stack+0x15b>
	else if (__tmp > 255)
     938:	69 a5       	ldd	r22, Y+41	; 0x29
     93a:	7a a5       	ldd	r23, Y+42	; 0x2a
     93c:	8b a5       	ldd	r24, Y+43	; 0x2b
     93e:	9c a5       	ldd	r25, Y+44	; 0x2c
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	4f e7       	ldi	r20, 0x7F	; 127
     946:	53 e4       	ldi	r21, 0x43	; 67
     948:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     94c:	18 16       	cp	r1, r24
     94e:	0c f0       	brlt	.+2      	; 0x952 <__stack+0x53>
     950:	7b c0       	rjmp	.+246    	; 0xa48 <__stack+0x149>
	{
		_delay_ms(__us / 1000.0);
     952:	6d a5       	ldd	r22, Y+45	; 0x2d
     954:	7e a5       	ldd	r23, Y+46	; 0x2e
     956:	8f a5       	ldd	r24, Y+47	; 0x2f
     958:	98 a9       	ldd	r25, Y+48	; 0x30
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	4a e7       	ldi	r20, 0x7A	; 122
     960:	54 e4       	ldi	r21, 0x44	; 68
     962:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	8c a3       	std	Y+36, r24	; 0x24
     96c:	9d a3       	std	Y+37, r25	; 0x25
     96e:	ae a3       	std	Y+38, r26	; 0x26
     970:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     972:	6c a1       	ldd	r22, Y+36	; 0x24
     974:	7d a1       	ldd	r23, Y+37	; 0x25
     976:	8e a1       	ldd	r24, Y+38	; 0x26
     978:	9f a1       	ldd	r25, Y+39	; 0x27
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	4a e7       	ldi	r20, 0x7A	; 122
     980:	55 e4       	ldi	r21, 0x45	; 69
     982:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	88 a3       	std	Y+32, r24	; 0x20
     98c:	99 a3       	std	Y+33, r25	; 0x21
     98e:	aa a3       	std	Y+34, r26	; 0x22
     990:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     992:	68 a1       	ldd	r22, Y+32	; 0x20
     994:	79 a1       	ldd	r23, Y+33	; 0x21
     996:	8a a1       	ldd	r24, Y+34	; 0x22
     998:	9b a1       	ldd	r25, Y+35	; 0x23
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e8       	ldi	r20, 0x80	; 128
     9a0:	5f e3       	ldi	r21, 0x3F	; 63
     9a2:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     9a6:	88 23       	and	r24, r24
     9a8:	2c f4       	brge	.+10     	; 0x9b4 <__stack+0xb5>
		__ticks = 1;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	9f 8f       	std	Y+31, r25	; 0x1f
     9b0:	8e 8f       	std	Y+30, r24	; 0x1e
     9b2:	3f c0       	rjmp	.+126    	; 0xa32 <__stack+0x133>
	else if (__tmp > 65535)
     9b4:	68 a1       	ldd	r22, Y+32	; 0x20
     9b6:	79 a1       	ldd	r23, Y+33	; 0x21
     9b8:	8a a1       	ldd	r24, Y+34	; 0x22
     9ba:	9b a1       	ldd	r25, Y+35	; 0x23
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	3f ef       	ldi	r19, 0xFF	; 255
     9c0:	4f e7       	ldi	r20, 0x7F	; 127
     9c2:	57 e4       	ldi	r21, 0x47	; 71
     9c4:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     9c8:	18 16       	cp	r1, r24
     9ca:	4c f5       	brge	.+82     	; 0xa1e <__stack+0x11f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9cc:	6c a1       	ldd	r22, Y+36	; 0x24
     9ce:	7d a1       	ldd	r23, Y+37	; 0x25
     9d0:	8e a1       	ldd	r24, Y+38	; 0x26
     9d2:	9f a1       	ldd	r25, Y+39	; 0x27
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	40 e2       	ldi	r20, 0x20	; 32
     9da:	51 e4       	ldi	r21, 0x41	; 65
     9dc:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	bc 01       	movw	r22, r24
     9e6:	cd 01       	movw	r24, r26
     9e8:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	9f 8f       	std	Y+31, r25	; 0x1f
     9f2:	8e 8f       	std	Y+30, r24	; 0x1e
     9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__stack+0x115>
     9f6:	80 e9       	ldi	r24, 0x90	; 144
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	9d 8f       	std	Y+29, r25	; 0x1d
     9fc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a00:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <__stack+0x103>
     a06:	9d 8f       	std	Y+29, r25	; 0x1d
     a08:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	9f 8f       	std	Y+31, r25	; 0x1f
     a12:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a16:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	69 f7       	brne	.-38     	; 0x9f6 <__stack+0xf7>
     a1c:	24 c0       	rjmp	.+72     	; 0xa66 <__stack+0x167>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a1e:	68 a1       	ldd	r22, Y+32	; 0x20
     a20:	79 a1       	ldd	r23, Y+33	; 0x21
     a22:	8a a1       	ldd	r24, Y+34	; 0x22
     a24:	9b a1       	ldd	r25, Y+35	; 0x23
     a26:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     a2a:	dc 01       	movw	r26, r24
     a2c:	cb 01       	movw	r24, r22
     a2e:	9f 8f       	std	Y+31, r25	; 0x1f
     a30:	8e 8f       	std	Y+30, r24	; 0x1e
     a32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a34:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a36:	9b 8f       	std	Y+27, r25	; 0x1b
     a38:	8a 8f       	std	Y+26, r24	; 0x1a
     a3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <__stack+0x13f>
     a42:	9b 8f       	std	Y+27, r25	; 0x1b
     a44:	8a 8f       	std	Y+26, r24	; 0x1a
     a46:	0f c0       	rjmp	.+30     	; 0xa66 <__stack+0x167>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a48:	69 a5       	ldd	r22, Y+41	; 0x29
     a4a:	7a a5       	ldd	r23, Y+42	; 0x2a
     a4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     a4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     a50:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	88 a7       	std	Y+40, r24	; 0x28
     a5a:	88 a5       	ldd	r24, Y+40	; 0x28
     a5c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a5e:	89 8d       	ldd	r24, Y+25	; 0x19
     a60:	8a 95       	dec	r24
     a62:	f1 f7       	brne	.-4      	; 0xa60 <__stack+0x161>
     a64:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		DS1302_CLK_1;
     a66:	a5 e2       	ldi	r26, 0x25	; 37
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e5 e2       	ldi	r30, 0x25	; 37
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	81 60       	ori	r24, 0x01	; 1
     a72:	8c 93       	st	X, r24
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e2       	ldi	r26, 0x20	; 32
     a7a:	b1 e4       	ldi	r27, 0x41	; 65
     a7c:	8d 8b       	std	Y+21, r24	; 0x15
     a7e:	9e 8b       	std	Y+22, r25	; 0x16
     a80:	af 8b       	std	Y+23, r26	; 0x17
     a82:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     a84:	6d 89       	ldd	r22, Y+21	; 0x15
     a86:	7e 89       	ldd	r23, Y+22	; 0x16
     a88:	8f 89       	ldd	r24, Y+23	; 0x17
     a8a:	98 8d       	ldd	r25, Y+24	; 0x18
     a8c:	2b ea       	ldi	r18, 0xAB	; 171
     a8e:	3a ea       	ldi	r19, 0xAA	; 170
     a90:	4a ea       	ldi	r20, 0xAA	; 170
     a92:	50 e4       	ldi	r21, 0x40	; 64
     a94:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	89 8b       	std	Y+17, r24	; 0x11
     a9e:	9a 8b       	std	Y+18, r25	; 0x12
     aa0:	ab 8b       	std	Y+19, r26	; 0x13
     aa2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     aa4:	69 89       	ldd	r22, Y+17	; 0x11
     aa6:	7a 89       	ldd	r23, Y+18	; 0x12
     aa8:	8b 89       	ldd	r24, Y+19	; 0x13
     aaa:	9c 89       	ldd	r25, Y+20	; 0x14
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e8       	ldi	r20, 0x80	; 128
     ab2:	5f e3       	ldi	r21, 0x3F	; 63
     ab4:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     ab8:	88 23       	and	r24, r24
     aba:	1c f4       	brge	.+6      	; 0xac2 <__stack+0x1c3>
		__ticks = 1;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	88 8b       	std	Y+16, r24	; 0x10
     ac0:	91 c0       	rjmp	.+290    	; 0xbe4 <__stack+0x2e5>
	else if (__tmp > 255)
     ac2:	69 89       	ldd	r22, Y+17	; 0x11
     ac4:	7a 89       	ldd	r23, Y+18	; 0x12
     ac6:	8b 89       	ldd	r24, Y+19	; 0x13
     ac8:	9c 89       	ldd	r25, Y+20	; 0x14
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	4f e7       	ldi	r20, 0x7F	; 127
     ad0:	53 e4       	ldi	r21, 0x43	; 67
     ad2:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	0c f0       	brlt	.+2      	; 0xadc <__stack+0x1dd>
     ada:	7b c0       	rjmp	.+246    	; 0xbd2 <__stack+0x2d3>
	{
		_delay_ms(__us / 1000.0);
     adc:	6d 89       	ldd	r22, Y+21	; 0x15
     ade:	7e 89       	ldd	r23, Y+22	; 0x16
     ae0:	8f 89       	ldd	r24, Y+23	; 0x17
     ae2:	98 8d       	ldd	r25, Y+24	; 0x18
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	4a e7       	ldi	r20, 0x7A	; 122
     aea:	54 e4       	ldi	r21, 0x44	; 68
     aec:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	8c 87       	std	Y+12, r24	; 0x0c
     af6:	9d 87       	std	Y+13, r25	; 0x0d
     af8:	ae 87       	std	Y+14, r26	; 0x0e
     afa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     afc:	6c 85       	ldd	r22, Y+12	; 0x0c
     afe:	7d 85       	ldd	r23, Y+13	; 0x0d
     b00:	8e 85       	ldd	r24, Y+14	; 0x0e
     b02:	9f 85       	ldd	r25, Y+15	; 0x0f
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	4a e7       	ldi	r20, 0x7A	; 122
     b0a:	55 e4       	ldi	r21, 0x45	; 69
     b0c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	88 87       	std	Y+8, r24	; 0x08
     b16:	99 87       	std	Y+9, r25	; 0x09
     b18:	aa 87       	std	Y+10, r26	; 0x0a
     b1a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     b1c:	68 85       	ldd	r22, Y+8	; 0x08
     b1e:	79 85       	ldd	r23, Y+9	; 0x09
     b20:	8a 85       	ldd	r24, Y+10	; 0x0a
     b22:	9b 85       	ldd	r25, Y+11	; 0x0b
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e8       	ldi	r20, 0x80	; 128
     b2a:	5f e3       	ldi	r21, 0x3F	; 63
     b2c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     b30:	88 23       	and	r24, r24
     b32:	2c f4       	brge	.+10     	; 0xb3e <__stack+0x23f>
		__ticks = 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	9f 83       	std	Y+7, r25	; 0x07
     b3a:	8e 83       	std	Y+6, r24	; 0x06
     b3c:	3f c0       	rjmp	.+126    	; 0xbbc <__stack+0x2bd>
	else if (__tmp > 65535)
     b3e:	68 85       	ldd	r22, Y+8	; 0x08
     b40:	79 85       	ldd	r23, Y+9	; 0x09
     b42:	8a 85       	ldd	r24, Y+10	; 0x0a
     b44:	9b 85       	ldd	r25, Y+11	; 0x0b
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	3f ef       	ldi	r19, 0xFF	; 255
     b4a:	4f e7       	ldi	r20, 0x7F	; 127
     b4c:	57 e4       	ldi	r21, 0x47	; 71
     b4e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     b52:	18 16       	cp	r1, r24
     b54:	4c f5       	brge	.+82     	; 0xba8 <__stack+0x2a9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b56:	6c 85       	ldd	r22, Y+12	; 0x0c
     b58:	7d 85       	ldd	r23, Y+13	; 0x0d
     b5a:	8e 85       	ldd	r24, Y+14	; 0x0e
     b5c:	9f 85       	ldd	r25, Y+15	; 0x0f
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e2       	ldi	r20, 0x20	; 32
     b64:	51 e4       	ldi	r21, 0x41	; 65
     b66:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	bc 01       	movw	r22, r24
     b70:	cd 01       	movw	r24, r26
     b72:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	9f 83       	std	Y+7, r25	; 0x07
     b7c:	8e 83       	std	Y+6, r24	; 0x06
     b7e:	0f c0       	rjmp	.+30     	; 0xb9e <__stack+0x29f>
     b80:	80 e9       	ldi	r24, 0x90	; 144
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	9d 83       	std	Y+5, r25	; 0x05
     b86:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b88:	8c 81       	ldd	r24, Y+4	; 0x04
     b8a:	9d 81       	ldd	r25, Y+5	; 0x05
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <__stack+0x28d>
     b90:	9d 83       	std	Y+5, r25	; 0x05
     b92:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b94:	8e 81       	ldd	r24, Y+6	; 0x06
     b96:	9f 81       	ldd	r25, Y+7	; 0x07
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	9f 83       	std	Y+7, r25	; 0x07
     b9c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ba0:	9f 81       	ldd	r25, Y+7	; 0x07
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	69 f7       	brne	.-38     	; 0xb80 <__stack+0x281>
     ba6:	24 c0       	rjmp	.+72     	; 0xbf0 <__stack+0x2f1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba8:	68 85       	ldd	r22, Y+8	; 0x08
     baa:	79 85       	ldd	r23, Y+9	; 0x09
     bac:	8a 85       	ldd	r24, Y+10	; 0x0a
     bae:	9b 85       	ldd	r25, Y+11	; 0x0b
     bb0:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	9f 83       	std	Y+7, r25	; 0x07
     bba:	8e 83       	std	Y+6, r24	; 0x06
     bbc:	8e 81       	ldd	r24, Y+6	; 0x06
     bbe:	9f 81       	ldd	r25, Y+7	; 0x07
     bc0:	9b 83       	std	Y+3, r25	; 0x03
     bc2:	8a 83       	std	Y+2, r24	; 0x02
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	9b 81       	ldd	r25, Y+3	; 0x03
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <__stack+0x2c9>
     bcc:	9b 83       	std	Y+3, r25	; 0x03
     bce:	8a 83       	std	Y+2, r24	; 0x02
     bd0:	0f c0       	rjmp	.+30     	; 0xbf0 <__stack+0x2f1>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     bd2:	69 89       	ldd	r22, Y+17	; 0x11
     bd4:	7a 89       	ldd	r23, Y+18	; 0x12
     bd6:	8b 89       	ldd	r24, Y+19	; 0x13
     bd8:	9c 89       	ldd	r25, Y+20	; 0x14
     bda:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	88 8b       	std	Y+16, r24	; 0x10
     be4:	88 89       	ldd	r24, Y+16	; 0x10
     be6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	8a 95       	dec	r24
     bec:	f1 f7       	brne	.-4      	; 0xbea <__stack+0x2eb>
     bee:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		data >>= 1;
     bf0:	de 01       	movw	r26, r28
     bf2:	a6 5b       	subi	r26, 0xB6	; 182
     bf4:	bf 4f       	sbci	r27, 0xFF	; 255
     bf6:	fe 01       	movw	r30, r28
     bf8:	e6 5b       	subi	r30, 0xB6	; 182
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	80 81       	ld	r24, Z
     bfe:	86 95       	lsr	r24
     c00:	8c 93       	st	X, r24
	_delay_us(10);
}

void ds1302_write_byte(unsigned char data) {
	unsigned char i;
	for (i = 0; i < 8; i++) {
     c02:	de 01       	movw	r26, r28
     c04:	a7 5b       	subi	r26, 0xB7	; 183
     c06:	bf 4f       	sbci	r27, 0xFF	; 255
     c08:	fe 01       	movw	r30, r28
     c0a:	e7 5b       	subi	r30, 0xB7	; 183
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	80 81       	ld	r24, Z
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	8c 93       	st	X, r24
     c14:	fe 01       	movw	r30, r28
     c16:	e7 5b       	subi	r30, 0xB7	; 183
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	80 81       	ld	r24, Z
     c1c:	88 30       	cpi	r24, 0x08	; 8
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__stack+0x323>
     c20:	67 cd       	rjmp	.-1330   	; 0x6f0 <ds1302_write_byte+0x2c>
		DS1302_CLK_1;
		_delay_us(10);
		data >>= 1;

	}
}
     c22:	c6 5b       	subi	r28, 0xB6	; 182
     c24:	df 4f       	sbci	r29, 0xFF	; 255
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	08 95       	ret

00000c3a <ds1302_read_byte>:

unsigned char ds1302_read_byte(void) {
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	ca 54       	subi	r28, 0x4A	; 74
     c48:	d0 40       	sbci	r29, 0x00	; 0
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
	unsigned char i, data;
	data = 0;
     c54:	fe 01       	movw	r30, r28
     c56:	e7 5b       	subi	r30, 0xB7	; 183
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	10 82       	st	Z, r1

	for (i = 0; i < 8; i++) {
     c5c:	fe 01       	movw	r30, r28
     c5e:	e6 5b       	subi	r30, 0xB6	; 182
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	10 82       	st	Z, r1
     c64:	8c c2       	rjmp	.+1304   	; 0x117e <ds1302_read_byte+0x544>
		DS1302_CLK_0;
     c66:	a5 e2       	ldi	r26, 0x25	; 37
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e5 e2       	ldi	r30, 0x25	; 37
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8e 7f       	andi	r24, 0xFE	; 254
     c72:	8c 93       	st	X, r24
     c74:	fe 01       	movw	r30, r28
     c76:	eb 5b       	subi	r30, 0xBB	; 187
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e2       	ldi	r26, 0x20	; 32
     c80:	b1 e4       	ldi	r27, 0x41	; 65
     c82:	80 83       	st	Z, r24
     c84:	91 83       	std	Z+1, r25	; 0x01
     c86:	a2 83       	std	Z+2, r26	; 0x02
     c88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     c8a:	8e 01       	movw	r16, r28
     c8c:	0f 5b       	subi	r16, 0xBF	; 191
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	fe 01       	movw	r30, r28
     c92:	eb 5b       	subi	r30, 0xBB	; 187
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	60 81       	ld	r22, Z
     c98:	71 81       	ldd	r23, Z+1	; 0x01
     c9a:	82 81       	ldd	r24, Z+2	; 0x02
     c9c:	93 81       	ldd	r25, Z+3	; 0x03
     c9e:	2b ea       	ldi	r18, 0xAB	; 171
     ca0:	3a ea       	ldi	r19, 0xAA	; 170
     ca2:	4a ea       	ldi	r20, 0xAA	; 170
     ca4:	50 e4       	ldi	r21, 0x40	; 64
     ca6:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	f8 01       	movw	r30, r16
     cb0:	80 83       	st	Z, r24
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	a2 83       	std	Z+2, r26	; 0x02
     cb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cb8:	fe 01       	movw	r30, r28
     cba:	ef 5b       	subi	r30, 0xBF	; 191
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	60 81       	ld	r22, Z
     cc0:	71 81       	ldd	r23, Z+1	; 0x01
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     cd2:	88 23       	and	r24, r24
     cd4:	34 f4       	brge	.+12     	; 0xce2 <ds1302_read_byte+0xa8>
		__ticks = 1;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	fe 01       	movw	r30, r28
     cda:	e0 5c       	subi	r30, 0xC0	; 192
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	80 83       	st	Z, r24
     ce0:	9d c0       	rjmp	.+314    	; 0xe1c <ds1302_read_byte+0x1e2>
	else if (__tmp > 255)
     ce2:	fe 01       	movw	r30, r28
     ce4:	ef 5b       	subi	r30, 0xBF	; 191
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	53 e4       	ldi	r21, 0x43	; 67
     cf8:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     cfc:	18 16       	cp	r1, r24
     cfe:	0c f0       	brlt	.+2      	; 0xd02 <ds1302_read_byte+0xc8>
     d00:	7e c0       	rjmp	.+252    	; 0xdfe <ds1302_read_byte+0x1c4>
	{
		_delay_ms(__us / 1000.0);
     d02:	fe 01       	movw	r30, r28
     d04:	eb 5b       	subi	r30, 0xBB	; 187
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	4a e7       	ldi	r20, 0x7A	; 122
     d16:	54 e4       	ldi	r21, 0x44	; 68
     d18:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	8c af       	std	Y+60, r24	; 0x3c
     d22:	9d af       	std	Y+61, r25	; 0x3d
     d24:	ae af       	std	Y+62, r26	; 0x3e
     d26:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d28:	6c ad       	ldd	r22, Y+60	; 0x3c
     d2a:	7d ad       	ldd	r23, Y+61	; 0x3d
     d2c:	8e ad       	ldd	r24, Y+62	; 0x3e
     d2e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	4a e7       	ldi	r20, 0x7A	; 122
     d36:	55 e4       	ldi	r21, 0x45	; 69
     d38:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	88 af       	std	Y+56, r24	; 0x38
     d42:	99 af       	std	Y+57, r25	; 0x39
     d44:	aa af       	std	Y+58, r26	; 0x3a
     d46:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     d48:	68 ad       	ldd	r22, Y+56	; 0x38
     d4a:	79 ad       	ldd	r23, Y+57	; 0x39
     d4c:	8a ad       	ldd	r24, Y+58	; 0x3a
     d4e:	9b ad       	ldd	r25, Y+59	; 0x3b
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e8       	ldi	r20, 0x80	; 128
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     d5c:	88 23       	and	r24, r24
     d5e:	2c f4       	brge	.+10     	; 0xd6a <ds1302_read_byte+0x130>
		__ticks = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9f ab       	std	Y+55, r25	; 0x37
     d66:	8e ab       	std	Y+54, r24	; 0x36
     d68:	3f c0       	rjmp	.+126    	; 0xde8 <ds1302_read_byte+0x1ae>
	else if (__tmp > 65535)
     d6a:	68 ad       	ldd	r22, Y+56	; 0x38
     d6c:	79 ad       	ldd	r23, Y+57	; 0x39
     d6e:	8a ad       	ldd	r24, Y+58	; 0x3a
     d70:	9b ad       	ldd	r25, Y+59	; 0x3b
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	3f ef       	ldi	r19, 0xFF	; 255
     d76:	4f e7       	ldi	r20, 0x7F	; 127
     d78:	57 e4       	ldi	r21, 0x47	; 71
     d7a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     d7e:	18 16       	cp	r1, r24
     d80:	4c f5       	brge	.+82     	; 0xdd4 <ds1302_read_byte+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d82:	6c ad       	ldd	r22, Y+60	; 0x3c
     d84:	7d ad       	ldd	r23, Y+61	; 0x3d
     d86:	8e ad       	ldd	r24, Y+62	; 0x3e
     d88:	9f ad       	ldd	r25, Y+63	; 0x3f
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e2       	ldi	r20, 0x20	; 32
     d90:	51 e4       	ldi	r21, 0x41	; 65
     d92:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	9f ab       	std	Y+55, r25	; 0x37
     da8:	8e ab       	std	Y+54, r24	; 0x36
     daa:	0f c0       	rjmp	.+30     	; 0xdca <ds1302_read_byte+0x190>
     dac:	80 e9       	ldi	r24, 0x90	; 144
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	9d ab       	std	Y+53, r25	; 0x35
     db2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db4:	8c a9       	ldd	r24, Y+52	; 0x34
     db6:	9d a9       	ldd	r25, Y+53	; 0x35
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <ds1302_read_byte+0x17e>
     dbc:	9d ab       	std	Y+53, r25	; 0x35
     dbe:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc0:	8e a9       	ldd	r24, Y+54	; 0x36
     dc2:	9f a9       	ldd	r25, Y+55	; 0x37
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	9f ab       	std	Y+55, r25	; 0x37
     dc8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	8e a9       	ldd	r24, Y+54	; 0x36
     dcc:	9f a9       	ldd	r25, Y+55	; 0x37
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	69 f7       	brne	.-38     	; 0xdac <ds1302_read_byte+0x172>
     dd2:	2d c0       	rjmp	.+90     	; 0xe2e <ds1302_read_byte+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd4:	68 ad       	ldd	r22, Y+56	; 0x38
     dd6:	79 ad       	ldd	r23, Y+57	; 0x39
     dd8:	8a ad       	ldd	r24, Y+58	; 0x3a
     dda:	9b ad       	ldd	r25, Y+59	; 0x3b
     ddc:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	9f ab       	std	Y+55, r25	; 0x37
     de6:	8e ab       	std	Y+54, r24	; 0x36
     de8:	8e a9       	ldd	r24, Y+54	; 0x36
     dea:	9f a9       	ldd	r25, Y+55	; 0x37
     dec:	9b ab       	std	Y+51, r25	; 0x33
     dee:	8a ab       	std	Y+50, r24	; 0x32
     df0:	8a a9       	ldd	r24, Y+50	; 0x32
     df2:	9b a9       	ldd	r25, Y+51	; 0x33
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <ds1302_read_byte+0x1ba>
     df8:	9b ab       	std	Y+51, r25	; 0x33
     dfa:	8a ab       	std	Y+50, r24	; 0x32
     dfc:	18 c0       	rjmp	.+48     	; 0xe2e <ds1302_read_byte+0x1f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     dfe:	fe 01       	movw	r30, r28
     e00:	ef 5b       	subi	r30, 0xBF	; 191
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	fe 01       	movw	r30, r28
     e16:	e0 5c       	subi	r30, 0xC0	; 192
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	80 83       	st	Z, r24
     e1c:	fe 01       	movw	r30, r28
     e1e:	e0 5c       	subi	r30, 0xC0	; 192
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	80 81       	ld	r24, Z
     e24:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e26:	89 a9       	ldd	r24, Y+49	; 0x31
     e28:	8a 95       	dec	r24
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <ds1302_read_byte+0x1ee>
     e2c:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		data >>= 1;
     e2e:	de 01       	movw	r26, r28
     e30:	a7 5b       	subi	r26, 0xB7	; 183
     e32:	bf 4f       	sbci	r27, 0xFF	; 255
     e34:	fe 01       	movw	r30, r28
     e36:	e7 5b       	subi	r30, 0xB7	; 183
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	80 81       	ld	r24, Z
     e3c:	86 95       	lsr	r24
     e3e:	8c 93       	st	X, r24
		if (DS1302_IO_IN)
     e40:	a3 e2       	ldi	r26, 0x23	; 35
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e3 e2       	ldi	r30, 0x23	; 35
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	82 70       	andi	r24, 0x02	; 2
     e4c:	8c 93       	st	X, r24
     e4e:	8c 91       	ld	r24, X
     e50:	88 23       	and	r24, r24
     e52:	49 f0       	breq	.+18     	; 0xe66 <ds1302_read_byte+0x22c>
			data |= 0x80;
     e54:	de 01       	movw	r26, r28
     e56:	a7 5b       	subi	r26, 0xB7	; 183
     e58:	bf 4f       	sbci	r27, 0xFF	; 255
     e5a:	fe 01       	movw	r30, r28
     e5c:	e7 5b       	subi	r30, 0xB7	; 183
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	80 81       	ld	r24, Z
     e62:	80 68       	ori	r24, 0x80	; 128
     e64:	8c 93       	st	X, r24
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e2       	ldi	r26, 0x20	; 32
     e6c:	b1 e4       	ldi	r27, 0x41	; 65
     e6e:	8d a7       	std	Y+45, r24	; 0x2d
     e70:	9e a7       	std	Y+46, r25	; 0x2e
     e72:	af a7       	std	Y+47, r26	; 0x2f
     e74:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e76:	6d a5       	ldd	r22, Y+45	; 0x2d
     e78:	7e a5       	ldd	r23, Y+46	; 0x2e
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	2b ea       	ldi	r18, 0xAB	; 171
     e80:	3a ea       	ldi	r19, 0xAA	; 170
     e82:	4a ea       	ldi	r20, 0xAA	; 170
     e84:	50 e4       	ldi	r21, 0x40	; 64
     e86:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	89 a7       	std	Y+41, r24	; 0x29
     e90:	9a a7       	std	Y+42, r25	; 0x2a
     e92:	ab a7       	std	Y+43, r26	; 0x2b
     e94:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     e96:	69 a5       	ldd	r22, Y+41	; 0x29
     e98:	7a a5       	ldd	r23, Y+42	; 0x2a
     e9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     eaa:	88 23       	and	r24, r24
     eac:	1c f4       	brge	.+6      	; 0xeb4 <ds1302_read_byte+0x27a>
		__ticks = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	88 a7       	std	Y+40, r24	; 0x28
     eb2:	91 c0       	rjmp	.+290    	; 0xfd6 <ds1302_read_byte+0x39c>
	else if (__tmp > 255)
     eb4:	69 a5       	ldd	r22, Y+41	; 0x29
     eb6:	7a a5       	ldd	r23, Y+42	; 0x2a
     eb8:	8b a5       	ldd	r24, Y+43	; 0x2b
     eba:	9c a5       	ldd	r25, Y+44	; 0x2c
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	4f e7       	ldi	r20, 0x7F	; 127
     ec2:	53 e4       	ldi	r21, 0x43	; 67
     ec4:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     ec8:	18 16       	cp	r1, r24
     eca:	0c f0       	brlt	.+2      	; 0xece <ds1302_read_byte+0x294>
     ecc:	7b c0       	rjmp	.+246    	; 0xfc4 <ds1302_read_byte+0x38a>
	{
		_delay_ms(__us / 1000.0);
     ece:	6d a5       	ldd	r22, Y+45	; 0x2d
     ed0:	7e a5       	ldd	r23, Y+46	; 0x2e
     ed2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ed4:	98 a9       	ldd	r25, Y+48	; 0x30
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	4a e7       	ldi	r20, 0x7A	; 122
     edc:	54 e4       	ldi	r21, 0x44	; 68
     ede:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	8c a3       	std	Y+36, r24	; 0x24
     ee8:	9d a3       	std	Y+37, r25	; 0x25
     eea:	ae a3       	std	Y+38, r26	; 0x26
     eec:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eee:	6c a1       	ldd	r22, Y+36	; 0x24
     ef0:	7d a1       	ldd	r23, Y+37	; 0x25
     ef2:	8e a1       	ldd	r24, Y+38	; 0x26
     ef4:	9f a1       	ldd	r25, Y+39	; 0x27
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	4a e7       	ldi	r20, 0x7A	; 122
     efc:	55 e4       	ldi	r21, 0x45	; 69
     efe:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	88 a3       	std	Y+32, r24	; 0x20
     f08:	99 a3       	std	Y+33, r25	; 0x21
     f0a:	aa a3       	std	Y+34, r26	; 0x22
     f0c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f0e:	68 a1       	ldd	r22, Y+32	; 0x20
     f10:	79 a1       	ldd	r23, Y+33	; 0x21
     f12:	8a a1       	ldd	r24, Y+34	; 0x22
     f14:	9b a1       	ldd	r25, Y+35	; 0x23
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
     f22:	88 23       	and	r24, r24
     f24:	2c f4       	brge	.+10     	; 0xf30 <ds1302_read_byte+0x2f6>
		__ticks = 1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	9f 8f       	std	Y+31, r25	; 0x1f
     f2c:	8e 8f       	std	Y+30, r24	; 0x1e
     f2e:	3f c0       	rjmp	.+126    	; 0xfae <ds1302_read_byte+0x374>
	else if (__tmp > 65535)
     f30:	68 a1       	ldd	r22, Y+32	; 0x20
     f32:	79 a1       	ldd	r23, Y+33	; 0x21
     f34:	8a a1       	ldd	r24, Y+34	; 0x22
     f36:	9b a1       	ldd	r25, Y+35	; 0x23
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	3f ef       	ldi	r19, 0xFF	; 255
     f3c:	4f e7       	ldi	r20, 0x7F	; 127
     f3e:	57 e4       	ldi	r21, 0x47	; 71
     f40:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
     f44:	18 16       	cp	r1, r24
     f46:	4c f5       	brge	.+82     	; 0xf9a <ds1302_read_byte+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f48:	6c a1       	ldd	r22, Y+36	; 0x24
     f4a:	7d a1       	ldd	r23, Y+37	; 0x25
     f4c:	8e a1       	ldd	r24, Y+38	; 0x26
     f4e:	9f a1       	ldd	r25, Y+39	; 0x27
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e2       	ldi	r20, 0x20	; 32
     f56:	51 e4       	ldi	r21, 0x41	; 65
     f58:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	9f 8f       	std	Y+31, r25	; 0x1f
     f6e:	8e 8f       	std	Y+30, r24	; 0x1e
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <ds1302_read_byte+0x356>
     f72:	80 e9       	ldi	r24, 0x90	; 144
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	9d 8f       	std	Y+29, r25	; 0x1d
     f78:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f7a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f7c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <ds1302_read_byte+0x344>
     f82:	9d 8f       	std	Y+29, r25	; 0x1d
     f84:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f86:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f88:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	9f 8f       	std	Y+31, r25	; 0x1f
     f8e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f92:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	69 f7       	brne	.-38     	; 0xf72 <ds1302_read_byte+0x338>
     f98:	24 c0       	rjmp	.+72     	; 0xfe2 <ds1302_read_byte+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9a:	68 a1       	ldd	r22, Y+32	; 0x20
     f9c:	79 a1       	ldd	r23, Y+33	; 0x21
     f9e:	8a a1       	ldd	r24, Y+34	; 0x22
     fa0:	9b a1       	ldd	r25, Y+35	; 0x23
     fa2:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9f 8f       	std	Y+31, r25	; 0x1f
     fac:	8e 8f       	std	Y+30, r24	; 0x1e
     fae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fb0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fb2:	9b 8f       	std	Y+27, r25	; 0x1b
     fb4:	8a 8f       	std	Y+26, r24	; 0x1a
     fb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fb8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <ds1302_read_byte+0x380>
     fbe:	9b 8f       	std	Y+27, r25	; 0x1b
     fc0:	8a 8f       	std	Y+26, r24	; 0x1a
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <ds1302_read_byte+0x3a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fc4:	69 a5       	ldd	r22, Y+41	; 0x29
     fc6:	7a a5       	ldd	r23, Y+42	; 0x2a
     fc8:	8b a5       	ldd	r24, Y+43	; 0x2b
     fca:	9c a5       	ldd	r25, Y+44	; 0x2c
     fcc:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	88 a7       	std	Y+40, r24	; 0x28
     fd6:	88 a5       	ldd	r24, Y+40	; 0x28
     fd8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fda:	89 8d       	ldd	r24, Y+25	; 0x19
     fdc:	8a 95       	dec	r24
     fde:	f1 f7       	brne	.-4      	; 0xfdc <ds1302_read_byte+0x3a2>
     fe0:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		DS1302_CLK_1;
     fe2:	a5 e2       	ldi	r26, 0x25	; 37
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e5 e2       	ldi	r30, 0x25	; 37
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	81 60       	ori	r24, 0x01	; 1
     fee:	8c 93       	st	X, r24
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a0 e2       	ldi	r26, 0x20	; 32
     ff6:	b1 e4       	ldi	r27, 0x41	; 65
     ff8:	8d 8b       	std	Y+21, r24	; 0x15
     ffa:	9e 8b       	std	Y+22, r25	; 0x16
     ffc:	af 8b       	std	Y+23, r26	; 0x17
     ffe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1000:	6d 89       	ldd	r22, Y+21	; 0x15
    1002:	7e 89       	ldd	r23, Y+22	; 0x16
    1004:	8f 89       	ldd	r24, Y+23	; 0x17
    1006:	98 8d       	ldd	r25, Y+24	; 0x18
    1008:	2b ea       	ldi	r18, 0xAB	; 171
    100a:	3a ea       	ldi	r19, 0xAA	; 170
    100c:	4a ea       	ldi	r20, 0xAA	; 170
    100e:	50 e4       	ldi	r21, 0x40	; 64
    1010:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	89 8b       	std	Y+17, r24	; 0x11
    101a:	9a 8b       	std	Y+18, r25	; 0x12
    101c:	ab 8b       	std	Y+19, r26	; 0x13
    101e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1020:	69 89       	ldd	r22, Y+17	; 0x11
    1022:	7a 89       	ldd	r23, Y+18	; 0x12
    1024:	8b 89       	ldd	r24, Y+19	; 0x13
    1026:	9c 89       	ldd	r25, Y+20	; 0x14
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e8       	ldi	r20, 0x80	; 128
    102e:	5f e3       	ldi	r21, 0x3F	; 63
    1030:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1034:	88 23       	and	r24, r24
    1036:	1c f4       	brge	.+6      	; 0x103e <ds1302_read_byte+0x404>
		__ticks = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	88 8b       	std	Y+16, r24	; 0x10
    103c:	91 c0       	rjmp	.+290    	; 0x1160 <ds1302_read_byte+0x526>
	else if (__tmp > 255)
    103e:	69 89       	ldd	r22, Y+17	; 0x11
    1040:	7a 89       	ldd	r23, Y+18	; 0x12
    1042:	8b 89       	ldd	r24, Y+19	; 0x13
    1044:	9c 89       	ldd	r25, Y+20	; 0x14
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4f e7       	ldi	r20, 0x7F	; 127
    104c:	53 e4       	ldi	r21, 0x43	; 67
    104e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1052:	18 16       	cp	r1, r24
    1054:	0c f0       	brlt	.+2      	; 0x1058 <ds1302_read_byte+0x41e>
    1056:	7b c0       	rjmp	.+246    	; 0x114e <ds1302_read_byte+0x514>
	{
		_delay_ms(__us / 1000.0);
    1058:	6d 89       	ldd	r22, Y+21	; 0x15
    105a:	7e 89       	ldd	r23, Y+22	; 0x16
    105c:	8f 89       	ldd	r24, Y+23	; 0x17
    105e:	98 8d       	ldd	r25, Y+24	; 0x18
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	4a e7       	ldi	r20, 0x7A	; 122
    1066:	54 e4       	ldi	r21, 0x44	; 68
    1068:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	8c 87       	std	Y+12, r24	; 0x0c
    1072:	9d 87       	std	Y+13, r25	; 0x0d
    1074:	ae 87       	std	Y+14, r26	; 0x0e
    1076:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	6c 85       	ldd	r22, Y+12	; 0x0c
    107a:	7d 85       	ldd	r23, Y+13	; 0x0d
    107c:	8e 85       	ldd	r24, Y+14	; 0x0e
    107e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a e7       	ldi	r20, 0x7A	; 122
    1086:	55 e4       	ldi	r21, 0x45	; 69
    1088:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	88 87       	std	Y+8, r24	; 0x08
    1092:	99 87       	std	Y+9, r25	; 0x09
    1094:	aa 87       	std	Y+10, r26	; 0x0a
    1096:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1098:	68 85       	ldd	r22, Y+8	; 0x08
    109a:	79 85       	ldd	r23, Y+9	; 0x09
    109c:	8a 85       	ldd	r24, Y+10	; 0x0a
    109e:	9b 85       	ldd	r25, Y+11	; 0x0b
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <ds1302_read_byte+0x480>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9f 83       	std	Y+7, r25	; 0x07
    10b6:	8e 83       	std	Y+6, r24	; 0x06
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <ds1302_read_byte+0x4fe>
	else if (__tmp > 65535)
    10ba:	68 85       	ldd	r22, Y+8	; 0x08
    10bc:	79 85       	ldd	r23, Y+9	; 0x09
    10be:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <ds1302_read_byte+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    10d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    10d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    10d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9f 83       	std	Y+7, r25	; 0x07
    10f8:	8e 83       	std	Y+6, r24	; 0x06
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <ds1302_read_byte+0x4e0>
    10fc:	80 e9       	ldi	r24, 0x90	; 144
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	9d 83       	std	Y+5, r25	; 0x05
    1102:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <ds1302_read_byte+0x4ce>
    110c:	9d 83       	std	Y+5, r25	; 0x05
    110e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	9f 81       	ldd	r25, Y+7	; 0x07
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9f 83       	std	Y+7, r25	; 0x07
    1118:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	9f 81       	ldd	r25, Y+7	; 0x07
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <ds1302_read_byte+0x4c2>
    1122:	24 c0       	rjmp	.+72     	; 0x116c <ds1302_read_byte+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	68 85       	ldd	r22, Y+8	; 0x08
    1126:	79 85       	ldd	r23, Y+9	; 0x09
    1128:	8a 85       	ldd	r24, Y+10	; 0x0a
    112a:	9b 85       	ldd	r25, Y+11	; 0x0b
    112c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9f 83       	std	Y+7, r25	; 0x07
    1136:	8e 83       	std	Y+6, r24	; 0x06
    1138:	8e 81       	ldd	r24, Y+6	; 0x06
    113a:	9f 81       	ldd	r25, Y+7	; 0x07
    113c:	9b 83       	std	Y+3, r25	; 0x03
    113e:	8a 83       	std	Y+2, r24	; 0x02
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	9b 81       	ldd	r25, Y+3	; 0x03
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <ds1302_read_byte+0x50a>
    1148:	9b 83       	std	Y+3, r25	; 0x03
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	0f c0       	rjmp	.+30     	; 0x116c <ds1302_read_byte+0x532>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    114e:	69 89       	ldd	r22, Y+17	; 0x11
    1150:	7a 89       	ldd	r23, Y+18	; 0x12
    1152:	8b 89       	ldd	r24, Y+19	; 0x13
    1154:	9c 89       	ldd	r25, Y+20	; 0x14
    1156:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	88 8b       	std	Y+16, r24	; 0x10
    1160:	88 89       	ldd	r24, Y+16	; 0x10
    1162:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	8a 95       	dec	r24
    1168:	f1 f7       	brne	.-4      	; 0x1166 <ds1302_read_byte+0x52c>
    116a:	89 83       	std	Y+1, r24	; 0x01

unsigned char ds1302_read_byte(void) {
	unsigned char i, data;
	data = 0;

	for (i = 0; i < 8; i++) {
    116c:	de 01       	movw	r26, r28
    116e:	a6 5b       	subi	r26, 0xB6	; 182
    1170:	bf 4f       	sbci	r27, 0xFF	; 255
    1172:	fe 01       	movw	r30, r28
    1174:	e6 5b       	subi	r30, 0xB6	; 182
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	80 81       	ld	r24, Z
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	8c 93       	st	X, r24
    117e:	fe 01       	movw	r30, r28
    1180:	e6 5b       	subi	r30, 0xB6	; 182
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	80 81       	ld	r24, Z
    1186:	88 30       	cpi	r24, 0x08	; 8
    1188:	08 f4       	brcc	.+2      	; 0x118c <ds1302_read_byte+0x552>
    118a:	6d cd       	rjmp	.-1318   	; 0xc66 <ds1302_read_byte+0x2c>
			data |= 0x80;
		_delay_us(10);
		DS1302_CLK_1;
		_delay_us(10);
	}
	return data;
    118c:	fe 01       	movw	r30, r28
    118e:	e7 5b       	subi	r30, 0xB7	; 183
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	80 81       	ld	r24, Z
}
    1194:	c6 5b       	subi	r28, 0xB6	; 182
    1196:	df 4f       	sbci	r29, 0xFF	; 255
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	08 95       	ret

000011ac <ds1302_write>:

void ds1302_write(unsigned char reg, unsigned char data) {
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	e2 97       	sbiw	r28, 0x32	; 50
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	89 ab       	std	Y+49, r24	; 0x31
    11c2:	6a ab       	std	Y+50, r22	; 0x32
	DS1302_IO_DIR_OUT;
    11c4:	a4 e2       	ldi	r26, 0x24	; 36
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e4 e2       	ldi	r30, 0x24	; 36
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	82 60       	ori	r24, 0x02	; 2
    11d0:	8c 93       	st	X, r24
	ds1302_reset();
    11d2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ds1302_reset>
	ds1302_write_byte(reg);
    11d6:	89 a9       	ldd	r24, Y+49	; 0x31
    11d8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <ds1302_write_byte>
	ds1302_write_byte(data);
    11dc:	8a a9       	ldd	r24, Y+50	; 0x32
    11de:	0e 94 62 03 	call	0x6c4	; 0x6c4 <ds1302_write_byte>

	DS1302_CLK_0;
    11e2:	a5 e2       	ldi	r26, 0x25	; 37
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e5 e2       	ldi	r30, 0x25	; 37
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8e 7f       	andi	r24, 0xFE	; 254
    11ee:	8c 93       	st	X, r24
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	a0 e2       	ldi	r26, 0x20	; 32
    11f6:	b1 e4       	ldi	r27, 0x41	; 65
    11f8:	8d a7       	std	Y+45, r24	; 0x2d
    11fa:	9e a7       	std	Y+46, r25	; 0x2e
    11fc:	af a7       	std	Y+47, r26	; 0x2f
    11fe:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1200:	6d a5       	ldd	r22, Y+45	; 0x2d
    1202:	7e a5       	ldd	r23, Y+46	; 0x2e
    1204:	8f a5       	ldd	r24, Y+47	; 0x2f
    1206:	98 a9       	ldd	r25, Y+48	; 0x30
    1208:	2b ea       	ldi	r18, 0xAB	; 171
    120a:	3a ea       	ldi	r19, 0xAA	; 170
    120c:	4a ea       	ldi	r20, 0xAA	; 170
    120e:	50 e4       	ldi	r21, 0x40	; 64
    1210:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	89 a7       	std	Y+41, r24	; 0x29
    121a:	9a a7       	std	Y+42, r25	; 0x2a
    121c:	ab a7       	std	Y+43, r26	; 0x2b
    121e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1220:	69 a5       	ldd	r22, Y+41	; 0x29
    1222:	7a a5       	ldd	r23, Y+42	; 0x2a
    1224:	8b a5       	ldd	r24, Y+43	; 0x2b
    1226:	9c a5       	ldd	r25, Y+44	; 0x2c
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e8       	ldi	r20, 0x80	; 128
    122e:	5f e3       	ldi	r21, 0x3F	; 63
    1230:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1234:	88 23       	and	r24, r24
    1236:	1c f4       	brge	.+6      	; 0x123e <ds1302_write+0x92>
		__ticks = 1;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	88 a7       	std	Y+40, r24	; 0x28
    123c:	91 c0       	rjmp	.+290    	; 0x1360 <ds1302_write+0x1b4>
	else if (__tmp > 255)
    123e:	69 a5       	ldd	r22, Y+41	; 0x29
    1240:	7a a5       	ldd	r23, Y+42	; 0x2a
    1242:	8b a5       	ldd	r24, Y+43	; 0x2b
    1244:	9c a5       	ldd	r25, Y+44	; 0x2c
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	53 e4       	ldi	r21, 0x43	; 67
    124e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1252:	18 16       	cp	r1, r24
    1254:	0c f0       	brlt	.+2      	; 0x1258 <ds1302_write+0xac>
    1256:	7b c0       	rjmp	.+246    	; 0x134e <ds1302_write+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    1258:	6d a5       	ldd	r22, Y+45	; 0x2d
    125a:	7e a5       	ldd	r23, Y+46	; 0x2e
    125c:	8f a5       	ldd	r24, Y+47	; 0x2f
    125e:	98 a9       	ldd	r25, Y+48	; 0x30
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	4a e7       	ldi	r20, 0x7A	; 122
    1266:	54 e4       	ldi	r21, 0x44	; 68
    1268:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	8c a3       	std	Y+36, r24	; 0x24
    1272:	9d a3       	std	Y+37, r25	; 0x25
    1274:	ae a3       	std	Y+38, r26	; 0x26
    1276:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1278:	6c a1       	ldd	r22, Y+36	; 0x24
    127a:	7d a1       	ldd	r23, Y+37	; 0x25
    127c:	8e a1       	ldd	r24, Y+38	; 0x26
    127e:	9f a1       	ldd	r25, Y+39	; 0x27
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	4a e7       	ldi	r20, 0x7A	; 122
    1286:	55 e4       	ldi	r21, 0x45	; 69
    1288:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	88 a3       	std	Y+32, r24	; 0x20
    1292:	99 a3       	std	Y+33, r25	; 0x21
    1294:	aa a3       	std	Y+34, r26	; 0x22
    1296:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1298:	68 a1       	ldd	r22, Y+32	; 0x20
    129a:	79 a1       	ldd	r23, Y+33	; 0x21
    129c:	8a a1       	ldd	r24, Y+34	; 0x22
    129e:	9b a1       	ldd	r25, Y+35	; 0x23
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e8       	ldi	r20, 0x80	; 128
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    12ac:	88 23       	and	r24, r24
    12ae:	2c f4       	brge	.+10     	; 0x12ba <ds1302_write+0x10e>
		__ticks = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9f 8f       	std	Y+31, r25	; 0x1f
    12b6:	8e 8f       	std	Y+30, r24	; 0x1e
    12b8:	3f c0       	rjmp	.+126    	; 0x1338 <ds1302_write+0x18c>
	else if (__tmp > 65535)
    12ba:	68 a1       	ldd	r22, Y+32	; 0x20
    12bc:	79 a1       	ldd	r23, Y+33	; 0x21
    12be:	8a a1       	ldd	r24, Y+34	; 0x22
    12c0:	9b a1       	ldd	r25, Y+35	; 0x23
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	3f ef       	ldi	r19, 0xFF	; 255
    12c6:	4f e7       	ldi	r20, 0x7F	; 127
    12c8:	57 e4       	ldi	r21, 0x47	; 71
    12ca:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    12ce:	18 16       	cp	r1, r24
    12d0:	4c f5       	brge	.+82     	; 0x1324 <ds1302_write+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d2:	6c a1       	ldd	r22, Y+36	; 0x24
    12d4:	7d a1       	ldd	r23, Y+37	; 0x25
    12d6:	8e a1       	ldd	r24, Y+38	; 0x26
    12d8:	9f a1       	ldd	r25, Y+39	; 0x27
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e2       	ldi	r20, 0x20	; 32
    12e0:	51 e4       	ldi	r21, 0x41	; 65
    12e2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	bc 01       	movw	r22, r24
    12ec:	cd 01       	movw	r24, r26
    12ee:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9f 8f       	std	Y+31, r25	; 0x1f
    12f8:	8e 8f       	std	Y+30, r24	; 0x1e
    12fa:	0f c0       	rjmp	.+30     	; 0x131a <ds1302_write+0x16e>
    12fc:	80 e9       	ldi	r24, 0x90	; 144
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	9d 8f       	std	Y+29, r25	; 0x1d
    1302:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1304:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1306:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <ds1302_write+0x15c>
    130c:	9d 8f       	std	Y+29, r25	; 0x1d
    130e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1310:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1312:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	9f 8f       	std	Y+31, r25	; 0x1f
    1318:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	69 f7       	brne	.-38     	; 0x12fc <ds1302_write+0x150>
    1322:	24 c0       	rjmp	.+72     	; 0x136c <ds1302_write+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1324:	68 a1       	ldd	r22, Y+32	; 0x20
    1326:	79 a1       	ldd	r23, Y+33	; 0x21
    1328:	8a a1       	ldd	r24, Y+34	; 0x22
    132a:	9b a1       	ldd	r25, Y+35	; 0x23
    132c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	9f 8f       	std	Y+31, r25	; 0x1f
    1336:	8e 8f       	std	Y+30, r24	; 0x1e
    1338:	8e 8d       	ldd	r24, Y+30	; 0x1e
    133a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    133c:	9b 8f       	std	Y+27, r25	; 0x1b
    133e:	8a 8f       	std	Y+26, r24	; 0x1a
    1340:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1342:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <ds1302_write+0x198>
    1348:	9b 8f       	std	Y+27, r25	; 0x1b
    134a:	8a 8f       	std	Y+26, r24	; 0x1a
    134c:	0f c0       	rjmp	.+30     	; 0x136c <ds1302_write+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    134e:	69 a5       	ldd	r22, Y+41	; 0x29
    1350:	7a a5       	ldd	r23, Y+42	; 0x2a
    1352:	8b a5       	ldd	r24, Y+43	; 0x2b
    1354:	9c a5       	ldd	r25, Y+44	; 0x2c
    1356:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	88 a7       	std	Y+40, r24	; 0x28
    1360:	88 a5       	ldd	r24, Y+40	; 0x28
    1362:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1364:	89 8d       	ldd	r24, Y+25	; 0x19
    1366:	8a 95       	dec	r24
    1368:	f1 f7       	brne	.-4      	; 0x1366 <ds1302_write+0x1ba>
    136a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DS1302_RST_0;
    136c:	a5 e2       	ldi	r26, 0x25	; 37
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e5 e2       	ldi	r30, 0x25	; 37
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8c 93       	st	X, r24
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e2       	ldi	r26, 0x20	; 32
    137e:	b1 e4       	ldi	r27, 0x41	; 65
    1380:	8d 8b       	std	Y+21, r24	; 0x15
    1382:	9e 8b       	std	Y+22, r25	; 0x16
    1384:	af 8b       	std	Y+23, r26	; 0x17
    1386:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1388:	6d 89       	ldd	r22, Y+21	; 0x15
    138a:	7e 89       	ldd	r23, Y+22	; 0x16
    138c:	8f 89       	ldd	r24, Y+23	; 0x17
    138e:	98 8d       	ldd	r25, Y+24	; 0x18
    1390:	2b ea       	ldi	r18, 0xAB	; 171
    1392:	3a ea       	ldi	r19, 0xAA	; 170
    1394:	4a ea       	ldi	r20, 0xAA	; 170
    1396:	50 e4       	ldi	r21, 0x40	; 64
    1398:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	89 8b       	std	Y+17, r24	; 0x11
    13a2:	9a 8b       	std	Y+18, r25	; 0x12
    13a4:	ab 8b       	std	Y+19, r26	; 0x13
    13a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    13a8:	69 89       	ldd	r22, Y+17	; 0x11
    13aa:	7a 89       	ldd	r23, Y+18	; 0x12
    13ac:	8b 89       	ldd	r24, Y+19	; 0x13
    13ae:	9c 89       	ldd	r25, Y+20	; 0x14
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e8       	ldi	r20, 0x80	; 128
    13b6:	5f e3       	ldi	r21, 0x3F	; 63
    13b8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    13bc:	88 23       	and	r24, r24
    13be:	1c f4       	brge	.+6      	; 0x13c6 <ds1302_write+0x21a>
		__ticks = 1;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	88 8b       	std	Y+16, r24	; 0x10
    13c4:	91 c0       	rjmp	.+290    	; 0x14e8 <ds1302_write+0x33c>
	else if (__tmp > 255)
    13c6:	69 89       	ldd	r22, Y+17	; 0x11
    13c8:	7a 89       	ldd	r23, Y+18	; 0x12
    13ca:	8b 89       	ldd	r24, Y+19	; 0x13
    13cc:	9c 89       	ldd	r25, Y+20	; 0x14
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4f e7       	ldi	r20, 0x7F	; 127
    13d4:	53 e4       	ldi	r21, 0x43	; 67
    13d6:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    13da:	18 16       	cp	r1, r24
    13dc:	0c f0       	brlt	.+2      	; 0x13e0 <ds1302_write+0x234>
    13de:	7b c0       	rjmp	.+246    	; 0x14d6 <ds1302_write+0x32a>
	{
		_delay_ms(__us / 1000.0);
    13e0:	6d 89       	ldd	r22, Y+21	; 0x15
    13e2:	7e 89       	ldd	r23, Y+22	; 0x16
    13e4:	8f 89       	ldd	r24, Y+23	; 0x17
    13e6:	98 8d       	ldd	r25, Y+24	; 0x18
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	4a e7       	ldi	r20, 0x7A	; 122
    13ee:	54 e4       	ldi	r21, 0x44	; 68
    13f0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	8c 87       	std	Y+12, r24	; 0x0c
    13fa:	9d 87       	std	Y+13, r25	; 0x0d
    13fc:	ae 87       	std	Y+14, r26	; 0x0e
    13fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1400:	6c 85       	ldd	r22, Y+12	; 0x0c
    1402:	7d 85       	ldd	r23, Y+13	; 0x0d
    1404:	8e 85       	ldd	r24, Y+14	; 0x0e
    1406:	9f 85       	ldd	r25, Y+15	; 0x0f
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	4a e7       	ldi	r20, 0x7A	; 122
    140e:	55 e4       	ldi	r21, 0x45	; 69
    1410:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	88 87       	std	Y+8, r24	; 0x08
    141a:	99 87       	std	Y+9, r25	; 0x09
    141c:	aa 87       	std	Y+10, r26	; 0x0a
    141e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1420:	68 85       	ldd	r22, Y+8	; 0x08
    1422:	79 85       	ldd	r23, Y+9	; 0x09
    1424:	8a 85       	ldd	r24, Y+10	; 0x0a
    1426:	9b 85       	ldd	r25, Y+11	; 0x0b
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e8       	ldi	r20, 0x80	; 128
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1434:	88 23       	and	r24, r24
    1436:	2c f4       	brge	.+10     	; 0x1442 <ds1302_write+0x296>
		__ticks = 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9f 83       	std	Y+7, r25	; 0x07
    143e:	8e 83       	std	Y+6, r24	; 0x06
    1440:	3f c0       	rjmp	.+126    	; 0x14c0 <ds1302_write+0x314>
	else if (__tmp > 65535)
    1442:	68 85       	ldd	r22, Y+8	; 0x08
    1444:	79 85       	ldd	r23, Y+9	; 0x09
    1446:	8a 85       	ldd	r24, Y+10	; 0x0a
    1448:	9b 85       	ldd	r25, Y+11	; 0x0b
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	4f e7       	ldi	r20, 0x7F	; 127
    1450:	57 e4       	ldi	r21, 0x47	; 71
    1452:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1456:	18 16       	cp	r1, r24
    1458:	4c f5       	brge	.+82     	; 0x14ac <ds1302_write+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145a:	6c 85       	ldd	r22, Y+12	; 0x0c
    145c:	7d 85       	ldd	r23, Y+13	; 0x0d
    145e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1460:	9f 85       	ldd	r25, Y+15	; 0x0f
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e2       	ldi	r20, 0x20	; 32
    1468:	51 e4       	ldi	r21, 0x41	; 65
    146a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9f 83       	std	Y+7, r25	; 0x07
    1480:	8e 83       	std	Y+6, r24	; 0x06
    1482:	0f c0       	rjmp	.+30     	; 0x14a2 <ds1302_write+0x2f6>
    1484:	80 e9       	ldi	r24, 0x90	; 144
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	9d 83       	std	Y+5, r25	; 0x05
    148a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <ds1302_write+0x2e4>
    1494:	9d 83       	std	Y+5, r25	; 0x05
    1496:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1498:	8e 81       	ldd	r24, Y+6	; 0x06
    149a:	9f 81       	ldd	r25, Y+7	; 0x07
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	9f 83       	std	Y+7, r25	; 0x07
    14a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a2:	8e 81       	ldd	r24, Y+6	; 0x06
    14a4:	9f 81       	ldd	r25, Y+7	; 0x07
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	69 f7       	brne	.-38     	; 0x1484 <ds1302_write+0x2d8>
    14aa:	24 c0       	rjmp	.+72     	; 0x14f4 <ds1302_write+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ac:	68 85       	ldd	r22, Y+8	; 0x08
    14ae:	79 85       	ldd	r23, Y+9	; 0x09
    14b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14b4:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	9f 83       	std	Y+7, r25	; 0x07
    14be:	8e 83       	std	Y+6, r24	; 0x06
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	9f 81       	ldd	r25, Y+7	; 0x07
    14c4:	9b 83       	std	Y+3, r25	; 0x03
    14c6:	8a 83       	std	Y+2, r24	; 0x02
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	9b 81       	ldd	r25, Y+3	; 0x03
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <ds1302_write+0x320>
    14d0:	9b 83       	std	Y+3, r25	; 0x03
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <ds1302_write+0x348>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14d6:	69 89       	ldd	r22, Y+17	; 0x11
    14d8:	7a 89       	ldd	r23, Y+18	; 0x12
    14da:	8b 89       	ldd	r24, Y+19	; 0x13
    14dc:	9c 89       	ldd	r25, Y+20	; 0x14
    14de:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	88 8b       	std	Y+16, r24	; 0x10
    14e8:	88 89       	ldd	r24, Y+16	; 0x10
    14ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	8a 95       	dec	r24
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <ds1302_write+0x342>
    14f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    14f4:	e2 96       	adiw	r28, 0x32	; 50
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <ds1302_read>:

unsigned char ds1302_read(unsigned char reg) {
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	e2 97       	sbiw	r28, 0x32	; 50
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	8a ab       	std	Y+50, r24	; 0x32
	unsigned char data;
	DS1302_IO_DIR_OUT;
    151c:	a4 e2       	ldi	r26, 0x24	; 36
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e2       	ldi	r30, 0x24	; 36
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	82 60       	ori	r24, 0x02	; 2
    1528:	8c 93       	st	X, r24
	ds1302_reset();
    152a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ds1302_reset>
	ds1302_write_byte(reg);
    152e:	8a a9       	ldd	r24, Y+50	; 0x32
    1530:	0e 94 62 03 	call	0x6c4	; 0x6c4 <ds1302_write_byte>
	DS1302_IO_DIR_IN;
    1534:	a4 e2       	ldi	r26, 0x24	; 36
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e4 e2       	ldi	r30, 0x24	; 36
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8d 7f       	andi	r24, 0xFD	; 253
    1540:	8c 93       	st	X, r24
	data = ds1302_read_byte();
    1542:	0e 94 1d 06 	call	0xc3a	; 0xc3a <ds1302_read_byte>
    1546:	89 ab       	std	Y+49, r24	; 0x31
	DS1302_CLK_0;
    1548:	a5 e2       	ldi	r26, 0x25	; 37
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e2       	ldi	r30, 0x25	; 37
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8e 7f       	andi	r24, 0xFE	; 254
    1554:	8c 93       	st	X, r24
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a0 e2       	ldi	r26, 0x20	; 32
    155c:	b1 e4       	ldi	r27, 0x41	; 65
    155e:	8d a7       	std	Y+45, r24	; 0x2d
    1560:	9e a7       	std	Y+46, r25	; 0x2e
    1562:	af a7       	std	Y+47, r26	; 0x2f
    1564:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1566:	6d a5       	ldd	r22, Y+45	; 0x2d
    1568:	7e a5       	ldd	r23, Y+46	; 0x2e
    156a:	8f a5       	ldd	r24, Y+47	; 0x2f
    156c:	98 a9       	ldd	r25, Y+48	; 0x30
    156e:	2b ea       	ldi	r18, 0xAB	; 171
    1570:	3a ea       	ldi	r19, 0xAA	; 170
    1572:	4a ea       	ldi	r20, 0xAA	; 170
    1574:	50 e4       	ldi	r21, 0x40	; 64
    1576:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	89 a7       	std	Y+41, r24	; 0x29
    1580:	9a a7       	std	Y+42, r25	; 0x2a
    1582:	ab a7       	std	Y+43, r26	; 0x2b
    1584:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1586:	69 a5       	ldd	r22, Y+41	; 0x29
    1588:	7a a5       	ldd	r23, Y+42	; 0x2a
    158a:	8b a5       	ldd	r24, Y+43	; 0x2b
    158c:	9c a5       	ldd	r25, Y+44	; 0x2c
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e8       	ldi	r20, 0x80	; 128
    1594:	5f e3       	ldi	r21, 0x3F	; 63
    1596:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    159a:	88 23       	and	r24, r24
    159c:	1c f4       	brge	.+6      	; 0x15a4 <ds1302_read+0x9e>
		__ticks = 1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	88 a7       	std	Y+40, r24	; 0x28
    15a2:	91 c0       	rjmp	.+290    	; 0x16c6 <ds1302_read+0x1c0>
	else if (__tmp > 255)
    15a4:	69 a5       	ldd	r22, Y+41	; 0x29
    15a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    15a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    15aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	53 e4       	ldi	r21, 0x43	; 67
    15b4:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	0c f0       	brlt	.+2      	; 0x15be <ds1302_read+0xb8>
    15bc:	7b c0       	rjmp	.+246    	; 0x16b4 <ds1302_read+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    15be:	6d a5       	ldd	r22, Y+45	; 0x2d
    15c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    15c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c4:	98 a9       	ldd	r25, Y+48	; 0x30
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	4a e7       	ldi	r20, 0x7A	; 122
    15cc:	54 e4       	ldi	r21, 0x44	; 68
    15ce:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	8c a3       	std	Y+36, r24	; 0x24
    15d8:	9d a3       	std	Y+37, r25	; 0x25
    15da:	ae a3       	std	Y+38, r26	; 0x26
    15dc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15de:	6c a1       	ldd	r22, Y+36	; 0x24
    15e0:	7d a1       	ldd	r23, Y+37	; 0x25
    15e2:	8e a1       	ldd	r24, Y+38	; 0x26
    15e4:	9f a1       	ldd	r25, Y+39	; 0x27
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a e7       	ldi	r20, 0x7A	; 122
    15ec:	55 e4       	ldi	r21, 0x45	; 69
    15ee:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	88 a3       	std	Y+32, r24	; 0x20
    15f8:	99 a3       	std	Y+33, r25	; 0x21
    15fa:	aa a3       	std	Y+34, r26	; 0x22
    15fc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    15fe:	68 a1       	ldd	r22, Y+32	; 0x20
    1600:	79 a1       	ldd	r23, Y+33	; 0x21
    1602:	8a a1       	ldd	r24, Y+34	; 0x22
    1604:	9b a1       	ldd	r25, Y+35	; 0x23
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e8       	ldi	r20, 0x80	; 128
    160c:	5f e3       	ldi	r21, 0x3F	; 63
    160e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1612:	88 23       	and	r24, r24
    1614:	2c f4       	brge	.+10     	; 0x1620 <ds1302_read+0x11a>
		__ticks = 1;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9f 8f       	std	Y+31, r25	; 0x1f
    161c:	8e 8f       	std	Y+30, r24	; 0x1e
    161e:	3f c0       	rjmp	.+126    	; 0x169e <ds1302_read+0x198>
	else if (__tmp > 65535)
    1620:	68 a1       	ldd	r22, Y+32	; 0x20
    1622:	79 a1       	ldd	r23, Y+33	; 0x21
    1624:	8a a1       	ldd	r24, Y+34	; 0x22
    1626:	9b a1       	ldd	r25, Y+35	; 0x23
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	3f ef       	ldi	r19, 0xFF	; 255
    162c:	4f e7       	ldi	r20, 0x7F	; 127
    162e:	57 e4       	ldi	r21, 0x47	; 71
    1630:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1634:	18 16       	cp	r1, r24
    1636:	4c f5       	brge	.+82     	; 0x168a <ds1302_read+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1638:	6c a1       	ldd	r22, Y+36	; 0x24
    163a:	7d a1       	ldd	r23, Y+37	; 0x25
    163c:	8e a1       	ldd	r24, Y+38	; 0x26
    163e:	9f a1       	ldd	r25, Y+39	; 0x27
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9f 8f       	std	Y+31, r25	; 0x1f
    165e:	8e 8f       	std	Y+30, r24	; 0x1e
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <ds1302_read+0x17a>
    1662:	80 e9       	ldi	r24, 0x90	; 144
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	9d 8f       	std	Y+29, r25	; 0x1d
    1668:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    166a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    166c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <ds1302_read+0x168>
    1672:	9d 8f       	std	Y+29, r25	; 0x1d
    1674:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1678:	9f 8d       	ldd	r25, Y+31	; 0x1f
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	9f 8f       	std	Y+31, r25	; 0x1f
    167e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1682:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	69 f7       	brne	.-38     	; 0x1662 <ds1302_read+0x15c>
    1688:	24 c0       	rjmp	.+72     	; 0x16d2 <ds1302_read+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168a:	68 a1       	ldd	r22, Y+32	; 0x20
    168c:	79 a1       	ldd	r23, Y+33	; 0x21
    168e:	8a a1       	ldd	r24, Y+34	; 0x22
    1690:	9b a1       	ldd	r25, Y+35	; 0x23
    1692:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9f 8f       	std	Y+31, r25	; 0x1f
    169c:	8e 8f       	std	Y+30, r24	; 0x1e
    169e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16a2:	9b 8f       	std	Y+27, r25	; 0x1b
    16a4:	8a 8f       	std	Y+26, r24	; 0x1a
    16a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <ds1302_read+0x1a4>
    16ae:	9b 8f       	std	Y+27, r25	; 0x1b
    16b0:	8a 8f       	std	Y+26, r24	; 0x1a
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <ds1302_read+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16b4:	69 a5       	ldd	r22, Y+41	; 0x29
    16b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    16b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    16bc:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	88 a7       	std	Y+40, r24	; 0x28
    16c6:	88 a5       	ldd	r24, Y+40	; 0x28
    16c8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16ca:	89 8d       	ldd	r24, Y+25	; 0x19
    16cc:	8a 95       	dec	r24
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <ds1302_read+0x1c6>
    16d0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DS1302_RST_0;
    16d2:	a5 e2       	ldi	r26, 0x25	; 37
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e2       	ldi	r30, 0x25	; 37
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8c 93       	st	X, r24
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e2       	ldi	r26, 0x20	; 32
    16e4:	b1 e4       	ldi	r27, 0x41	; 65
    16e6:	8d 8b       	std	Y+21, r24	; 0x15
    16e8:	9e 8b       	std	Y+22, r25	; 0x16
    16ea:	af 8b       	std	Y+23, r26	; 0x17
    16ec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16ee:	6d 89       	ldd	r22, Y+21	; 0x15
    16f0:	7e 89       	ldd	r23, Y+22	; 0x16
    16f2:	8f 89       	ldd	r24, Y+23	; 0x17
    16f4:	98 8d       	ldd	r25, Y+24	; 0x18
    16f6:	2b ea       	ldi	r18, 0xAB	; 171
    16f8:	3a ea       	ldi	r19, 0xAA	; 170
    16fa:	4a ea       	ldi	r20, 0xAA	; 170
    16fc:	50 e4       	ldi	r21, 0x40	; 64
    16fe:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	89 8b       	std	Y+17, r24	; 0x11
    1708:	9a 8b       	std	Y+18, r25	; 0x12
    170a:	ab 8b       	std	Y+19, r26	; 0x13
    170c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    170e:	69 89       	ldd	r22, Y+17	; 0x11
    1710:	7a 89       	ldd	r23, Y+18	; 0x12
    1712:	8b 89       	ldd	r24, Y+19	; 0x13
    1714:	9c 89       	ldd	r25, Y+20	; 0x14
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e8       	ldi	r20, 0x80	; 128
    171c:	5f e3       	ldi	r21, 0x3F	; 63
    171e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1722:	88 23       	and	r24, r24
    1724:	1c f4       	brge	.+6      	; 0x172c <ds1302_read+0x226>
		__ticks = 1;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	88 8b       	std	Y+16, r24	; 0x10
    172a:	91 c0       	rjmp	.+290    	; 0x184e <ds1302_read+0x348>
	else if (__tmp > 255)
    172c:	69 89       	ldd	r22, Y+17	; 0x11
    172e:	7a 89       	ldd	r23, Y+18	; 0x12
    1730:	8b 89       	ldd	r24, Y+19	; 0x13
    1732:	9c 89       	ldd	r25, Y+20	; 0x14
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	53 e4       	ldi	r21, 0x43	; 67
    173c:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	0c f0       	brlt	.+2      	; 0x1746 <ds1302_read+0x240>
    1744:	7b c0       	rjmp	.+246    	; 0x183c <ds1302_read+0x336>
	{
		_delay_ms(__us / 1000.0);
    1746:	6d 89       	ldd	r22, Y+21	; 0x15
    1748:	7e 89       	ldd	r23, Y+22	; 0x16
    174a:	8f 89       	ldd	r24, Y+23	; 0x17
    174c:	98 8d       	ldd	r25, Y+24	; 0x18
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	4a e7       	ldi	r20, 0x7A	; 122
    1754:	54 e4       	ldi	r21, 0x44	; 68
    1756:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	8c 87       	std	Y+12, r24	; 0x0c
    1760:	9d 87       	std	Y+13, r25	; 0x0d
    1762:	ae 87       	std	Y+14, r26	; 0x0e
    1764:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1766:	6c 85       	ldd	r22, Y+12	; 0x0c
    1768:	7d 85       	ldd	r23, Y+13	; 0x0d
    176a:	8e 85       	ldd	r24, Y+14	; 0x0e
    176c:	9f 85       	ldd	r25, Y+15	; 0x0f
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a e7       	ldi	r20, 0x7A	; 122
    1774:	55 e4       	ldi	r21, 0x45	; 69
    1776:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	88 87       	std	Y+8, r24	; 0x08
    1780:	99 87       	std	Y+9, r25	; 0x09
    1782:	aa 87       	std	Y+10, r26	; 0x0a
    1784:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1786:	68 85       	ldd	r22, Y+8	; 0x08
    1788:	79 85       	ldd	r23, Y+9	; 0x09
    178a:	8a 85       	ldd	r24, Y+10	; 0x0a
    178c:	9b 85       	ldd	r25, Y+11	; 0x0b
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e8       	ldi	r20, 0x80	; 128
    1794:	5f e3       	ldi	r21, 0x3F	; 63
    1796:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    179a:	88 23       	and	r24, r24
    179c:	2c f4       	brge	.+10     	; 0x17a8 <ds1302_read+0x2a2>
		__ticks = 1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9f 83       	std	Y+7, r25	; 0x07
    17a4:	8e 83       	std	Y+6, r24	; 0x06
    17a6:	3f c0       	rjmp	.+126    	; 0x1826 <ds1302_read+0x320>
	else if (__tmp > 65535)
    17a8:	68 85       	ldd	r22, Y+8	; 0x08
    17aa:	79 85       	ldd	r23, Y+9	; 0x09
    17ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	4f e7       	ldi	r20, 0x7F	; 127
    17b6:	57 e4       	ldi	r21, 0x47	; 71
    17b8:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    17bc:	18 16       	cp	r1, r24
    17be:	4c f5       	brge	.+82     	; 0x1812 <ds1302_read+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    17c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    17c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    17c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	9f 83       	std	Y+7, r25	; 0x07
    17e6:	8e 83       	std	Y+6, r24	; 0x06
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <ds1302_read+0x302>
    17ea:	80 e9       	ldi	r24, 0x90	; 144
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	9d 83       	std	Y+5, r25	; 0x05
    17f0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	9d 81       	ldd	r25, Y+5	; 0x05
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <ds1302_read+0x2f0>
    17fa:	9d 83       	std	Y+5, r25	; 0x05
    17fc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1800:	9f 81       	ldd	r25, Y+7	; 0x07
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	9f 83       	std	Y+7, r25	; 0x07
    1806:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1808:	8e 81       	ldd	r24, Y+6	; 0x06
    180a:	9f 81       	ldd	r25, Y+7	; 0x07
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	69 f7       	brne	.-38     	; 0x17ea <ds1302_read+0x2e4>
    1810:	24 c0       	rjmp	.+72     	; 0x185a <ds1302_read+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1812:	68 85       	ldd	r22, Y+8	; 0x08
    1814:	79 85       	ldd	r23, Y+9	; 0x09
    1816:	8a 85       	ldd	r24, Y+10	; 0x0a
    1818:	9b 85       	ldd	r25, Y+11	; 0x0b
    181a:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9f 83       	std	Y+7, r25	; 0x07
    1824:	8e 83       	std	Y+6, r24	; 0x06
    1826:	8e 81       	ldd	r24, Y+6	; 0x06
    1828:	9f 81       	ldd	r25, Y+7	; 0x07
    182a:	9b 83       	std	Y+3, r25	; 0x03
    182c:	8a 83       	std	Y+2, r24	; 0x02
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	9b 81       	ldd	r25, Y+3	; 0x03
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <ds1302_read+0x32c>
    1836:	9b 83       	std	Y+3, r25	; 0x03
    1838:	8a 83       	std	Y+2, r24	; 0x02
    183a:	0f c0       	rjmp	.+30     	; 0x185a <ds1302_read+0x354>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    183c:	69 89       	ldd	r22, Y+17	; 0x11
    183e:	7a 89       	ldd	r23, Y+18	; 0x12
    1840:	8b 89       	ldd	r24, Y+19	; 0x13
    1842:	9c 89       	ldd	r25, Y+20	; 0x14
    1844:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	88 8b       	std	Y+16, r24	; 0x10
    184e:	88 89       	ldd	r24, Y+16	; 0x10
    1850:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	8a 95       	dec	r24
    1856:	f1 f7       	brne	.-4      	; 0x1854 <ds1302_read+0x34e>
    1858:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);

	return data;
    185a:	89 a9       	ldd	r24, Y+49	; 0x31

}
    185c:	e2 96       	adiw	r28, 0x32	; 50
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <gettime>:

void gettime(unsigned char *nowtime) {
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	e3 97       	sbiw	r28, 0x33	; 51
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	9b ab       	std	Y+51, r25	; 0x33
    1888:	8a ab       	std	Y+50, r24	; 0x32
	unsigned char i;
	DS1302_IO_DIR_OUT;
    188a:	a4 e2       	ldi	r26, 0x24	; 36
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e4 e2       	ldi	r30, 0x24	; 36
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	82 60       	ori	r24, 0x02	; 2
    1896:	8c 93       	st	X, r24
	ds1302_reset();
    1898:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ds1302_reset>
	ds1302_write_byte(0xbf);
    189c:	8f eb       	ldi	r24, 0xBF	; 191
    189e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <ds1302_write_byte>
	DS1302_IO_DIR_IN;
    18a2:	a4 e2       	ldi	r26, 0x24	; 36
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e4 e2       	ldi	r30, 0x24	; 36
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8d 7f       	andi	r24, 0xFD	; 253
    18ae:	8c 93       	st	X, r24
	for (i = 0; i < 7; i++) {
    18b0:	19 aa       	std	Y+49, r1	; 0x31
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <gettime+0x64>
		nowtime[i] = ds1302_read_byte();
    18b4:	89 a9       	ldd	r24, Y+49	; 0x31
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	8a a9       	ldd	r24, Y+50	; 0x32
    18bc:	9b a9       	ldd	r25, Y+51	; 0x33
    18be:	8c 01       	movw	r16, r24
    18c0:	02 0f       	add	r16, r18
    18c2:	13 1f       	adc	r17, r19
    18c4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <ds1302_read_byte>
    18c8:	f8 01       	movw	r30, r16
    18ca:	80 83       	st	Z, r24
	unsigned char i;
	DS1302_IO_DIR_OUT;
	ds1302_reset();
	ds1302_write_byte(0xbf);
	DS1302_IO_DIR_IN;
	for (i = 0; i < 7; i++) {
    18cc:	89 a9       	ldd	r24, Y+49	; 0x31
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	89 ab       	std	Y+49, r24	; 0x31
    18d2:	89 a9       	ldd	r24, Y+49	; 0x31
    18d4:	87 30       	cpi	r24, 0x07	; 7
    18d6:	70 f3       	brcs	.-36     	; 0x18b4 <gettime+0x46>
		nowtime[i] = ds1302_read_byte();
	}
	DS1302_CLK_0;
    18d8:	a5 e2       	ldi	r26, 0x25	; 37
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e5 e2       	ldi	r30, 0x25	; 37
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8e 7f       	andi	r24, 0xFE	; 254
    18e4:	8c 93       	st	X, r24
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 e2       	ldi	r26, 0x20	; 32
    18ec:	b1 e4       	ldi	r27, 0x41	; 65
    18ee:	8d a7       	std	Y+45, r24	; 0x2d
    18f0:	9e a7       	std	Y+46, r25	; 0x2e
    18f2:	af a7       	std	Y+47, r26	; 0x2f
    18f4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    18f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    18fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18fc:	98 a9       	ldd	r25, Y+48	; 0x30
    18fe:	2b ea       	ldi	r18, 0xAB	; 171
    1900:	3a ea       	ldi	r19, 0xAA	; 170
    1902:	4a ea       	ldi	r20, 0xAA	; 170
    1904:	50 e4       	ldi	r21, 0x40	; 64
    1906:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	89 a7       	std	Y+41, r24	; 0x29
    1910:	9a a7       	std	Y+42, r25	; 0x2a
    1912:	ab a7       	std	Y+43, r26	; 0x2b
    1914:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1916:	69 a5       	ldd	r22, Y+41	; 0x29
    1918:	7a a5       	ldd	r23, Y+42	; 0x2a
    191a:	8b a5       	ldd	r24, Y+43	; 0x2b
    191c:	9c a5       	ldd	r25, Y+44	; 0x2c
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	1c f4       	brge	.+6      	; 0x1934 <gettime+0xc6>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	88 a7       	std	Y+40, r24	; 0x28
    1932:	91 c0       	rjmp	.+290    	; 0x1a56 <gettime+0x1e8>
	else if (__tmp > 255)
    1934:	69 a5       	ldd	r22, Y+41	; 0x29
    1936:	7a a5       	ldd	r23, Y+42	; 0x2a
    1938:	8b a5       	ldd	r24, Y+43	; 0x2b
    193a:	9c a5       	ldd	r25, Y+44	; 0x2c
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	53 e4       	ldi	r21, 0x43	; 67
    1944:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	0c f0       	brlt	.+2      	; 0x194e <gettime+0xe0>
    194c:	7b c0       	rjmp	.+246    	; 0x1a44 <gettime+0x1d6>
	{
		_delay_ms(__us / 1000.0);
    194e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1950:	7e a5       	ldd	r23, Y+46	; 0x2e
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a e7       	ldi	r20, 0x7A	; 122
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8c a3       	std	Y+36, r24	; 0x24
    1968:	9d a3       	std	Y+37, r25	; 0x25
    196a:	ae a3       	std	Y+38, r26	; 0x26
    196c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196e:	6c a1       	ldd	r22, Y+36	; 0x24
    1970:	7d a1       	ldd	r23, Y+37	; 0x25
    1972:	8e a1       	ldd	r24, Y+38	; 0x26
    1974:	9f a1       	ldd	r25, Y+39	; 0x27
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4a e7       	ldi	r20, 0x7A	; 122
    197c:	55 e4       	ldi	r21, 0x45	; 69
    197e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	88 a3       	std	Y+32, r24	; 0x20
    1988:	99 a3       	std	Y+33, r25	; 0x21
    198a:	aa a3       	std	Y+34, r26	; 0x22
    198c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    198e:	68 a1       	ldd	r22, Y+32	; 0x20
    1990:	79 a1       	ldd	r23, Y+33	; 0x21
    1992:	8a a1       	ldd	r24, Y+34	; 0x22
    1994:	9b a1       	ldd	r25, Y+35	; 0x23
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <gettime+0x142>
		__ticks = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9f 8f       	std	Y+31, r25	; 0x1f
    19ac:	8e 8f       	std	Y+30, r24	; 0x1e
    19ae:	3f c0       	rjmp	.+126    	; 0x1a2e <gettime+0x1c0>
	else if (__tmp > 65535)
    19b0:	68 a1       	ldd	r22, Y+32	; 0x20
    19b2:	79 a1       	ldd	r23, Y+33	; 0x21
    19b4:	8a a1       	ldd	r24, Y+34	; 0x22
    19b6:	9b a1       	ldd	r25, Y+35	; 0x23
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	57 e4       	ldi	r21, 0x47	; 71
    19c0:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    19c4:	18 16       	cp	r1, r24
    19c6:	4c f5       	brge	.+82     	; 0x1a1a <gettime+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c8:	6c a1       	ldd	r22, Y+36	; 0x24
    19ca:	7d a1       	ldd	r23, Y+37	; 0x25
    19cc:	8e a1       	ldd	r24, Y+38	; 0x26
    19ce:	9f a1       	ldd	r25, Y+39	; 0x27
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e2       	ldi	r20, 0x20	; 32
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9f 8f       	std	Y+31, r25	; 0x1f
    19ee:	8e 8f       	std	Y+30, r24	; 0x1e
    19f0:	0f c0       	rjmp	.+30     	; 0x1a10 <gettime+0x1a2>
    19f2:	80 e9       	ldi	r24, 0x90	; 144
    19f4:	91 e0       	ldi	r25, 0x01	; 1
    19f6:	9d 8f       	std	Y+29, r25	; 0x1d
    19f8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <gettime+0x190>
    1a02:	9d 8f       	std	Y+29, r25	; 0x1d
    1a04:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a08:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a0e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a12:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	69 f7       	brne	.-38     	; 0x19f2 <gettime+0x184>
    1a18:	24 c0       	rjmp	.+72     	; 0x1a62 <gettime+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1a:	68 a1       	ldd	r22, Y+32	; 0x20
    1a1c:	79 a1       	ldd	r23, Y+33	; 0x21
    1a1e:	8a a1       	ldd	r24, Y+34	; 0x22
    1a20:	9b a1       	ldd	r25, Y+35	; 0x23
    1a22:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9f 8f       	std	Y+31, r25	; 0x1f
    1a2c:	8e 8f       	std	Y+30, r24	; 0x1e
    1a2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a30:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a32:	9b 8f       	std	Y+27, r25	; 0x1b
    1a34:	8a 8f       	std	Y+26, r24	; 0x1a
    1a36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <gettime+0x1cc>
    1a3e:	9b 8f       	std	Y+27, r25	; 0x1b
    1a40:	8a 8f       	std	Y+26, r24	; 0x1a
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <gettime+0x1f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a44:	69 a5       	ldd	r22, Y+41	; 0x29
    1a46:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a4c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	88 a7       	std	Y+40, r24	; 0x28
    1a56:	88 a5       	ldd	r24, Y+40	; 0x28
    1a58:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a5a:	89 8d       	ldd	r24, Y+25	; 0x19
    1a5c:	8a 95       	dec	r24
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <gettime+0x1ee>
    1a60:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DS1302_RST_0;
    1a62:	a5 e2       	ldi	r26, 0x25	; 37
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e5 e2       	ldi	r30, 0x25	; 37
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8c 93       	st	X, r24
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e2       	ldi	r26, 0x20	; 32
    1a74:	b1 e4       	ldi	r27, 0x41	; 65
    1a76:	8d 8b       	std	Y+21, r24	; 0x15
    1a78:	9e 8b       	std	Y+22, r25	; 0x16
    1a7a:	af 8b       	std	Y+23, r26	; 0x17
    1a7c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a80:	7e 89       	ldd	r23, Y+22	; 0x16
    1a82:	8f 89       	ldd	r24, Y+23	; 0x17
    1a84:	98 8d       	ldd	r25, Y+24	; 0x18
    1a86:	2b ea       	ldi	r18, 0xAB	; 171
    1a88:	3a ea       	ldi	r19, 0xAA	; 170
    1a8a:	4a ea       	ldi	r20, 0xAA	; 170
    1a8c:	50 e4       	ldi	r21, 0x40	; 64
    1a8e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	89 8b       	std	Y+17, r24	; 0x11
    1a98:	9a 8b       	std	Y+18, r25	; 0x12
    1a9a:	ab 8b       	std	Y+19, r26	; 0x13
    1a9c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a9e:	69 89       	ldd	r22, Y+17	; 0x11
    1aa0:	7a 89       	ldd	r23, Y+18	; 0x12
    1aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	1c f4       	brge	.+6      	; 0x1abc <gettime+0x24e>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	88 8b       	std	Y+16, r24	; 0x10
    1aba:	91 c0       	rjmp	.+290    	; 0x1bde <gettime+0x370>
	else if (__tmp > 255)
    1abc:	69 89       	ldd	r22, Y+17	; 0x11
    1abe:	7a 89       	ldd	r23, Y+18	; 0x12
    1ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	53 e4       	ldi	r21, 0x43	; 67
    1acc:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	0c f0       	brlt	.+2      	; 0x1ad6 <gettime+0x268>
    1ad4:	7b c0       	rjmp	.+246    	; 0x1bcc <gettime+0x35e>
	{
		_delay_ms(__us / 1000.0);
    1ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ada:	8f 89       	ldd	r24, Y+23	; 0x17
    1adc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a e7       	ldi	r20, 0x7A	; 122
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8c 87       	std	Y+12, r24	; 0x0c
    1af0:	9d 87       	std	Y+13, r25	; 0x0d
    1af2:	ae 87       	std	Y+14, r26	; 0x0e
    1af4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1af8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1afa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1afc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a e7       	ldi	r20, 0x7A	; 122
    1b04:	55 e4       	ldi	r21, 0x45	; 69
    1b06:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	88 87       	std	Y+8, r24	; 0x08
    1b10:	99 87       	std	Y+9, r25	; 0x09
    1b12:	aa 87       	std	Y+10, r26	; 0x0a
    1b14:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b16:	68 85       	ldd	r22, Y+8	; 0x08
    1b18:	79 85       	ldd	r23, Y+9	; 0x09
    1b1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <gettime+0x2ca>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9f 83       	std	Y+7, r25	; 0x07
    1b34:	8e 83       	std	Y+6, r24	; 0x06
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <gettime+0x348>
	else if (__tmp > 65535)
    1b38:	68 85       	ldd	r22, Y+8	; 0x08
    1b3a:	79 85       	ldd	r23, Y+9	; 0x09
    1b3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <gettime+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b52:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b54:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b56:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9f 83       	std	Y+7, r25	; 0x07
    1b76:	8e 83       	std	Y+6, r24	; 0x06
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <gettime+0x32a>
    1b7a:	80 e9       	ldi	r24, 0x90	; 144
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	9d 83       	std	Y+5, r25	; 0x05
    1b80:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <gettime+0x318>
    1b8a:	9d 83       	std	Y+5, r25	; 0x05
    1b8c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b90:	9f 81       	ldd	r25, Y+7	; 0x07
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9f 83       	std	Y+7, r25	; 0x07
    1b96:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <gettime+0x30c>
    1ba0:	24 c0       	rjmp	.+72     	; 0x1bea <gettime+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	68 85       	ldd	r22, Y+8	; 0x08
    1ba4:	79 85       	ldd	r23, Y+9	; 0x09
    1ba6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ba8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1baa:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9f 83       	std	Y+7, r25	; 0x07
    1bb4:	8e 83       	std	Y+6, r24	; 0x06
    1bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bba:	9b 83       	std	Y+3, r25	; 0x03
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <gettime+0x354>
    1bc6:	9b 83       	std	Y+3, r25	; 0x03
    1bc8:	8a 83       	std	Y+2, r24	; 0x02
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <gettime+0x37c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bcc:	69 89       	ldd	r22, Y+17	; 0x11
    1bce:	7a 89       	ldd	r23, Y+18	; 0x12
    1bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd4:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	88 8b       	std	Y+16, r24	; 0x10
    1bde:	88 89       	ldd	r24, Y+16	; 0x10
    1be0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	8a 95       	dec	r24
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <gettime+0x376>
    1be8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);

}
    1bea:	e3 96       	adiw	r28, 0x33	; 51
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	08 95       	ret

00001c00 <settime>:

void settime(unsigned char *settime) {
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	e3 97       	sbiw	r28, 0x33	; 51
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	9b ab       	std	Y+51, r25	; 0x33
    1c16:	8a ab       	std	Y+50, r24	; 0x32
	unsigned char i;
	ds1302_write(0x8e, 0);
    1c18:	8e e8       	ldi	r24, 0x8E	; 142
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <ds1302_write>
	ds1302_reset();
    1c20:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ds1302_reset>
	ds1302_write_byte(0xbe);
    1c24:	8e eb       	ldi	r24, 0xBE	; 190
    1c26:	0e 94 62 03 	call	0x6c4	; 0x6c4 <ds1302_write_byte>
	for (i = 0; i < 7; i++) {
    1c2a:	19 aa       	std	Y+49, r1	; 0x31
    1c2c:	0e c0       	rjmp	.+28     	; 0x1c4a <settime+0x4a>
		ds1302_write_byte(settime[i]);
    1c2e:	89 a9       	ldd	r24, Y+49	; 0x31
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	8a a9       	ldd	r24, Y+50	; 0x32
    1c36:	9b a9       	ldd	r25, Y+51	; 0x33
    1c38:	fc 01       	movw	r30, r24
    1c3a:	e2 0f       	add	r30, r18
    1c3c:	f3 1f       	adc	r31, r19
    1c3e:	80 81       	ld	r24, Z
    1c40:	0e 94 62 03 	call	0x6c4	; 0x6c4 <ds1302_write_byte>
void settime(unsigned char *settime) {
	unsigned char i;
	ds1302_write(0x8e, 0);
	ds1302_reset();
	ds1302_write_byte(0xbe);
	for (i = 0; i < 7; i++) {
    1c44:	89 a9       	ldd	r24, Y+49	; 0x31
    1c46:	8f 5f       	subi	r24, 0xFF	; 255
    1c48:	89 ab       	std	Y+49, r24	; 0x31
    1c4a:	89 a9       	ldd	r24, Y+49	; 0x31
    1c4c:	87 30       	cpi	r24, 0x07	; 7
    1c4e:	78 f3       	brcs	.-34     	; 0x1c2e <settime+0x2e>
		ds1302_write_byte(settime[i]);

	}
	ds1302_write_byte(0);
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	0e 94 62 03 	call	0x6c4	; 0x6c4 <ds1302_write_byte>
	DS1302_CLK_0;
    1c56:	a5 e2       	ldi	r26, 0x25	; 37
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e5 e2       	ldi	r30, 0x25	; 37
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	8e 7f       	andi	r24, 0xFE	; 254
    1c62:	8c 93       	st	X, r24
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e2       	ldi	r26, 0x20	; 32
    1c6a:	b1 e4       	ldi	r27, 0x41	; 65
    1c6c:	8d a7       	std	Y+45, r24	; 0x2d
    1c6e:	9e a7       	std	Y+46, r25	; 0x2e
    1c70:	af a7       	std	Y+47, r26	; 0x2f
    1c72:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c74:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c76:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7c:	2b ea       	ldi	r18, 0xAB	; 171
    1c7e:	3a ea       	ldi	r19, 0xAA	; 170
    1c80:	4a ea       	ldi	r20, 0xAA	; 170
    1c82:	50 e4       	ldi	r21, 0x40	; 64
    1c84:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	89 a7       	std	Y+41, r24	; 0x29
    1c8e:	9a a7       	std	Y+42, r25	; 0x2a
    1c90:	ab a7       	std	Y+43, r26	; 0x2b
    1c92:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c94:	69 a5       	ldd	r22, Y+41	; 0x29
    1c96:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	1c f4       	brge	.+6      	; 0x1cb2 <settime+0xb2>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	88 a7       	std	Y+40, r24	; 0x28
    1cb0:	91 c0       	rjmp	.+290    	; 0x1dd4 <settime+0x1d4>
	else if (__tmp > 255)
    1cb2:	69 a5       	ldd	r22, Y+41	; 0x29
    1cb4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4f e7       	ldi	r20, 0x7F	; 127
    1cc0:	53 e4       	ldi	r21, 0x43	; 67
    1cc2:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1cc6:	18 16       	cp	r1, r24
    1cc8:	0c f0       	brlt	.+2      	; 0x1ccc <settime+0xcc>
    1cca:	7b c0       	rjmp	.+246    	; 0x1dc2 <settime+0x1c2>
	{
		_delay_ms(__us / 1000.0);
    1ccc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cce:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	4a e7       	ldi	r20, 0x7A	; 122
    1cda:	54 e4       	ldi	r21, 0x44	; 68
    1cdc:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8c a3       	std	Y+36, r24	; 0x24
    1ce6:	9d a3       	std	Y+37, r25	; 0x25
    1ce8:	ae a3       	std	Y+38, r26	; 0x26
    1cea:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cec:	6c a1       	ldd	r22, Y+36	; 0x24
    1cee:	7d a1       	ldd	r23, Y+37	; 0x25
    1cf0:	8e a1       	ldd	r24, Y+38	; 0x26
    1cf2:	9f a1       	ldd	r25, Y+39	; 0x27
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4a e7       	ldi	r20, 0x7A	; 122
    1cfa:	55 e4       	ldi	r21, 0x45	; 69
    1cfc:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	88 a3       	std	Y+32, r24	; 0x20
    1d06:	99 a3       	std	Y+33, r25	; 0x21
    1d08:	aa a3       	std	Y+34, r26	; 0x22
    1d0a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d0c:	68 a1       	ldd	r22, Y+32	; 0x20
    1d0e:	79 a1       	ldd	r23, Y+33	; 0x21
    1d10:	8a a1       	ldd	r24, Y+34	; 0x22
    1d12:	9b a1       	ldd	r25, Y+35	; 0x23
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e8       	ldi	r20, 0x80	; 128
    1d1a:	5f e3       	ldi	r21, 0x3F	; 63
    1d1c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1d20:	88 23       	and	r24, r24
    1d22:	2c f4       	brge	.+10     	; 0x1d2e <settime+0x12e>
		__ticks = 1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	9f 8f       	std	Y+31, r25	; 0x1f
    1d2a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d2c:	3f c0       	rjmp	.+126    	; 0x1dac <settime+0x1ac>
	else if (__tmp > 65535)
    1d2e:	68 a1       	ldd	r22, Y+32	; 0x20
    1d30:	79 a1       	ldd	r23, Y+33	; 0x21
    1d32:	8a a1       	ldd	r24, Y+34	; 0x22
    1d34:	9b a1       	ldd	r25, Y+35	; 0x23
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	3f ef       	ldi	r19, 0xFF	; 255
    1d3a:	4f e7       	ldi	r20, 0x7F	; 127
    1d3c:	57 e4       	ldi	r21, 0x47	; 71
    1d3e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1d42:	18 16       	cp	r1, r24
    1d44:	4c f5       	brge	.+82     	; 0x1d98 <settime+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d46:	6c a1       	ldd	r22, Y+36	; 0x24
    1d48:	7d a1       	ldd	r23, Y+37	; 0x25
    1d4a:	8e a1       	ldd	r24, Y+38	; 0x26
    1d4c:	9f a1       	ldd	r25, Y+39	; 0x27
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e2       	ldi	r20, 0x20	; 32
    1d54:	51 e4       	ldi	r21, 0x41	; 65
    1d56:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d6c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <settime+0x18e>
    1d70:	80 e9       	ldi	r24, 0x90	; 144
    1d72:	91 e0       	ldi	r25, 0x01	; 1
    1d74:	9d 8f       	std	Y+29, r25	; 0x1d
    1d76:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <settime+0x17c>
    1d80:	9d 8f       	std	Y+29, r25	; 0x1d
    1d82:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d8c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	69 f7       	brne	.-38     	; 0x1d70 <settime+0x170>
    1d96:	24 c0       	rjmp	.+72     	; 0x1de0 <settime+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d98:	68 a1       	ldd	r22, Y+32	; 0x20
    1d9a:	79 a1       	ldd	r23, Y+33	; 0x21
    1d9c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d9e:	9b a1       	ldd	r25, Y+35	; 0x23
    1da0:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	9f 8f       	std	Y+31, r25	; 0x1f
    1daa:	8e 8f       	std	Y+30, r24	; 0x1e
    1dac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1db0:	9b 8f       	std	Y+27, r25	; 0x1b
    1db2:	8a 8f       	std	Y+26, r24	; 0x1a
    1db4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1db6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <settime+0x1b8>
    1dbc:	9b 8f       	std	Y+27, r25	; 0x1b
    1dbe:	8a 8f       	std	Y+26, r24	; 0x1a
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <settime+0x1e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dc2:	69 a5       	ldd	r22, Y+41	; 0x29
    1dc4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1dc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dca:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	88 a7       	std	Y+40, r24	; 0x28
    1dd4:	88 a5       	ldd	r24, Y+40	; 0x28
    1dd6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd8:	89 8d       	ldd	r24, Y+25	; 0x19
    1dda:	8a 95       	dec	r24
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <settime+0x1da>
    1dde:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DS1302_RST_0;
    1de0:	a5 e2       	ldi	r26, 0x25	; 37
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e5 e2       	ldi	r30, 0x25	; 37
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8c 93       	st	X, r24
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a0 e2       	ldi	r26, 0x20	; 32
    1df2:	b1 e4       	ldi	r27, 0x41	; 65
    1df4:	8d 8b       	std	Y+21, r24	; 0x15
    1df6:	9e 8b       	std	Y+22, r25	; 0x16
    1df8:	af 8b       	std	Y+23, r26	; 0x17
    1dfa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1e00:	8f 89       	ldd	r24, Y+23	; 0x17
    1e02:	98 8d       	ldd	r25, Y+24	; 0x18
    1e04:	2b ea       	ldi	r18, 0xAB	; 171
    1e06:	3a ea       	ldi	r19, 0xAA	; 170
    1e08:	4a ea       	ldi	r20, 0xAA	; 170
    1e0a:	50 e4       	ldi	r21, 0x40	; 64
    1e0c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	89 8b       	std	Y+17, r24	; 0x11
    1e16:	9a 8b       	std	Y+18, r25	; 0x12
    1e18:	ab 8b       	std	Y+19, r26	; 0x13
    1e1a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e1c:	69 89       	ldd	r22, Y+17	; 0x11
    1e1e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e20:	8b 89       	ldd	r24, Y+19	; 0x13
    1e22:	9c 89       	ldd	r25, Y+20	; 0x14
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	1c f4       	brge	.+6      	; 0x1e3a <settime+0x23a>
		__ticks = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	88 8b       	std	Y+16, r24	; 0x10
    1e38:	91 c0       	rjmp	.+290    	; 0x1f5c <settime+0x35c>
	else if (__tmp > 255)
    1e3a:	69 89       	ldd	r22, Y+17	; 0x11
    1e3c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e40:	9c 89       	ldd	r25, Y+20	; 0x14
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	53 e4       	ldi	r21, 0x43	; 67
    1e4a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	0c f0       	brlt	.+2      	; 0x1e54 <settime+0x254>
    1e52:	7b c0       	rjmp	.+246    	; 0x1f4a <settime+0x34a>
	{
		_delay_ms(__us / 1000.0);
    1e54:	6d 89       	ldd	r22, Y+21	; 0x15
    1e56:	7e 89       	ldd	r23, Y+22	; 0x16
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a e7       	ldi	r20, 0x7A	; 122
    1e62:	54 e4       	ldi	r21, 0x44	; 68
    1e64:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__divsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	8c 87       	std	Y+12, r24	; 0x0c
    1e6e:	9d 87       	std	Y+13, r25	; 0x0d
    1e70:	ae 87       	std	Y+14, r26	; 0x0e
    1e72:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e76:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a e7       	ldi	r20, 0x7A	; 122
    1e82:	55 e4       	ldi	r21, 0x45	; 69
    1e84:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	88 87       	std	Y+8, r24	; 0x08
    1e8e:	99 87       	std	Y+9, r25	; 0x09
    1e90:	aa 87       	std	Y+10, r26	; 0x0a
    1e92:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e94:	68 85       	ldd	r22, Y+8	; 0x08
    1e96:	79 85       	ldd	r23, Y+9	; 0x09
    1e98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <settime+0x2b6>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9f 83       	std	Y+7, r25	; 0x07
    1eb2:	8e 83       	std	Y+6, r24	; 0x06
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <settime+0x334>
	else if (__tmp > 65535)
    1eb6:	68 85       	ldd	r22, Y+8	; 0x08
    1eb8:	79 85       	ldd	r23, Y+9	; 0x09
    1eba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ebc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	4c f5       	brge	.+82     	; 0x1f20 <settime+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ed0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ed2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ed4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9f 83       	std	Y+7, r25	; 0x07
    1ef4:	8e 83       	std	Y+6, r24	; 0x06
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <settime+0x316>
    1ef8:	80 e9       	ldi	r24, 0x90	; 144
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	9d 83       	std	Y+5, r25	; 0x05
    1efe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <settime+0x304>
    1f08:	9d 83       	std	Y+5, r25	; 0x05
    1f0a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	9f 83       	std	Y+7, r25	; 0x07
    1f14:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f16:	8e 81       	ldd	r24, Y+6	; 0x06
    1f18:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <settime+0x2f8>
    1f1e:	24 c0       	rjmp	.+72     	; 0x1f68 <settime+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	68 85       	ldd	r22, Y+8	; 0x08
    1f22:	79 85       	ldd	r23, Y+9	; 0x09
    1f24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f28:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9f 83       	std	Y+7, r25	; 0x07
    1f32:	8e 83       	std	Y+6, r24	; 0x06
    1f34:	8e 81       	ldd	r24, Y+6	; 0x06
    1f36:	9f 81       	ldd	r25, Y+7	; 0x07
    1f38:	9b 83       	std	Y+3, r25	; 0x03
    1f3a:	8a 83       	std	Y+2, r24	; 0x02
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <settime+0x340>
    1f44:	9b 83       	std	Y+3, r25	; 0x03
    1f46:	8a 83       	std	Y+2, r24	; 0x02
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <settime+0x368>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f4a:	69 89       	ldd	r22, Y+17	; 0x11
    1f4c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f50:	9c 89       	ldd	r25, Y+20	; 0x14
    1f52:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	88 8b       	std	Y+16, r24	; 0x10
    1f5c:	88 89       	ldd	r24, Y+16	; 0x10
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	8a 95       	dec	r24
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <settime+0x362>
    1f66:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    1f68:	e3 96       	adiw	r28, 0x33	; 51
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <_register_bcd_to_dec>:

#include "display.h"
#include "ds1302.h"
#include  "uart.h"

uint8_t _register_bcd_to_dec(uint8_t val, uint8_t high_bit) {
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <_register_bcd_to_dec+0x6>
    1f80:	0f 92       	push	r0
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	8a 83       	std	Y+2, r24	; 0x02
    1f88:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t mask = (1 << (high_bit + 1)) - 1;
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	88 2f       	mov	r24, r24
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9c 01       	movw	r18, r24
    1f92:	2f 5f       	subi	r18, 0xFF	; 255
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <_register_bcd_to_dec+0x26>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	2a 95       	dec	r18
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <_register_bcd_to_dec+0x22>
    1fa4:	81 50       	subi	r24, 0x01	; 1
    1fa6:	89 83       	std	Y+1, r24	; 0x01
	val &= mask;
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	89 23       	and	r24, r25
    1fae:	8a 83       	std	Y+2, r24	; 0x02
	val = (val & 15) + 10 * ((val & (15 << 4)) >> 4);
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	4f 70       	andi	r20, 0x0F	; 15
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	82 95       	swap	r24
    1fba:	8f 70       	andi	r24, 0x0F	; 15
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	90 70       	andi	r25, 0x00	; 0
    1fc2:	9c 01       	movw	r18, r24
    1fc4:	22 0f       	add	r18, r18
    1fc6:	33 1f       	adc	r19, r19
    1fc8:	c9 01       	movw	r24, r18
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	82 0f       	add	r24, r18
    1fd4:	93 1f       	adc	r25, r19
    1fd6:	84 0f       	add	r24, r20
    1fd8:	8a 83       	std	Y+2, r24	; 0x02
	return val;
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <main>:

int main(void) {
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	66 97       	sbiw	r28, 0x16	; 22
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
	initOutput();
    1ffc:	0e 94 53 00 	call	0xa6	; 0xa6 <initOutput>
	uart_init();
    2000:	0e 94 2e 11 	call	0x225c	; 0x225c <uart_init>
	stdout= &uart_output;
    2004:	88 e1       	ldi	r24, 0x18	; 24
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	90 93 6f 01 	sts	0x016F, r25
    200c:	80 93 6e 01 	sts	0x016E, r24
	stdin= &uart_input;
    2010:	86 e2       	ldi	r24, 0x26	; 38
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	90 93 6d 01 	sts	0x016D, r25
    2018:	80 93 6c 01 	sts	0x016C, r24
	while (1) {
		ds1302_init();
    201c:	0e 94 c2 00 	call	0x184	; 0x184 <ds1302_init>
//
//		printf("time c: %u-%u-%u-%u-%u-%u\n", DateTime.Hour, DateTime.Min,


		unsigned char now[8];
		gettime(now);
    2020:	ce 01       	movw	r24, r28
    2022:	0f 96       	adiw	r24, 0x0f	; 15
    2024:	0e 94 37 0c 	call	0x186e	; 0x186e <gettime>

		printf("0 %x\n", now[0]);
    2028:	8f 85       	ldd	r24, Y+15	; 0x0f
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	00 d0       	rcall	.+0      	; 0x2030 <main+0x48>
    2030:	00 d0       	rcall	.+0      	; 0x2032 <main+0x4a>
    2032:	ed b7       	in	r30, 0x3d	; 61
    2034:	fe b7       	in	r31, 0x3e	; 62
    2036:	31 96       	adiw	r30, 0x01	; 1
    2038:	84 e3       	ldi	r24, 0x34	; 52
    203a:	91 e0       	ldi	r25, 0x01	; 1
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
    2040:	33 83       	std	Z+3, r19	; 0x03
    2042:	22 83       	std	Z+2, r18	; 0x02
    2044:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <printf>
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
		printf("1 %x\n", now[1]);
    2050:	88 89       	ldd	r24, Y+16	; 0x10
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	00 d0       	rcall	.+0      	; 0x2058 <main+0x70>
    2058:	00 d0       	rcall	.+0      	; 0x205a <main+0x72>
    205a:	ed b7       	in	r30, 0x3d	; 61
    205c:	fe b7       	in	r31, 0x3e	; 62
    205e:	31 96       	adiw	r30, 0x01	; 1
    2060:	8a e3       	ldi	r24, 0x3A	; 58
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
    2068:	33 83       	std	Z+3, r19	; 0x03
    206a:	22 83       	std	Z+2, r18	; 0x02
    206c:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <printf>
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
		printf("2 %x\n", now[2]);
    2078:	89 89       	ldd	r24, Y+17	; 0x11
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	00 d0       	rcall	.+0      	; 0x2080 <main+0x98>
    2080:	00 d0       	rcall	.+0      	; 0x2082 <main+0x9a>
    2082:	ed b7       	in	r30, 0x3d	; 61
    2084:	fe b7       	in	r31, 0x3e	; 62
    2086:	31 96       	adiw	r30, 0x01	; 1
    2088:	80 e4       	ldi	r24, 0x40	; 64
    208a:	91 e0       	ldi	r25, 0x01	; 1
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
    2090:	33 83       	std	Z+3, r19	; 0x03
    2092:	22 83       	std	Z+2, r18	; 0x02
    2094:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <printf>
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
		printf("3 %x\n", now[3]);
    20a0:	8a 89       	ldd	r24, Y+18	; 0x12
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <main+0xc0>
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <main+0xc2>
    20aa:	ed b7       	in	r30, 0x3d	; 61
    20ac:	fe b7       	in	r31, 0x3e	; 62
    20ae:	31 96       	adiw	r30, 0x01	; 1
    20b0:	86 e4       	ldi	r24, 0x46	; 70
    20b2:	91 e0       	ldi	r25, 0x01	; 1
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
    20b8:	33 83       	std	Z+3, r19	; 0x03
    20ba:	22 83       	std	Z+2, r18	; 0x02
    20bc:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <printf>
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
		printf("4 %x\n", now[4]);
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <main+0xe8>
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <main+0xea>
    20d2:	ed b7       	in	r30, 0x3d	; 61
    20d4:	fe b7       	in	r31, 0x3e	; 62
    20d6:	31 96       	adiw	r30, 0x01	; 1
    20d8:	8c e4       	ldi	r24, 0x4C	; 76
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
    20e0:	33 83       	std	Z+3, r19	; 0x03
    20e2:	22 83       	std	Z+2, r18	; 0x02
    20e4:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <printf>
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
		printf("5 %x\n", now[5]);
    20f0:	8c 89       	ldd	r24, Y+20	; 0x14
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <main+0x110>
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <main+0x112>
    20fa:	ed b7       	in	r30, 0x3d	; 61
    20fc:	fe b7       	in	r31, 0x3e	; 62
    20fe:	31 96       	adiw	r30, 0x01	; 1
    2100:	82 e5       	ldi	r24, 0x52	; 82
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	33 83       	std	Z+3, r19	; 0x03
    210a:	22 83       	std	Z+2, r18	; 0x02
    210c:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <printf>
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
		printf("6 %x\n", now[6]);
    2118:	8d 89       	ldd	r24, Y+21	; 0x15
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	00 d0       	rcall	.+0      	; 0x2120 <main+0x138>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <main+0x13a>
    2122:	ed b7       	in	r30, 0x3d	; 61
    2124:	fe b7       	in	r31, 0x3e	; 62
    2126:	31 96       	adiw	r30, 0x01	; 1
    2128:	88 e5       	ldi	r24, 0x58	; 88
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
    2130:	33 83       	std	Z+3, r19	; 0x03
    2132:	22 83       	std	Z+2, r18	; 0x02
    2134:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <printf>
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
		printf("7 %x\n", now[7]);
    2140:	8e 89       	ldd	r24, Y+22	; 0x16
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	00 d0       	rcall	.+0      	; 0x2148 <main+0x160>
    2148:	00 d0       	rcall	.+0      	; 0x214a <main+0x162>
    214a:	ed b7       	in	r30, 0x3d	; 61
    214c:	fe b7       	in	r31, 0x3e	; 62
    214e:	31 96       	adiw	r30, 0x01	; 1
    2150:	8e e5       	ldi	r24, 0x5E	; 94
    2152:	91 e0       	ldi	r25, 0x01	; 1
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
    2158:	33 83       	std	Z+3, r19	; 0x03
    215a:	22 83       	std	Z+2, r18	; 0x02
    215c:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <printf>
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	aa e7       	ldi	r26, 0x7A	; 122
    216e:	b4 e4       	ldi	r27, 0x44	; 68
    2170:	8b 87       	std	Y+11, r24	; 0x0b
    2172:	9c 87       	std	Y+12, r25	; 0x0c
    2174:	ad 87       	std	Y+13, r26	; 0x0d
    2176:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2178:	6b 85       	ldd	r22, Y+11	; 0x0b
    217a:	7c 85       	ldd	r23, Y+12	; 0x0c
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4a e7       	ldi	r20, 0x7A	; 122
    2186:	55 e4       	ldi	r21, 0x45	; 69
    2188:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	8f 83       	std	Y+7, r24	; 0x07
    2192:	98 87       	std	Y+8, r25	; 0x08
    2194:	a9 87       	std	Y+9, r26	; 0x09
    2196:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2198:	6f 81       	ldd	r22, Y+7	; 0x07
    219a:	78 85       	ldd	r23, Y+8	; 0x08
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	2c f4       	brge	.+10     	; 0x21ba <main+0x1d2>
		__ticks = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
    21b8:	3f c0       	rjmp	.+126    	; 0x2238 <main+0x250>
	else if (__tmp > 65535)
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	57 e4       	ldi	r21, 0x47	; 71
    21ca:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	4c f5       	brge	.+82     	; 0x2224 <main+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e2       	ldi	r20, 0x20	; 32
    21e0:	51 e4       	ldi	r21, 0x41	; 65
    21e2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <main+0x232>
    21fc:	80 e9       	ldi	r24, 0x90	; 144
    21fe:	91 e0       	ldi	r25, 0x01	; 1
    2200:	9c 83       	std	Y+4, r25	; 0x04
    2202:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <main+0x220>
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	9e 83       	std	Y+6, r25	; 0x06
    2218:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	69 f7       	brne	.-38     	; 0x21fc <main+0x214>
    2222:	14 c0       	rjmp	.+40     	; 0x224c <main+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <main+0x25c>
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		setTime(now[0], now[0], now[0]);
    224c:	8f 85       	ldd	r24, Y+15	; 0x0f
    224e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2250:	2f 85       	ldd	r18, Y+15	; 0x0f
    2252:	69 2f       	mov	r22, r25
    2254:	42 2f       	mov	r20, r18
    2256:	0e 94 aa 00 	call	0x154	; 0x154 <setTime>
    225a:	e0 ce       	rjmp	.-576    	; 0x201c <main+0x34>

0000225c <uart_init>:
#endif
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    UBRR0H = UBRRH_VALUE;
    2264:	e5 ec       	ldi	r30, 0xC5	; 197
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	10 82       	st	Z, r1
    UBRR0L = UBRRL_VALUE;
    226a:	e4 ec       	ldi	r30, 0xC4	; 196
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	87 e6       	ldi	r24, 0x67	; 103
    2270:	80 83       	st	Z, r24
    
#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
    2272:	a0 ec       	ldi	r26, 0xC0	; 192
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e0 ec       	ldi	r30, 0xC0	; 192
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8d 7f       	andi	r24, 0xFD	; 253
    227e:	8c 93       	st	X, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
    2280:	e2 ec       	ldi	r30, 0xC2	; 194
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	86 e0       	ldi	r24, 0x06	; 6
    2286:	80 83       	st	Z, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
    2288:	e1 ec       	ldi	r30, 0xC1	; 193
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	88 e1       	ldi	r24, 0x18	; 24
    228e:	80 83       	st	Z, r24
}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	00 d0       	rcall	.+0      	; 0x229c <uart_putchar+0x6>
    229c:	0f 92       	push	r0
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	7b 83       	std	Y+3, r23	; 0x03
    22a6:	6a 83       	std	Y+2, r22	; 0x02
    if (c == '\n') {
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	8a 30       	cpi	r24, 0x0A	; 10
    22ac:	31 f4       	brne	.+12     	; 0x22ba <uart_putchar+0x24>
        uart_putchar('\r', stream);
    22ae:	2a 81       	ldd	r18, Y+2	; 0x02
    22b0:	3b 81       	ldd	r19, Y+3	; 0x03
    22b2:	8d e0       	ldi	r24, 0x0D	; 13
    22b4:	b9 01       	movw	r22, r18
    22b6:	0e 94 4b 11 	call	0x2296	; 0x2296 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
    22ba:	e0 ec       	ldi	r30, 0xC0	; 192
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	80 72       	andi	r24, 0x20	; 32
    22c6:	90 70       	andi	r25, 0x00	; 0
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	b9 f3       	breq	.-18     	; 0x22ba <uart_putchar+0x24>
    UDR0 = c;
    22cc:	e6 ec       	ldi	r30, 0xC6	; 198
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	80 83       	st	Z, r24
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <uart_getchar>:

char uart_getchar(FILE *stream) {
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <uart_getchar+0x6>
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSR0A, RXC0);
    22ee:	e0 ec       	ldi	r30, 0xC0	; 192
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	88 23       	and	r24, r24
    22f6:	dc f7       	brge	.-10     	; 0x22ee <uart_getchar+0xe>
    return UDR0;
    22f8:	e6 ec       	ldi	r30, 0xC6	; 198
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
}
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <__fixunssfsi>:
    2308:	ef 92       	push	r14
    230a:	ff 92       	push	r15
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	7b 01       	movw	r14, r22
    2312:	8c 01       	movw	r16, r24
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	5f e4       	ldi	r21, 0x4F	; 79
    231c:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__gesf2>
    2320:	88 23       	and	r24, r24
    2322:	8c f0       	brlt	.+34     	; 0x2346 <__fixunssfsi+0x3e>
    2324:	c8 01       	movw	r24, r16
    2326:	b7 01       	movw	r22, r14
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e0       	ldi	r20, 0x00	; 0
    232e:	5f e4       	ldi	r21, 0x4F	; 79
    2330:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__subsf3>
    2334:	0e 94 90 15 	call	0x2b20	; 0x2b20 <__fixsfsi>
    2338:	9b 01       	movw	r18, r22
    233a:	ac 01       	movw	r20, r24
    233c:	20 50       	subi	r18, 0x00	; 0
    233e:	30 40       	sbci	r19, 0x00	; 0
    2340:	40 40       	sbci	r20, 0x00	; 0
    2342:	50 48       	sbci	r21, 0x80	; 128
    2344:	06 c0       	rjmp	.+12     	; 0x2352 <__fixunssfsi+0x4a>
    2346:	c8 01       	movw	r24, r16
    2348:	b7 01       	movw	r22, r14
    234a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <__fixsfsi>
    234e:	9b 01       	movw	r18, r22
    2350:	ac 01       	movw	r20, r24
    2352:	b9 01       	movw	r22, r18
    2354:	ca 01       	movw	r24, r20
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	ef 90       	pop	r14
    235e:	08 95       	ret

00002360 <_fpadd_parts>:
    2360:	a0 e0       	ldi	r26, 0x00	; 0
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e6 eb       	ldi	r30, 0xB6	; 182
    2366:	f1 e1       	ldi	r31, 0x11	; 17
    2368:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__>
    236c:	dc 01       	movw	r26, r24
    236e:	2b 01       	movw	r4, r22
    2370:	fa 01       	movw	r30, r20
    2372:	9c 91       	ld	r25, X
    2374:	92 30       	cpi	r25, 0x02	; 2
    2376:	08 f4       	brcc	.+2      	; 0x237a <_fpadd_parts+0x1a>
    2378:	39 c1       	rjmp	.+626    	; 0x25ec <_fpadd_parts+0x28c>
    237a:	eb 01       	movw	r28, r22
    237c:	88 81       	ld	r24, Y
    237e:	82 30       	cpi	r24, 0x02	; 2
    2380:	08 f4       	brcc	.+2      	; 0x2384 <_fpadd_parts+0x24>
    2382:	33 c1       	rjmp	.+614    	; 0x25ea <_fpadd_parts+0x28a>
    2384:	94 30       	cpi	r25, 0x04	; 4
    2386:	69 f4       	brne	.+26     	; 0x23a2 <_fpadd_parts+0x42>
    2388:	84 30       	cpi	r24, 0x04	; 4
    238a:	09 f0       	breq	.+2      	; 0x238e <_fpadd_parts+0x2e>
    238c:	2f c1       	rjmp	.+606    	; 0x25ec <_fpadd_parts+0x28c>
    238e:	11 96       	adiw	r26, 0x01	; 1
    2390:	9c 91       	ld	r25, X
    2392:	11 97       	sbiw	r26, 0x01	; 1
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	98 17       	cp	r25, r24
    2398:	09 f4       	brne	.+2      	; 0x239c <_fpadd_parts+0x3c>
    239a:	28 c1       	rjmp	.+592    	; 0x25ec <_fpadd_parts+0x28c>
    239c:	a4 e6       	ldi	r26, 0x64	; 100
    239e:	b1 e0       	ldi	r27, 0x01	; 1
    23a0:	25 c1       	rjmp	.+586    	; 0x25ec <_fpadd_parts+0x28c>
    23a2:	84 30       	cpi	r24, 0x04	; 4
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <_fpadd_parts+0x48>
    23a6:	21 c1       	rjmp	.+578    	; 0x25ea <_fpadd_parts+0x28a>
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	a9 f4       	brne	.+42     	; 0x23d6 <_fpadd_parts+0x76>
    23ac:	92 30       	cpi	r25, 0x02	; 2
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <_fpadd_parts+0x52>
    23b0:	1d c1       	rjmp	.+570    	; 0x25ec <_fpadd_parts+0x28c>
    23b2:	9a 01       	movw	r18, r20
    23b4:	ad 01       	movw	r20, r26
    23b6:	88 e0       	ldi	r24, 0x08	; 8
    23b8:	ea 01       	movw	r28, r20
    23ba:	09 90       	ld	r0, Y+
    23bc:	ae 01       	movw	r20, r28
    23be:	e9 01       	movw	r28, r18
    23c0:	09 92       	st	Y+, r0
    23c2:	9e 01       	movw	r18, r28
    23c4:	81 50       	subi	r24, 0x01	; 1
    23c6:	c1 f7       	brne	.-16     	; 0x23b8 <_fpadd_parts+0x58>
    23c8:	e2 01       	movw	r28, r4
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	9c 91       	ld	r25, X
    23d0:	89 23       	and	r24, r25
    23d2:	81 83       	std	Z+1, r24	; 0x01
    23d4:	08 c1       	rjmp	.+528    	; 0x25e6 <_fpadd_parts+0x286>
    23d6:	92 30       	cpi	r25, 0x02	; 2
    23d8:	09 f4       	brne	.+2      	; 0x23dc <_fpadd_parts+0x7c>
    23da:	07 c1       	rjmp	.+526    	; 0x25ea <_fpadd_parts+0x28a>
    23dc:	12 96       	adiw	r26, 0x02	; 2
    23de:	2d 90       	ld	r2, X+
    23e0:	3c 90       	ld	r3, X
    23e2:	13 97       	sbiw	r26, 0x03	; 3
    23e4:	eb 01       	movw	r28, r22
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	14 96       	adiw	r26, 0x04	; 4
    23ec:	ad 90       	ld	r10, X+
    23ee:	bd 90       	ld	r11, X+
    23f0:	cd 90       	ld	r12, X+
    23f2:	dc 90       	ld	r13, X
    23f4:	17 97       	sbiw	r26, 0x07	; 7
    23f6:	ec 80       	ldd	r14, Y+4	; 0x04
    23f8:	fd 80       	ldd	r15, Y+5	; 0x05
    23fa:	0e 81       	ldd	r16, Y+6	; 0x06
    23fc:	1f 81       	ldd	r17, Y+7	; 0x07
    23fe:	91 01       	movw	r18, r2
    2400:	28 1b       	sub	r18, r24
    2402:	39 0b       	sbc	r19, r25
    2404:	b9 01       	movw	r22, r18
    2406:	37 ff       	sbrs	r19, 7
    2408:	04 c0       	rjmp	.+8      	; 0x2412 <_fpadd_parts+0xb2>
    240a:	66 27       	eor	r22, r22
    240c:	77 27       	eor	r23, r23
    240e:	62 1b       	sub	r22, r18
    2410:	73 0b       	sbc	r23, r19
    2412:	60 32       	cpi	r22, 0x20	; 32
    2414:	71 05       	cpc	r23, r1
    2416:	0c f0       	brlt	.+2      	; 0x241a <_fpadd_parts+0xba>
    2418:	61 c0       	rjmp	.+194    	; 0x24dc <_fpadd_parts+0x17c>
    241a:	12 16       	cp	r1, r18
    241c:	13 06       	cpc	r1, r19
    241e:	6c f5       	brge	.+90     	; 0x247a <_fpadd_parts+0x11a>
    2420:	37 01       	movw	r6, r14
    2422:	48 01       	movw	r8, r16
    2424:	06 2e       	mov	r0, r22
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <_fpadd_parts+0xd0>
    2428:	96 94       	lsr	r9
    242a:	87 94       	ror	r8
    242c:	77 94       	ror	r7
    242e:	67 94       	ror	r6
    2430:	0a 94       	dec	r0
    2432:	d2 f7       	brpl	.-12     	; 0x2428 <_fpadd_parts+0xc8>
    2434:	21 e0       	ldi	r18, 0x01	; 1
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	04 c0       	rjmp	.+8      	; 0x2446 <_fpadd_parts+0xe6>
    243e:	22 0f       	add	r18, r18
    2440:	33 1f       	adc	r19, r19
    2442:	44 1f       	adc	r20, r20
    2444:	55 1f       	adc	r21, r21
    2446:	6a 95       	dec	r22
    2448:	d2 f7       	brpl	.-12     	; 0x243e <_fpadd_parts+0xde>
    244a:	21 50       	subi	r18, 0x01	; 1
    244c:	30 40       	sbci	r19, 0x00	; 0
    244e:	40 40       	sbci	r20, 0x00	; 0
    2450:	50 40       	sbci	r21, 0x00	; 0
    2452:	2e 21       	and	r18, r14
    2454:	3f 21       	and	r19, r15
    2456:	40 23       	and	r20, r16
    2458:	51 23       	and	r21, r17
    245a:	21 15       	cp	r18, r1
    245c:	31 05       	cpc	r19, r1
    245e:	41 05       	cpc	r20, r1
    2460:	51 05       	cpc	r21, r1
    2462:	21 f0       	breq	.+8      	; 0x246c <_fpadd_parts+0x10c>
    2464:	21 e0       	ldi	r18, 0x01	; 1
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	79 01       	movw	r14, r18
    246e:	8a 01       	movw	r16, r20
    2470:	e6 28       	or	r14, r6
    2472:	f7 28       	or	r15, r7
    2474:	08 29       	or	r16, r8
    2476:	19 29       	or	r17, r9
    2478:	3c c0       	rjmp	.+120    	; 0x24f2 <_fpadd_parts+0x192>
    247a:	23 2b       	or	r18, r19
    247c:	d1 f1       	breq	.+116    	; 0x24f2 <_fpadd_parts+0x192>
    247e:	26 0e       	add	r2, r22
    2480:	37 1e       	adc	r3, r23
    2482:	35 01       	movw	r6, r10
    2484:	46 01       	movw	r8, r12
    2486:	06 2e       	mov	r0, r22
    2488:	04 c0       	rjmp	.+8      	; 0x2492 <_fpadd_parts+0x132>
    248a:	96 94       	lsr	r9
    248c:	87 94       	ror	r8
    248e:	77 94       	ror	r7
    2490:	67 94       	ror	r6
    2492:	0a 94       	dec	r0
    2494:	d2 f7       	brpl	.-12     	; 0x248a <_fpadd_parts+0x12a>
    2496:	21 e0       	ldi	r18, 0x01	; 1
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	50 e0       	ldi	r21, 0x00	; 0
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <_fpadd_parts+0x148>
    24a0:	22 0f       	add	r18, r18
    24a2:	33 1f       	adc	r19, r19
    24a4:	44 1f       	adc	r20, r20
    24a6:	55 1f       	adc	r21, r21
    24a8:	6a 95       	dec	r22
    24aa:	d2 f7       	brpl	.-12     	; 0x24a0 <_fpadd_parts+0x140>
    24ac:	21 50       	subi	r18, 0x01	; 1
    24ae:	30 40       	sbci	r19, 0x00	; 0
    24b0:	40 40       	sbci	r20, 0x00	; 0
    24b2:	50 40       	sbci	r21, 0x00	; 0
    24b4:	2a 21       	and	r18, r10
    24b6:	3b 21       	and	r19, r11
    24b8:	4c 21       	and	r20, r12
    24ba:	5d 21       	and	r21, r13
    24bc:	21 15       	cp	r18, r1
    24be:	31 05       	cpc	r19, r1
    24c0:	41 05       	cpc	r20, r1
    24c2:	51 05       	cpc	r21, r1
    24c4:	21 f0       	breq	.+8      	; 0x24ce <_fpadd_parts+0x16e>
    24c6:	21 e0       	ldi	r18, 0x01	; 1
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	59 01       	movw	r10, r18
    24d0:	6a 01       	movw	r12, r20
    24d2:	a6 28       	or	r10, r6
    24d4:	b7 28       	or	r11, r7
    24d6:	c8 28       	or	r12, r8
    24d8:	d9 28       	or	r13, r9
    24da:	0b c0       	rjmp	.+22     	; 0x24f2 <_fpadd_parts+0x192>
    24dc:	82 15       	cp	r24, r2
    24de:	93 05       	cpc	r25, r3
    24e0:	2c f0       	brlt	.+10     	; 0x24ec <_fpadd_parts+0x18c>
    24e2:	1c 01       	movw	r2, r24
    24e4:	aa 24       	eor	r10, r10
    24e6:	bb 24       	eor	r11, r11
    24e8:	65 01       	movw	r12, r10
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <_fpadd_parts+0x192>
    24ec:	ee 24       	eor	r14, r14
    24ee:	ff 24       	eor	r15, r15
    24f0:	87 01       	movw	r16, r14
    24f2:	11 96       	adiw	r26, 0x01	; 1
    24f4:	9c 91       	ld	r25, X
    24f6:	d2 01       	movw	r26, r4
    24f8:	11 96       	adiw	r26, 0x01	; 1
    24fa:	8c 91       	ld	r24, X
    24fc:	98 17       	cp	r25, r24
    24fe:	09 f4       	brne	.+2      	; 0x2502 <_fpadd_parts+0x1a2>
    2500:	45 c0       	rjmp	.+138    	; 0x258c <_fpadd_parts+0x22c>
    2502:	99 23       	and	r25, r25
    2504:	39 f0       	breq	.+14     	; 0x2514 <_fpadd_parts+0x1b4>
    2506:	a8 01       	movw	r20, r16
    2508:	97 01       	movw	r18, r14
    250a:	2a 19       	sub	r18, r10
    250c:	3b 09       	sbc	r19, r11
    250e:	4c 09       	sbc	r20, r12
    2510:	5d 09       	sbc	r21, r13
    2512:	06 c0       	rjmp	.+12     	; 0x2520 <_fpadd_parts+0x1c0>
    2514:	a6 01       	movw	r20, r12
    2516:	95 01       	movw	r18, r10
    2518:	2e 19       	sub	r18, r14
    251a:	3f 09       	sbc	r19, r15
    251c:	40 0b       	sbc	r20, r16
    251e:	51 0b       	sbc	r21, r17
    2520:	57 fd       	sbrc	r21, 7
    2522:	08 c0       	rjmp	.+16     	; 0x2534 <_fpadd_parts+0x1d4>
    2524:	11 82       	std	Z+1, r1	; 0x01
    2526:	33 82       	std	Z+3, r3	; 0x03
    2528:	22 82       	std	Z+2, r2	; 0x02
    252a:	24 83       	std	Z+4, r18	; 0x04
    252c:	35 83       	std	Z+5, r19	; 0x05
    252e:	46 83       	std	Z+6, r20	; 0x06
    2530:	57 83       	std	Z+7, r21	; 0x07
    2532:	1d c0       	rjmp	.+58     	; 0x256e <_fpadd_parts+0x20e>
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	81 83       	std	Z+1, r24	; 0x01
    2538:	33 82       	std	Z+3, r3	; 0x03
    253a:	22 82       	std	Z+2, r2	; 0x02
    253c:	88 27       	eor	r24, r24
    253e:	99 27       	eor	r25, r25
    2540:	dc 01       	movw	r26, r24
    2542:	82 1b       	sub	r24, r18
    2544:	93 0b       	sbc	r25, r19
    2546:	a4 0b       	sbc	r26, r20
    2548:	b5 0b       	sbc	r27, r21
    254a:	84 83       	std	Z+4, r24	; 0x04
    254c:	95 83       	std	Z+5, r25	; 0x05
    254e:	a6 83       	std	Z+6, r26	; 0x06
    2550:	b7 83       	std	Z+7, r27	; 0x07
    2552:	0d c0       	rjmp	.+26     	; 0x256e <_fpadd_parts+0x20e>
    2554:	22 0f       	add	r18, r18
    2556:	33 1f       	adc	r19, r19
    2558:	44 1f       	adc	r20, r20
    255a:	55 1f       	adc	r21, r21
    255c:	24 83       	std	Z+4, r18	; 0x04
    255e:	35 83       	std	Z+5, r19	; 0x05
    2560:	46 83       	std	Z+6, r20	; 0x06
    2562:	57 83       	std	Z+7, r21	; 0x07
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	93 83       	std	Z+3, r25	; 0x03
    256c:	82 83       	std	Z+2, r24	; 0x02
    256e:	24 81       	ldd	r18, Z+4	; 0x04
    2570:	35 81       	ldd	r19, Z+5	; 0x05
    2572:	46 81       	ldd	r20, Z+6	; 0x06
    2574:	57 81       	ldd	r21, Z+7	; 0x07
    2576:	da 01       	movw	r26, r20
    2578:	c9 01       	movw	r24, r18
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	a1 09       	sbc	r26, r1
    257e:	b1 09       	sbc	r27, r1
    2580:	8f 5f       	subi	r24, 0xFF	; 255
    2582:	9f 4f       	sbci	r25, 0xFF	; 255
    2584:	af 4f       	sbci	r26, 0xFF	; 255
    2586:	bf 43       	sbci	r27, 0x3F	; 63
    2588:	28 f3       	brcs	.-54     	; 0x2554 <_fpadd_parts+0x1f4>
    258a:	0b c0       	rjmp	.+22     	; 0x25a2 <_fpadd_parts+0x242>
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	33 82       	std	Z+3, r3	; 0x03
    2590:	22 82       	std	Z+2, r2	; 0x02
    2592:	ea 0c       	add	r14, r10
    2594:	fb 1c       	adc	r15, r11
    2596:	0c 1d       	adc	r16, r12
    2598:	1d 1d       	adc	r17, r13
    259a:	e4 82       	std	Z+4, r14	; 0x04
    259c:	f5 82       	std	Z+5, r15	; 0x05
    259e:	06 83       	std	Z+6, r16	; 0x06
    25a0:	17 83       	std	Z+7, r17	; 0x07
    25a2:	83 e0       	ldi	r24, 0x03	; 3
    25a4:	80 83       	st	Z, r24
    25a6:	24 81       	ldd	r18, Z+4	; 0x04
    25a8:	35 81       	ldd	r19, Z+5	; 0x05
    25aa:	46 81       	ldd	r20, Z+6	; 0x06
    25ac:	57 81       	ldd	r21, Z+7	; 0x07
    25ae:	57 ff       	sbrs	r21, 7
    25b0:	1a c0       	rjmp	.+52     	; 0x25e6 <_fpadd_parts+0x286>
    25b2:	c9 01       	movw	r24, r18
    25b4:	aa 27       	eor	r26, r26
    25b6:	97 fd       	sbrc	r25, 7
    25b8:	a0 95       	com	r26
    25ba:	ba 2f       	mov	r27, r26
    25bc:	81 70       	andi	r24, 0x01	; 1
    25be:	90 70       	andi	r25, 0x00	; 0
    25c0:	a0 70       	andi	r26, 0x00	; 0
    25c2:	b0 70       	andi	r27, 0x00	; 0
    25c4:	56 95       	lsr	r21
    25c6:	47 95       	ror	r20
    25c8:	37 95       	ror	r19
    25ca:	27 95       	ror	r18
    25cc:	82 2b       	or	r24, r18
    25ce:	93 2b       	or	r25, r19
    25d0:	a4 2b       	or	r26, r20
    25d2:	b5 2b       	or	r27, r21
    25d4:	84 83       	std	Z+4, r24	; 0x04
    25d6:	95 83       	std	Z+5, r25	; 0x05
    25d8:	a6 83       	std	Z+6, r26	; 0x06
    25da:	b7 83       	std	Z+7, r27	; 0x07
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	01 96       	adiw	r24, 0x01	; 1
    25e2:	93 83       	std	Z+3, r25	; 0x03
    25e4:	82 83       	std	Z+2, r24	; 0x02
    25e6:	df 01       	movw	r26, r30
    25e8:	01 c0       	rjmp	.+2      	; 0x25ec <_fpadd_parts+0x28c>
    25ea:	d2 01       	movw	r26, r4
    25ec:	cd 01       	movw	r24, r26
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	e2 e1       	ldi	r30, 0x12	; 18
    25f4:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__>

000025f8 <__subsf3>:
    25f8:	a0 e2       	ldi	r26, 0x20	; 32
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e2 e0       	ldi	r30, 0x02	; 2
    25fe:	f3 e1       	ldi	r31, 0x13	; 19
    2600:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
    2604:	69 83       	std	Y+1, r22	; 0x01
    2606:	7a 83       	std	Y+2, r23	; 0x02
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	9c 83       	std	Y+4, r25	; 0x04
    260c:	2d 83       	std	Y+5, r18	; 0x05
    260e:	3e 83       	std	Y+6, r19	; 0x06
    2610:	4f 83       	std	Y+7, r20	; 0x07
    2612:	58 87       	std	Y+8, r21	; 0x08
    2614:	e9 e0       	ldi	r30, 0x09	; 9
    2616:	ee 2e       	mov	r14, r30
    2618:	f1 2c       	mov	r15, r1
    261a:	ec 0e       	add	r14, r28
    261c:	fd 1e       	adc	r15, r29
    261e:	ce 01       	movw	r24, r28
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	b7 01       	movw	r22, r14
    2624:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    2628:	8e 01       	movw	r16, r28
    262a:	0f 5e       	subi	r16, 0xEF	; 239
    262c:	1f 4f       	sbci	r17, 0xFF	; 255
    262e:	ce 01       	movw	r24, r28
    2630:	05 96       	adiw	r24, 0x05	; 5
    2632:	b8 01       	movw	r22, r16
    2634:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    2638:	8a 89       	ldd	r24, Y+18	; 0x12
    263a:	91 e0       	ldi	r25, 0x01	; 1
    263c:	89 27       	eor	r24, r25
    263e:	8a 8b       	std	Y+18, r24	; 0x12
    2640:	c7 01       	movw	r24, r14
    2642:	b8 01       	movw	r22, r16
    2644:	ae 01       	movw	r20, r28
    2646:	47 5e       	subi	r20, 0xE7	; 231
    2648:	5f 4f       	sbci	r21, 0xFF	; 255
    264a:	0e 94 b0 11 	call	0x2360	; 0x2360 <_fpadd_parts>
    264e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__pack_f>
    2652:	a0 96       	adiw	r28, 0x20	; 32
    2654:	e6 e0       	ldi	r30, 0x06	; 6
    2656:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

0000265a <__addsf3>:
    265a:	a0 e2       	ldi	r26, 0x20	; 32
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e3 e3       	ldi	r30, 0x33	; 51
    2660:	f3 e1       	ldi	r31, 0x13	; 19
    2662:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
    2666:	69 83       	std	Y+1, r22	; 0x01
    2668:	7a 83       	std	Y+2, r23	; 0x02
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	2d 83       	std	Y+5, r18	; 0x05
    2670:	3e 83       	std	Y+6, r19	; 0x06
    2672:	4f 83       	std	Y+7, r20	; 0x07
    2674:	58 87       	std	Y+8, r21	; 0x08
    2676:	f9 e0       	ldi	r31, 0x09	; 9
    2678:	ef 2e       	mov	r14, r31
    267a:	f1 2c       	mov	r15, r1
    267c:	ec 0e       	add	r14, r28
    267e:	fd 1e       	adc	r15, r29
    2680:	ce 01       	movw	r24, r28
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	b7 01       	movw	r22, r14
    2686:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    268a:	8e 01       	movw	r16, r28
    268c:	0f 5e       	subi	r16, 0xEF	; 239
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	ce 01       	movw	r24, r28
    2692:	05 96       	adiw	r24, 0x05	; 5
    2694:	b8 01       	movw	r22, r16
    2696:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    269a:	c7 01       	movw	r24, r14
    269c:	b8 01       	movw	r22, r16
    269e:	ae 01       	movw	r20, r28
    26a0:	47 5e       	subi	r20, 0xE7	; 231
    26a2:	5f 4f       	sbci	r21, 0xFF	; 255
    26a4:	0e 94 b0 11 	call	0x2360	; 0x2360 <_fpadd_parts>
    26a8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__pack_f>
    26ac:	a0 96       	adiw	r28, 0x20	; 32
    26ae:	e6 e0       	ldi	r30, 0x06	; 6
    26b0:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

000026b4 <__mulsf3>:
    26b4:	a0 e2       	ldi	r26, 0x20	; 32
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e0 e6       	ldi	r30, 0x60	; 96
    26ba:	f3 e1       	ldi	r31, 0x13	; 19
    26bc:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__>
    26c0:	69 83       	std	Y+1, r22	; 0x01
    26c2:	7a 83       	std	Y+2, r23	; 0x02
    26c4:	8b 83       	std	Y+3, r24	; 0x03
    26c6:	9c 83       	std	Y+4, r25	; 0x04
    26c8:	2d 83       	std	Y+5, r18	; 0x05
    26ca:	3e 83       	std	Y+6, r19	; 0x06
    26cc:	4f 83       	std	Y+7, r20	; 0x07
    26ce:	58 87       	std	Y+8, r21	; 0x08
    26d0:	ce 01       	movw	r24, r28
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	be 01       	movw	r22, r28
    26d6:	67 5f       	subi	r22, 0xF7	; 247
    26d8:	7f 4f       	sbci	r23, 0xFF	; 255
    26da:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    26de:	ce 01       	movw	r24, r28
    26e0:	05 96       	adiw	r24, 0x05	; 5
    26e2:	be 01       	movw	r22, r28
    26e4:	6f 5e       	subi	r22, 0xEF	; 239
    26e6:	7f 4f       	sbci	r23, 0xFF	; 255
    26e8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    26ec:	99 85       	ldd	r25, Y+9	; 0x09
    26ee:	92 30       	cpi	r25, 0x02	; 2
    26f0:	88 f0       	brcs	.+34     	; 0x2714 <__mulsf3+0x60>
    26f2:	89 89       	ldd	r24, Y+17	; 0x11
    26f4:	82 30       	cpi	r24, 0x02	; 2
    26f6:	c8 f0       	brcs	.+50     	; 0x272a <__mulsf3+0x76>
    26f8:	94 30       	cpi	r25, 0x04	; 4
    26fa:	19 f4       	brne	.+6      	; 0x2702 <__mulsf3+0x4e>
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	51 f4       	brne	.+20     	; 0x2714 <__mulsf3+0x60>
    2700:	04 c0       	rjmp	.+8      	; 0x270a <__mulsf3+0x56>
    2702:	84 30       	cpi	r24, 0x04	; 4
    2704:	29 f4       	brne	.+10     	; 0x2710 <__mulsf3+0x5c>
    2706:	92 30       	cpi	r25, 0x02	; 2
    2708:	81 f4       	brne	.+32     	; 0x272a <__mulsf3+0x76>
    270a:	84 e6       	ldi	r24, 0x64	; 100
    270c:	91 e0       	ldi	r25, 0x01	; 1
    270e:	c6 c0       	rjmp	.+396    	; 0x289c <__mulsf3+0x1e8>
    2710:	92 30       	cpi	r25, 0x02	; 2
    2712:	49 f4       	brne	.+18     	; 0x2726 <__mulsf3+0x72>
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	9a 85       	ldd	r25, Y+10	; 0x0a
    2718:	8a 89       	ldd	r24, Y+18	; 0x12
    271a:	98 13       	cpse	r25, r24
    271c:	21 e0       	ldi	r18, 0x01	; 1
    271e:	2a 87       	std	Y+10, r18	; 0x0a
    2720:	ce 01       	movw	r24, r28
    2722:	09 96       	adiw	r24, 0x09	; 9
    2724:	bb c0       	rjmp	.+374    	; 0x289c <__mulsf3+0x1e8>
    2726:	82 30       	cpi	r24, 0x02	; 2
    2728:	49 f4       	brne	.+18     	; 0x273c <__mulsf3+0x88>
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	8a 89       	ldd	r24, Y+18	; 0x12
    2730:	98 13       	cpse	r25, r24
    2732:	21 e0       	ldi	r18, 0x01	; 1
    2734:	2a 8b       	std	Y+18, r18	; 0x12
    2736:	ce 01       	movw	r24, r28
    2738:	41 96       	adiw	r24, 0x11	; 17
    273a:	b0 c0       	rjmp	.+352    	; 0x289c <__mulsf3+0x1e8>
    273c:	2d 84       	ldd	r2, Y+13	; 0x0d
    273e:	3e 84       	ldd	r3, Y+14	; 0x0e
    2740:	4f 84       	ldd	r4, Y+15	; 0x0f
    2742:	58 88       	ldd	r5, Y+16	; 0x10
    2744:	6d 88       	ldd	r6, Y+21	; 0x15
    2746:	7e 88       	ldd	r7, Y+22	; 0x16
    2748:	8f 88       	ldd	r8, Y+23	; 0x17
    274a:	98 8c       	ldd	r9, Y+24	; 0x18
    274c:	ee 24       	eor	r14, r14
    274e:	ff 24       	eor	r15, r15
    2750:	87 01       	movw	r16, r14
    2752:	aa 24       	eor	r10, r10
    2754:	bb 24       	eor	r11, r11
    2756:	65 01       	movw	r12, r10
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	70 e0       	ldi	r23, 0x00	; 0
    2760:	e0 e0       	ldi	r30, 0x00	; 0
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	c1 01       	movw	r24, r2
    2766:	81 70       	andi	r24, 0x01	; 1
    2768:	90 70       	andi	r25, 0x00	; 0
    276a:	89 2b       	or	r24, r25
    276c:	e9 f0       	breq	.+58     	; 0x27a8 <__mulsf3+0xf4>
    276e:	e6 0c       	add	r14, r6
    2770:	f7 1c       	adc	r15, r7
    2772:	08 1d       	adc	r16, r8
    2774:	19 1d       	adc	r17, r9
    2776:	9a 01       	movw	r18, r20
    2778:	ab 01       	movw	r20, r22
    277a:	2a 0d       	add	r18, r10
    277c:	3b 1d       	adc	r19, r11
    277e:	4c 1d       	adc	r20, r12
    2780:	5d 1d       	adc	r21, r13
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	a0 e0       	ldi	r26, 0x00	; 0
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e6 14       	cp	r14, r6
    278c:	f7 04       	cpc	r15, r7
    278e:	08 05       	cpc	r16, r8
    2790:	19 05       	cpc	r17, r9
    2792:	20 f4       	brcc	.+8      	; 0x279c <__mulsf3+0xe8>
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	a0 e0       	ldi	r26, 0x00	; 0
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	ba 01       	movw	r22, r20
    279e:	a9 01       	movw	r20, r18
    27a0:	48 0f       	add	r20, r24
    27a2:	59 1f       	adc	r21, r25
    27a4:	6a 1f       	adc	r22, r26
    27a6:	7b 1f       	adc	r23, r27
    27a8:	aa 0c       	add	r10, r10
    27aa:	bb 1c       	adc	r11, r11
    27ac:	cc 1c       	adc	r12, r12
    27ae:	dd 1c       	adc	r13, r13
    27b0:	97 fe       	sbrs	r9, 7
    27b2:	08 c0       	rjmp	.+16     	; 0x27c4 <__mulsf3+0x110>
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	a0 e0       	ldi	r26, 0x00	; 0
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	a8 2a       	or	r10, r24
    27be:	b9 2a       	or	r11, r25
    27c0:	ca 2a       	or	r12, r26
    27c2:	db 2a       	or	r13, r27
    27c4:	31 96       	adiw	r30, 0x01	; 1
    27c6:	e0 32       	cpi	r30, 0x20	; 32
    27c8:	f1 05       	cpc	r31, r1
    27ca:	49 f0       	breq	.+18     	; 0x27de <__mulsf3+0x12a>
    27cc:	66 0c       	add	r6, r6
    27ce:	77 1c       	adc	r7, r7
    27d0:	88 1c       	adc	r8, r8
    27d2:	99 1c       	adc	r9, r9
    27d4:	56 94       	lsr	r5
    27d6:	47 94       	ror	r4
    27d8:	37 94       	ror	r3
    27da:	27 94       	ror	r2
    27dc:	c3 cf       	rjmp	.-122    	; 0x2764 <__mulsf3+0xb0>
    27de:	fa 85       	ldd	r31, Y+10	; 0x0a
    27e0:	ea 89       	ldd	r30, Y+18	; 0x12
    27e2:	2b 89       	ldd	r18, Y+19	; 0x13
    27e4:	3c 89       	ldd	r19, Y+20	; 0x14
    27e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ea:	28 0f       	add	r18, r24
    27ec:	39 1f       	adc	r19, r25
    27ee:	2e 5f       	subi	r18, 0xFE	; 254
    27f0:	3f 4f       	sbci	r19, 0xFF	; 255
    27f2:	17 c0       	rjmp	.+46     	; 0x2822 <__mulsf3+0x16e>
    27f4:	ca 01       	movw	r24, r20
    27f6:	81 70       	andi	r24, 0x01	; 1
    27f8:	90 70       	andi	r25, 0x00	; 0
    27fa:	89 2b       	or	r24, r25
    27fc:	61 f0       	breq	.+24     	; 0x2816 <__mulsf3+0x162>
    27fe:	16 95       	lsr	r17
    2800:	07 95       	ror	r16
    2802:	f7 94       	ror	r15
    2804:	e7 94       	ror	r14
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a0 e0       	ldi	r26, 0x00	; 0
    280c:	b0 e8       	ldi	r27, 0x80	; 128
    280e:	e8 2a       	or	r14, r24
    2810:	f9 2a       	or	r15, r25
    2812:	0a 2b       	or	r16, r26
    2814:	1b 2b       	or	r17, r27
    2816:	76 95       	lsr	r23
    2818:	67 95       	ror	r22
    281a:	57 95       	ror	r21
    281c:	47 95       	ror	r20
    281e:	2f 5f       	subi	r18, 0xFF	; 255
    2820:	3f 4f       	sbci	r19, 0xFF	; 255
    2822:	77 fd       	sbrc	r23, 7
    2824:	e7 cf       	rjmp	.-50     	; 0x27f4 <__mulsf3+0x140>
    2826:	0c c0       	rjmp	.+24     	; 0x2840 <__mulsf3+0x18c>
    2828:	44 0f       	add	r20, r20
    282a:	55 1f       	adc	r21, r21
    282c:	66 1f       	adc	r22, r22
    282e:	77 1f       	adc	r23, r23
    2830:	17 fd       	sbrc	r17, 7
    2832:	41 60       	ori	r20, 0x01	; 1
    2834:	ee 0c       	add	r14, r14
    2836:	ff 1c       	adc	r15, r15
    2838:	00 1f       	adc	r16, r16
    283a:	11 1f       	adc	r17, r17
    283c:	21 50       	subi	r18, 0x01	; 1
    283e:	30 40       	sbci	r19, 0x00	; 0
    2840:	40 30       	cpi	r20, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	59 07       	cpc	r21, r25
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	69 07       	cpc	r22, r25
    284a:	90 e4       	ldi	r25, 0x40	; 64
    284c:	79 07       	cpc	r23, r25
    284e:	60 f3       	brcs	.-40     	; 0x2828 <__mulsf3+0x174>
    2850:	2b 8f       	std	Y+27, r18	; 0x1b
    2852:	3c 8f       	std	Y+28, r19	; 0x1c
    2854:	db 01       	movw	r26, r22
    2856:	ca 01       	movw	r24, r20
    2858:	8f 77       	andi	r24, 0x7F	; 127
    285a:	90 70       	andi	r25, 0x00	; 0
    285c:	a0 70       	andi	r26, 0x00	; 0
    285e:	b0 70       	andi	r27, 0x00	; 0
    2860:	80 34       	cpi	r24, 0x40	; 64
    2862:	91 05       	cpc	r25, r1
    2864:	a1 05       	cpc	r26, r1
    2866:	b1 05       	cpc	r27, r1
    2868:	61 f4       	brne	.+24     	; 0x2882 <__mulsf3+0x1ce>
    286a:	47 fd       	sbrc	r20, 7
    286c:	0a c0       	rjmp	.+20     	; 0x2882 <__mulsf3+0x1ce>
    286e:	e1 14       	cp	r14, r1
    2870:	f1 04       	cpc	r15, r1
    2872:	01 05       	cpc	r16, r1
    2874:	11 05       	cpc	r17, r1
    2876:	29 f0       	breq	.+10     	; 0x2882 <__mulsf3+0x1ce>
    2878:	40 5c       	subi	r20, 0xC0	; 192
    287a:	5f 4f       	sbci	r21, 0xFF	; 255
    287c:	6f 4f       	sbci	r22, 0xFF	; 255
    287e:	7f 4f       	sbci	r23, 0xFF	; 255
    2880:	40 78       	andi	r20, 0x80	; 128
    2882:	1a 8e       	std	Y+26, r1	; 0x1a
    2884:	fe 17       	cp	r31, r30
    2886:	11 f0       	breq	.+4      	; 0x288c <__mulsf3+0x1d8>
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	8a 8f       	std	Y+26, r24	; 0x1a
    288c:	4d 8f       	std	Y+29, r20	; 0x1d
    288e:	5e 8f       	std	Y+30, r21	; 0x1e
    2890:	6f 8f       	std	Y+31, r22	; 0x1f
    2892:	78 a3       	std	Y+32, r23	; 0x20
    2894:	83 e0       	ldi	r24, 0x03	; 3
    2896:	89 8f       	std	Y+25, r24	; 0x19
    2898:	ce 01       	movw	r24, r28
    289a:	49 96       	adiw	r24, 0x19	; 25
    289c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__pack_f>
    28a0:	a0 96       	adiw	r28, 0x20	; 32
    28a2:	e2 e1       	ldi	r30, 0x12	; 18
    28a4:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__>

000028a8 <__divsf3>:
    28a8:	a8 e1       	ldi	r26, 0x18	; 24
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	ea e5       	ldi	r30, 0x5A	; 90
    28ae:	f4 e1       	ldi	r31, 0x14	; 20
    28b0:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__prologue_saves__+0x10>
    28b4:	69 83       	std	Y+1, r22	; 0x01
    28b6:	7a 83       	std	Y+2, r23	; 0x02
    28b8:	8b 83       	std	Y+3, r24	; 0x03
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	2d 83       	std	Y+5, r18	; 0x05
    28be:	3e 83       	std	Y+6, r19	; 0x06
    28c0:	4f 83       	std	Y+7, r20	; 0x07
    28c2:	58 87       	std	Y+8, r21	; 0x08
    28c4:	b9 e0       	ldi	r27, 0x09	; 9
    28c6:	eb 2e       	mov	r14, r27
    28c8:	f1 2c       	mov	r15, r1
    28ca:	ec 0e       	add	r14, r28
    28cc:	fd 1e       	adc	r15, r29
    28ce:	ce 01       	movw	r24, r28
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	b7 01       	movw	r22, r14
    28d4:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    28d8:	8e 01       	movw	r16, r28
    28da:	0f 5e       	subi	r16, 0xEF	; 239
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	ce 01       	movw	r24, r28
    28e0:	05 96       	adiw	r24, 0x05	; 5
    28e2:	b8 01       	movw	r22, r16
    28e4:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    28e8:	29 85       	ldd	r18, Y+9	; 0x09
    28ea:	22 30       	cpi	r18, 0x02	; 2
    28ec:	08 f4       	brcc	.+2      	; 0x28f0 <__divsf3+0x48>
    28ee:	7e c0       	rjmp	.+252    	; 0x29ec <__divsf3+0x144>
    28f0:	39 89       	ldd	r19, Y+17	; 0x11
    28f2:	32 30       	cpi	r19, 0x02	; 2
    28f4:	10 f4       	brcc	.+4      	; 0x28fa <__divsf3+0x52>
    28f6:	b8 01       	movw	r22, r16
    28f8:	7c c0       	rjmp	.+248    	; 0x29f2 <__divsf3+0x14a>
    28fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fc:	9a 89       	ldd	r25, Y+18	; 0x12
    28fe:	89 27       	eor	r24, r25
    2900:	8a 87       	std	Y+10, r24	; 0x0a
    2902:	24 30       	cpi	r18, 0x04	; 4
    2904:	11 f0       	breq	.+4      	; 0x290a <__divsf3+0x62>
    2906:	22 30       	cpi	r18, 0x02	; 2
    2908:	31 f4       	brne	.+12     	; 0x2916 <__divsf3+0x6e>
    290a:	23 17       	cp	r18, r19
    290c:	09 f0       	breq	.+2      	; 0x2910 <__divsf3+0x68>
    290e:	6e c0       	rjmp	.+220    	; 0x29ec <__divsf3+0x144>
    2910:	64 e6       	ldi	r22, 0x64	; 100
    2912:	71 e0       	ldi	r23, 0x01	; 1
    2914:	6e c0       	rjmp	.+220    	; 0x29f2 <__divsf3+0x14a>
    2916:	34 30       	cpi	r19, 0x04	; 4
    2918:	39 f4       	brne	.+14     	; 0x2928 <__divsf3+0x80>
    291a:	1d 86       	std	Y+13, r1	; 0x0d
    291c:	1e 86       	std	Y+14, r1	; 0x0e
    291e:	1f 86       	std	Y+15, r1	; 0x0f
    2920:	18 8a       	std	Y+16, r1	; 0x10
    2922:	1c 86       	std	Y+12, r1	; 0x0c
    2924:	1b 86       	std	Y+11, r1	; 0x0b
    2926:	04 c0       	rjmp	.+8      	; 0x2930 <__divsf3+0x88>
    2928:	32 30       	cpi	r19, 0x02	; 2
    292a:	21 f4       	brne	.+8      	; 0x2934 <__divsf3+0x8c>
    292c:	84 e0       	ldi	r24, 0x04	; 4
    292e:	89 87       	std	Y+9, r24	; 0x09
    2930:	b7 01       	movw	r22, r14
    2932:	5f c0       	rjmp	.+190    	; 0x29f2 <__divsf3+0x14a>
    2934:	2b 85       	ldd	r18, Y+11	; 0x0b
    2936:	3c 85       	ldd	r19, Y+12	; 0x0c
    2938:	8b 89       	ldd	r24, Y+19	; 0x13
    293a:	9c 89       	ldd	r25, Y+20	; 0x14
    293c:	28 1b       	sub	r18, r24
    293e:	39 0b       	sbc	r19, r25
    2940:	3c 87       	std	Y+12, r19	; 0x0c
    2942:	2b 87       	std	Y+11, r18	; 0x0b
    2944:	ed 84       	ldd	r14, Y+13	; 0x0d
    2946:	fe 84       	ldd	r15, Y+14	; 0x0e
    2948:	0f 85       	ldd	r16, Y+15	; 0x0f
    294a:	18 89       	ldd	r17, Y+16	; 0x10
    294c:	ad 88       	ldd	r10, Y+21	; 0x15
    294e:	be 88       	ldd	r11, Y+22	; 0x16
    2950:	cf 88       	ldd	r12, Y+23	; 0x17
    2952:	d8 8c       	ldd	r13, Y+24	; 0x18
    2954:	ea 14       	cp	r14, r10
    2956:	fb 04       	cpc	r15, r11
    2958:	0c 05       	cpc	r16, r12
    295a:	1d 05       	cpc	r17, r13
    295c:	40 f4       	brcc	.+16     	; 0x296e <__divsf3+0xc6>
    295e:	ee 0c       	add	r14, r14
    2960:	ff 1c       	adc	r15, r15
    2962:	00 1f       	adc	r16, r16
    2964:	11 1f       	adc	r17, r17
    2966:	21 50       	subi	r18, 0x01	; 1
    2968:	30 40       	sbci	r19, 0x00	; 0
    296a:	3c 87       	std	Y+12, r19	; 0x0c
    296c:	2b 87       	std	Y+11, r18	; 0x0b
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	a0 e0       	ldi	r26, 0x00	; 0
    297c:	b0 e4       	ldi	r27, 0x40	; 64
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	ea 14       	cp	r14, r10
    2984:	fb 04       	cpc	r15, r11
    2986:	0c 05       	cpc	r16, r12
    2988:	1d 05       	cpc	r17, r13
    298a:	40 f0       	brcs	.+16     	; 0x299c <__divsf3+0xf4>
    298c:	28 2b       	or	r18, r24
    298e:	39 2b       	or	r19, r25
    2990:	4a 2b       	or	r20, r26
    2992:	5b 2b       	or	r21, r27
    2994:	ea 18       	sub	r14, r10
    2996:	fb 08       	sbc	r15, r11
    2998:	0c 09       	sbc	r16, r12
    299a:	1d 09       	sbc	r17, r13
    299c:	b6 95       	lsr	r27
    299e:	a7 95       	ror	r26
    29a0:	97 95       	ror	r25
    29a2:	87 95       	ror	r24
    29a4:	ee 0c       	add	r14, r14
    29a6:	ff 1c       	adc	r15, r15
    29a8:	00 1f       	adc	r16, r16
    29aa:	11 1f       	adc	r17, r17
    29ac:	6f 5f       	subi	r22, 0xFF	; 255
    29ae:	7f 4f       	sbci	r23, 0xFF	; 255
    29b0:	6f 31       	cpi	r22, 0x1F	; 31
    29b2:	71 05       	cpc	r23, r1
    29b4:	31 f7       	brne	.-52     	; 0x2982 <__divsf3+0xda>
    29b6:	da 01       	movw	r26, r20
    29b8:	c9 01       	movw	r24, r18
    29ba:	8f 77       	andi	r24, 0x7F	; 127
    29bc:	90 70       	andi	r25, 0x00	; 0
    29be:	a0 70       	andi	r26, 0x00	; 0
    29c0:	b0 70       	andi	r27, 0x00	; 0
    29c2:	80 34       	cpi	r24, 0x40	; 64
    29c4:	91 05       	cpc	r25, r1
    29c6:	a1 05       	cpc	r26, r1
    29c8:	b1 05       	cpc	r27, r1
    29ca:	61 f4       	brne	.+24     	; 0x29e4 <__divsf3+0x13c>
    29cc:	27 fd       	sbrc	r18, 7
    29ce:	0a c0       	rjmp	.+20     	; 0x29e4 <__divsf3+0x13c>
    29d0:	e1 14       	cp	r14, r1
    29d2:	f1 04       	cpc	r15, r1
    29d4:	01 05       	cpc	r16, r1
    29d6:	11 05       	cpc	r17, r1
    29d8:	29 f0       	breq	.+10     	; 0x29e4 <__divsf3+0x13c>
    29da:	20 5c       	subi	r18, 0xC0	; 192
    29dc:	3f 4f       	sbci	r19, 0xFF	; 255
    29de:	4f 4f       	sbci	r20, 0xFF	; 255
    29e0:	5f 4f       	sbci	r21, 0xFF	; 255
    29e2:	20 78       	andi	r18, 0x80	; 128
    29e4:	2d 87       	std	Y+13, r18	; 0x0d
    29e6:	3e 87       	std	Y+14, r19	; 0x0e
    29e8:	4f 87       	std	Y+15, r20	; 0x0f
    29ea:	58 8b       	std	Y+16, r21	; 0x10
    29ec:	be 01       	movw	r22, r28
    29ee:	67 5f       	subi	r22, 0xF7	; 247
    29f0:	7f 4f       	sbci	r23, 0xFF	; 255
    29f2:	cb 01       	movw	r24, r22
    29f4:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__pack_f>
    29f8:	68 96       	adiw	r28, 0x18	; 24
    29fa:	ea e0       	ldi	r30, 0x0A	; 10
    29fc:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__epilogue_restores__+0x10>

00002a00 <__gtsf2>:
    2a00:	a8 e1       	ldi	r26, 0x18	; 24
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e6 e0       	ldi	r30, 0x06	; 6
    2a06:	f5 e1       	ldi	r31, 0x15	; 21
    2a08:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
    2a0c:	69 83       	std	Y+1, r22	; 0x01
    2a0e:	7a 83       	std	Y+2, r23	; 0x02
    2a10:	8b 83       	std	Y+3, r24	; 0x03
    2a12:	9c 83       	std	Y+4, r25	; 0x04
    2a14:	2d 83       	std	Y+5, r18	; 0x05
    2a16:	3e 83       	std	Y+6, r19	; 0x06
    2a18:	4f 83       	std	Y+7, r20	; 0x07
    2a1a:	58 87       	std	Y+8, r21	; 0x08
    2a1c:	89 e0       	ldi	r24, 0x09	; 9
    2a1e:	e8 2e       	mov	r14, r24
    2a20:	f1 2c       	mov	r15, r1
    2a22:	ec 0e       	add	r14, r28
    2a24:	fd 1e       	adc	r15, r29
    2a26:	ce 01       	movw	r24, r28
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	b7 01       	movw	r22, r14
    2a2c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    2a30:	8e 01       	movw	r16, r28
    2a32:	0f 5e       	subi	r16, 0xEF	; 239
    2a34:	1f 4f       	sbci	r17, 0xFF	; 255
    2a36:	ce 01       	movw	r24, r28
    2a38:	05 96       	adiw	r24, 0x05	; 5
    2a3a:	b8 01       	movw	r22, r16
    2a3c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    2a40:	89 85       	ldd	r24, Y+9	; 0x09
    2a42:	82 30       	cpi	r24, 0x02	; 2
    2a44:	40 f0       	brcs	.+16     	; 0x2a56 <__gtsf2+0x56>
    2a46:	89 89       	ldd	r24, Y+17	; 0x11
    2a48:	82 30       	cpi	r24, 0x02	; 2
    2a4a:	28 f0       	brcs	.+10     	; 0x2a56 <__gtsf2+0x56>
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	b8 01       	movw	r22, r16
    2a50:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__fpcmp_parts_f>
    2a54:	01 c0       	rjmp	.+2      	; 0x2a58 <__gtsf2+0x58>
    2a56:	8f ef       	ldi	r24, 0xFF	; 255
    2a58:	68 96       	adiw	r28, 0x18	; 24
    2a5a:	e6 e0       	ldi	r30, 0x06	; 6
    2a5c:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

00002a60 <__gesf2>:
    2a60:	a8 e1       	ldi	r26, 0x18	; 24
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e6 e3       	ldi	r30, 0x36	; 54
    2a66:	f5 e1       	ldi	r31, 0x15	; 21
    2a68:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
    2a6c:	69 83       	std	Y+1, r22	; 0x01
    2a6e:	7a 83       	std	Y+2, r23	; 0x02
    2a70:	8b 83       	std	Y+3, r24	; 0x03
    2a72:	9c 83       	std	Y+4, r25	; 0x04
    2a74:	2d 83       	std	Y+5, r18	; 0x05
    2a76:	3e 83       	std	Y+6, r19	; 0x06
    2a78:	4f 83       	std	Y+7, r20	; 0x07
    2a7a:	58 87       	std	Y+8, r21	; 0x08
    2a7c:	89 e0       	ldi	r24, 0x09	; 9
    2a7e:	e8 2e       	mov	r14, r24
    2a80:	f1 2c       	mov	r15, r1
    2a82:	ec 0e       	add	r14, r28
    2a84:	fd 1e       	adc	r15, r29
    2a86:	ce 01       	movw	r24, r28
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	b7 01       	movw	r22, r14
    2a8c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    2a90:	8e 01       	movw	r16, r28
    2a92:	0f 5e       	subi	r16, 0xEF	; 239
    2a94:	1f 4f       	sbci	r17, 0xFF	; 255
    2a96:	ce 01       	movw	r24, r28
    2a98:	05 96       	adiw	r24, 0x05	; 5
    2a9a:	b8 01       	movw	r22, r16
    2a9c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    2aa0:	89 85       	ldd	r24, Y+9	; 0x09
    2aa2:	82 30       	cpi	r24, 0x02	; 2
    2aa4:	40 f0       	brcs	.+16     	; 0x2ab6 <__gesf2+0x56>
    2aa6:	89 89       	ldd	r24, Y+17	; 0x11
    2aa8:	82 30       	cpi	r24, 0x02	; 2
    2aaa:	28 f0       	brcs	.+10     	; 0x2ab6 <__gesf2+0x56>
    2aac:	c7 01       	movw	r24, r14
    2aae:	b8 01       	movw	r22, r16
    2ab0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__fpcmp_parts_f>
    2ab4:	01 c0       	rjmp	.+2      	; 0x2ab8 <__gesf2+0x58>
    2ab6:	8f ef       	ldi	r24, 0xFF	; 255
    2ab8:	68 96       	adiw	r28, 0x18	; 24
    2aba:	e6 e0       	ldi	r30, 0x06	; 6
    2abc:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

00002ac0 <__ltsf2>:
    2ac0:	a8 e1       	ldi	r26, 0x18	; 24
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e6 e6       	ldi	r30, 0x66	; 102
    2ac6:	f5 e1       	ldi	r31, 0x15	; 21
    2ac8:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
    2acc:	69 83       	std	Y+1, r22	; 0x01
    2ace:	7a 83       	std	Y+2, r23	; 0x02
    2ad0:	8b 83       	std	Y+3, r24	; 0x03
    2ad2:	9c 83       	std	Y+4, r25	; 0x04
    2ad4:	2d 83       	std	Y+5, r18	; 0x05
    2ad6:	3e 83       	std	Y+6, r19	; 0x06
    2ad8:	4f 83       	std	Y+7, r20	; 0x07
    2ada:	58 87       	std	Y+8, r21	; 0x08
    2adc:	89 e0       	ldi	r24, 0x09	; 9
    2ade:	e8 2e       	mov	r14, r24
    2ae0:	f1 2c       	mov	r15, r1
    2ae2:	ec 0e       	add	r14, r28
    2ae4:	fd 1e       	adc	r15, r29
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	01 96       	adiw	r24, 0x01	; 1
    2aea:	b7 01       	movw	r22, r14
    2aec:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    2af0:	8e 01       	movw	r16, r28
    2af2:	0f 5e       	subi	r16, 0xEF	; 239
    2af4:	1f 4f       	sbci	r17, 0xFF	; 255
    2af6:	ce 01       	movw	r24, r28
    2af8:	05 96       	adiw	r24, 0x05	; 5
    2afa:	b8 01       	movw	r22, r16
    2afc:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    2b00:	89 85       	ldd	r24, Y+9	; 0x09
    2b02:	82 30       	cpi	r24, 0x02	; 2
    2b04:	40 f0       	brcs	.+16     	; 0x2b16 <__ltsf2+0x56>
    2b06:	89 89       	ldd	r24, Y+17	; 0x11
    2b08:	82 30       	cpi	r24, 0x02	; 2
    2b0a:	28 f0       	brcs	.+10     	; 0x2b16 <__ltsf2+0x56>
    2b0c:	c7 01       	movw	r24, r14
    2b0e:	b8 01       	movw	r22, r16
    2b10:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__fpcmp_parts_f>
    2b14:	01 c0       	rjmp	.+2      	; 0x2b18 <__ltsf2+0x58>
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	68 96       	adiw	r28, 0x18	; 24
    2b1a:	e6 e0       	ldi	r30, 0x06	; 6
    2b1c:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

00002b20 <__fixsfsi>:
    2b20:	ac e0       	ldi	r26, 0x0C	; 12
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e6 e9       	ldi	r30, 0x96	; 150
    2b26:	f5 e1       	ldi	r31, 0x15	; 21
    2b28:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__prologue_saves__+0x20>
    2b2c:	69 83       	std	Y+1, r22	; 0x01
    2b2e:	7a 83       	std	Y+2, r23	; 0x02
    2b30:	8b 83       	std	Y+3, r24	; 0x03
    2b32:	9c 83       	std	Y+4, r25	; 0x04
    2b34:	ce 01       	movw	r24, r28
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	be 01       	movw	r22, r28
    2b3a:	6b 5f       	subi	r22, 0xFB	; 251
    2b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__unpack_f>
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	82 30       	cpi	r24, 0x02	; 2
    2b46:	61 f1       	breq	.+88     	; 0x2ba0 <__fixsfsi+0x80>
    2b48:	82 30       	cpi	r24, 0x02	; 2
    2b4a:	50 f1       	brcs	.+84     	; 0x2ba0 <__fixsfsi+0x80>
    2b4c:	84 30       	cpi	r24, 0x04	; 4
    2b4e:	21 f4       	brne	.+8      	; 0x2b58 <__fixsfsi+0x38>
    2b50:	8e 81       	ldd	r24, Y+6	; 0x06
    2b52:	88 23       	and	r24, r24
    2b54:	51 f1       	breq	.+84     	; 0x2baa <__fixsfsi+0x8a>
    2b56:	2e c0       	rjmp	.+92     	; 0x2bb4 <__fixsfsi+0x94>
    2b58:	2f 81       	ldd	r18, Y+7	; 0x07
    2b5a:	38 85       	ldd	r19, Y+8	; 0x08
    2b5c:	37 fd       	sbrc	r19, 7
    2b5e:	20 c0       	rjmp	.+64     	; 0x2ba0 <__fixsfsi+0x80>
    2b60:	6e 81       	ldd	r22, Y+6	; 0x06
    2b62:	2f 31       	cpi	r18, 0x1F	; 31
    2b64:	31 05       	cpc	r19, r1
    2b66:	1c f0       	brlt	.+6      	; 0x2b6e <__fixsfsi+0x4e>
    2b68:	66 23       	and	r22, r22
    2b6a:	f9 f0       	breq	.+62     	; 0x2baa <__fixsfsi+0x8a>
    2b6c:	23 c0       	rjmp	.+70     	; 0x2bb4 <__fixsfsi+0x94>
    2b6e:	8e e1       	ldi	r24, 0x1E	; 30
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	82 1b       	sub	r24, r18
    2b74:	93 0b       	sbc	r25, r19
    2b76:	29 85       	ldd	r18, Y+9	; 0x09
    2b78:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b7a:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b7c:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b7e:	04 c0       	rjmp	.+8      	; 0x2b88 <__fixsfsi+0x68>
    2b80:	56 95       	lsr	r21
    2b82:	47 95       	ror	r20
    2b84:	37 95       	ror	r19
    2b86:	27 95       	ror	r18
    2b88:	8a 95       	dec	r24
    2b8a:	d2 f7       	brpl	.-12     	; 0x2b80 <__fixsfsi+0x60>
    2b8c:	66 23       	and	r22, r22
    2b8e:	b1 f0       	breq	.+44     	; 0x2bbc <__fixsfsi+0x9c>
    2b90:	50 95       	com	r21
    2b92:	40 95       	com	r20
    2b94:	30 95       	com	r19
    2b96:	21 95       	neg	r18
    2b98:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9a:	4f 4f       	sbci	r20, 0xFF	; 255
    2b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b9e:	0e c0       	rjmp	.+28     	; 0x2bbc <__fixsfsi+0x9c>
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	09 c0       	rjmp	.+18     	; 0x2bbc <__fixsfsi+0x9c>
    2baa:	2f ef       	ldi	r18, 0xFF	; 255
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f ef       	ldi	r20, 0xFF	; 255
    2bb0:	5f e7       	ldi	r21, 0x7F	; 127
    2bb2:	04 c0       	rjmp	.+8      	; 0x2bbc <__fixsfsi+0x9c>
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	50 e8       	ldi	r21, 0x80	; 128
    2bbc:	b9 01       	movw	r22, r18
    2bbe:	ca 01       	movw	r24, r20
    2bc0:	2c 96       	adiw	r28, 0x0c	; 12
    2bc2:	e2 e0       	ldi	r30, 0x02	; 2
    2bc4:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__epilogue_restores__+0x20>

00002bc8 <__pack_f>:
    2bc8:	df 92       	push	r13
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e4 80       	ldd	r14, Z+4	; 0x04
    2bd6:	f5 80       	ldd	r15, Z+5	; 0x05
    2bd8:	06 81       	ldd	r16, Z+6	; 0x06
    2bda:	17 81       	ldd	r17, Z+7	; 0x07
    2bdc:	d1 80       	ldd	r13, Z+1	; 0x01
    2bde:	80 81       	ld	r24, Z
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	58 f4       	brcc	.+22     	; 0x2bfa <__pack_f+0x32>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a0 e1       	ldi	r26, 0x10	; 16
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e8 2a       	or	r14, r24
    2bee:	f9 2a       	or	r15, r25
    2bf0:	0a 2b       	or	r16, r26
    2bf2:	1b 2b       	or	r17, r27
    2bf4:	ef ef       	ldi	r30, 0xFF	; 255
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	a6 c0       	rjmp	.+332    	; 0x2d46 <__pack_f+0x17e>
    2bfa:	84 30       	cpi	r24, 0x04	; 4
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <__pack_f+0x38>
    2bfe:	9e c0       	rjmp	.+316    	; 0x2d3c <__pack_f+0x174>
    2c00:	82 30       	cpi	r24, 0x02	; 2
    2c02:	19 f4       	brne	.+6      	; 0x2c0a <__pack_f+0x42>
    2c04:	e0 e0       	ldi	r30, 0x00	; 0
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	9b c0       	rjmp	.+310    	; 0x2d40 <__pack_f+0x178>
    2c0a:	e1 14       	cp	r14, r1
    2c0c:	f1 04       	cpc	r15, r1
    2c0e:	01 05       	cpc	r16, r1
    2c10:	11 05       	cpc	r17, r1
    2c12:	19 f4       	brne	.+6      	; 0x2c1a <__pack_f+0x52>
    2c14:	e0 e0       	ldi	r30, 0x00	; 0
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	96 c0       	rjmp	.+300    	; 0x2d46 <__pack_f+0x17e>
    2c1a:	62 81       	ldd	r22, Z+2	; 0x02
    2c1c:	73 81       	ldd	r23, Z+3	; 0x03
    2c1e:	9f ef       	ldi	r25, 0xFF	; 255
    2c20:	62 38       	cpi	r22, 0x82	; 130
    2c22:	79 07       	cpc	r23, r25
    2c24:	0c f0       	brlt	.+2      	; 0x2c28 <__pack_f+0x60>
    2c26:	5b c0       	rjmp	.+182    	; 0x2cde <__pack_f+0x116>
    2c28:	22 e8       	ldi	r18, 0x82	; 130
    2c2a:	3f ef       	ldi	r19, 0xFF	; 255
    2c2c:	26 1b       	sub	r18, r22
    2c2e:	37 0b       	sbc	r19, r23
    2c30:	2a 31       	cpi	r18, 0x1A	; 26
    2c32:	31 05       	cpc	r19, r1
    2c34:	2c f0       	brlt	.+10     	; 0x2c40 <__pack_f+0x78>
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	2a c0       	rjmp	.+84     	; 0x2c94 <__pack_f+0xcc>
    2c40:	b8 01       	movw	r22, r16
    2c42:	a7 01       	movw	r20, r14
    2c44:	02 2e       	mov	r0, r18
    2c46:	04 c0       	rjmp	.+8      	; 0x2c50 <__pack_f+0x88>
    2c48:	76 95       	lsr	r23
    2c4a:	67 95       	ror	r22
    2c4c:	57 95       	ror	r21
    2c4e:	47 95       	ror	r20
    2c50:	0a 94       	dec	r0
    2c52:	d2 f7       	brpl	.-12     	; 0x2c48 <__pack_f+0x80>
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	a0 e0       	ldi	r26, 0x00	; 0
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	04 c0       	rjmp	.+8      	; 0x2c66 <__pack_f+0x9e>
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	aa 1f       	adc	r26, r26
    2c64:	bb 1f       	adc	r27, r27
    2c66:	2a 95       	dec	r18
    2c68:	d2 f7       	brpl	.-12     	; 0x2c5e <__pack_f+0x96>
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	a1 09       	sbc	r26, r1
    2c6e:	b1 09       	sbc	r27, r1
    2c70:	8e 21       	and	r24, r14
    2c72:	9f 21       	and	r25, r15
    2c74:	a0 23       	and	r26, r16
    2c76:	b1 23       	and	r27, r17
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	a1 05       	cpc	r26, r1
    2c7c:	b1 05       	cpc	r27, r1
    2c7e:	21 f0       	breq	.+8      	; 0x2c88 <__pack_f+0xc0>
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	a0 e0       	ldi	r26, 0x00	; 0
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	9a 01       	movw	r18, r20
    2c8a:	ab 01       	movw	r20, r22
    2c8c:	28 2b       	or	r18, r24
    2c8e:	39 2b       	or	r19, r25
    2c90:	4a 2b       	or	r20, r26
    2c92:	5b 2b       	or	r21, r27
    2c94:	da 01       	movw	r26, r20
    2c96:	c9 01       	movw	r24, r18
    2c98:	8f 77       	andi	r24, 0x7F	; 127
    2c9a:	90 70       	andi	r25, 0x00	; 0
    2c9c:	a0 70       	andi	r26, 0x00	; 0
    2c9e:	b0 70       	andi	r27, 0x00	; 0
    2ca0:	80 34       	cpi	r24, 0x40	; 64
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	a1 05       	cpc	r26, r1
    2ca6:	b1 05       	cpc	r27, r1
    2ca8:	39 f4       	brne	.+14     	; 0x2cb8 <__pack_f+0xf0>
    2caa:	27 ff       	sbrs	r18, 7
    2cac:	09 c0       	rjmp	.+18     	; 0x2cc0 <__pack_f+0xf8>
    2cae:	20 5c       	subi	r18, 0xC0	; 192
    2cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb2:	4f 4f       	sbci	r20, 0xFF	; 255
    2cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb6:	04 c0       	rjmp	.+8      	; 0x2cc0 <__pack_f+0xf8>
    2cb8:	21 5c       	subi	r18, 0xC1	; 193
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbc:	4f 4f       	sbci	r20, 0xFF	; 255
    2cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc0:	e0 e0       	ldi	r30, 0x00	; 0
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	20 30       	cpi	r18, 0x00	; 0
    2cc6:	a0 e0       	ldi	r26, 0x00	; 0
    2cc8:	3a 07       	cpc	r19, r26
    2cca:	a0 e0       	ldi	r26, 0x00	; 0
    2ccc:	4a 07       	cpc	r20, r26
    2cce:	a0 e4       	ldi	r26, 0x40	; 64
    2cd0:	5a 07       	cpc	r21, r26
    2cd2:	10 f0       	brcs	.+4      	; 0x2cd8 <__pack_f+0x110>
    2cd4:	e1 e0       	ldi	r30, 0x01	; 1
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	79 01       	movw	r14, r18
    2cda:	8a 01       	movw	r16, r20
    2cdc:	27 c0       	rjmp	.+78     	; 0x2d2c <__pack_f+0x164>
    2cde:	60 38       	cpi	r22, 0x80	; 128
    2ce0:	71 05       	cpc	r23, r1
    2ce2:	64 f5       	brge	.+88     	; 0x2d3c <__pack_f+0x174>
    2ce4:	fb 01       	movw	r30, r22
    2ce6:	e1 58       	subi	r30, 0x81	; 129
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	d8 01       	movw	r26, r16
    2cec:	c7 01       	movw	r24, r14
    2cee:	8f 77       	andi	r24, 0x7F	; 127
    2cf0:	90 70       	andi	r25, 0x00	; 0
    2cf2:	a0 70       	andi	r26, 0x00	; 0
    2cf4:	b0 70       	andi	r27, 0x00	; 0
    2cf6:	80 34       	cpi	r24, 0x40	; 64
    2cf8:	91 05       	cpc	r25, r1
    2cfa:	a1 05       	cpc	r26, r1
    2cfc:	b1 05       	cpc	r27, r1
    2cfe:	39 f4       	brne	.+14     	; 0x2d0e <__pack_f+0x146>
    2d00:	e7 fe       	sbrs	r14, 7
    2d02:	0d c0       	rjmp	.+26     	; 0x2d1e <__pack_f+0x156>
    2d04:	80 e4       	ldi	r24, 0x40	; 64
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	a0 e0       	ldi	r26, 0x00	; 0
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	04 c0       	rjmp	.+8      	; 0x2d16 <__pack_f+0x14e>
    2d0e:	8f e3       	ldi	r24, 0x3F	; 63
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	a0 e0       	ldi	r26, 0x00	; 0
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e8 0e       	add	r14, r24
    2d18:	f9 1e       	adc	r15, r25
    2d1a:	0a 1f       	adc	r16, r26
    2d1c:	1b 1f       	adc	r17, r27
    2d1e:	17 ff       	sbrs	r17, 7
    2d20:	05 c0       	rjmp	.+10     	; 0x2d2c <__pack_f+0x164>
    2d22:	16 95       	lsr	r17
    2d24:	07 95       	ror	r16
    2d26:	f7 94       	ror	r15
    2d28:	e7 94       	ror	r14
    2d2a:	31 96       	adiw	r30, 0x01	; 1
    2d2c:	87 e0       	ldi	r24, 0x07	; 7
    2d2e:	16 95       	lsr	r17
    2d30:	07 95       	ror	r16
    2d32:	f7 94       	ror	r15
    2d34:	e7 94       	ror	r14
    2d36:	8a 95       	dec	r24
    2d38:	d1 f7       	brne	.-12     	; 0x2d2e <__pack_f+0x166>
    2d3a:	05 c0       	rjmp	.+10     	; 0x2d46 <__pack_f+0x17e>
    2d3c:	ef ef       	ldi	r30, 0xFF	; 255
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	ee 24       	eor	r14, r14
    2d42:	ff 24       	eor	r15, r15
    2d44:	87 01       	movw	r16, r14
    2d46:	6e 2f       	mov	r22, r30
    2d48:	67 95       	ror	r22
    2d4a:	66 27       	eor	r22, r22
    2d4c:	67 95       	ror	r22
    2d4e:	90 2f       	mov	r25, r16
    2d50:	9f 77       	andi	r25, 0x7F	; 127
    2d52:	d7 94       	ror	r13
    2d54:	dd 24       	eor	r13, r13
    2d56:	d7 94       	ror	r13
    2d58:	8e 2f       	mov	r24, r30
    2d5a:	86 95       	lsr	r24
    2d5c:	49 2f       	mov	r20, r25
    2d5e:	46 2b       	or	r20, r22
    2d60:	58 2f       	mov	r21, r24
    2d62:	5d 29       	or	r21, r13
    2d64:	b7 01       	movw	r22, r14
    2d66:	ca 01       	movw	r24, r20
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	ff 90       	pop	r15
    2d6e:	ef 90       	pop	r14
    2d70:	df 90       	pop	r13
    2d72:	08 95       	ret

00002d74 <__unpack_f>:
    2d74:	fc 01       	movw	r30, r24
    2d76:	db 01       	movw	r26, r22
    2d78:	40 81       	ld	r20, Z
    2d7a:	51 81       	ldd	r21, Z+1	; 0x01
    2d7c:	22 81       	ldd	r18, Z+2	; 0x02
    2d7e:	62 2f       	mov	r22, r18
    2d80:	6f 77       	andi	r22, 0x7F	; 127
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	22 1f       	adc	r18, r18
    2d86:	22 27       	eor	r18, r18
    2d88:	22 1f       	adc	r18, r18
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	89 2f       	mov	r24, r25
    2d8e:	88 0f       	add	r24, r24
    2d90:	82 2b       	or	r24, r18
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	99 1f       	adc	r25, r25
    2d98:	99 27       	eor	r25, r25
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	11 96       	adiw	r26, 0x01	; 1
    2d9e:	9c 93       	st	X, r25
    2da0:	11 97       	sbiw	r26, 0x01	; 1
    2da2:	21 15       	cp	r18, r1
    2da4:	31 05       	cpc	r19, r1
    2da6:	a9 f5       	brne	.+106    	; 0x2e12 <__unpack_f+0x9e>
    2da8:	41 15       	cp	r20, r1
    2daa:	51 05       	cpc	r21, r1
    2dac:	61 05       	cpc	r22, r1
    2dae:	71 05       	cpc	r23, r1
    2db0:	11 f4       	brne	.+4      	; 0x2db6 <__unpack_f+0x42>
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	37 c0       	rjmp	.+110    	; 0x2e24 <__unpack_f+0xb0>
    2db6:	82 e8       	ldi	r24, 0x82	; 130
    2db8:	9f ef       	ldi	r25, 0xFF	; 255
    2dba:	13 96       	adiw	r26, 0x03	; 3
    2dbc:	9c 93       	st	X, r25
    2dbe:	8e 93       	st	-X, r24
    2dc0:	12 97       	sbiw	r26, 0x02	; 2
    2dc2:	9a 01       	movw	r18, r20
    2dc4:	ab 01       	movw	r20, r22
    2dc6:	67 e0       	ldi	r22, 0x07	; 7
    2dc8:	22 0f       	add	r18, r18
    2dca:	33 1f       	adc	r19, r19
    2dcc:	44 1f       	adc	r20, r20
    2dce:	55 1f       	adc	r21, r21
    2dd0:	6a 95       	dec	r22
    2dd2:	d1 f7       	brne	.-12     	; 0x2dc8 <__unpack_f+0x54>
    2dd4:	83 e0       	ldi	r24, 0x03	; 3
    2dd6:	8c 93       	st	X, r24
    2dd8:	0d c0       	rjmp	.+26     	; 0x2df4 <__unpack_f+0x80>
    2dda:	22 0f       	add	r18, r18
    2ddc:	33 1f       	adc	r19, r19
    2dde:	44 1f       	adc	r20, r20
    2de0:	55 1f       	adc	r21, r21
    2de2:	12 96       	adiw	r26, 0x02	; 2
    2de4:	8d 91       	ld	r24, X+
    2de6:	9c 91       	ld	r25, X
    2de8:	13 97       	sbiw	r26, 0x03	; 3
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	13 96       	adiw	r26, 0x03	; 3
    2dee:	9c 93       	st	X, r25
    2df0:	8e 93       	st	-X, r24
    2df2:	12 97       	sbiw	r26, 0x02	; 2
    2df4:	20 30       	cpi	r18, 0x00	; 0
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	38 07       	cpc	r19, r24
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	48 07       	cpc	r20, r24
    2dfe:	80 e4       	ldi	r24, 0x40	; 64
    2e00:	58 07       	cpc	r21, r24
    2e02:	58 f3       	brcs	.-42     	; 0x2dda <__unpack_f+0x66>
    2e04:	14 96       	adiw	r26, 0x04	; 4
    2e06:	2d 93       	st	X+, r18
    2e08:	3d 93       	st	X+, r19
    2e0a:	4d 93       	st	X+, r20
    2e0c:	5c 93       	st	X, r21
    2e0e:	17 97       	sbiw	r26, 0x07	; 7
    2e10:	08 95       	ret
    2e12:	2f 3f       	cpi	r18, 0xFF	; 255
    2e14:	31 05       	cpc	r19, r1
    2e16:	79 f4       	brne	.+30     	; 0x2e36 <__unpack_f+0xc2>
    2e18:	41 15       	cp	r20, r1
    2e1a:	51 05       	cpc	r21, r1
    2e1c:	61 05       	cpc	r22, r1
    2e1e:	71 05       	cpc	r23, r1
    2e20:	19 f4       	brne	.+6      	; 0x2e28 <__unpack_f+0xb4>
    2e22:	84 e0       	ldi	r24, 0x04	; 4
    2e24:	8c 93       	st	X, r24
    2e26:	08 95       	ret
    2e28:	64 ff       	sbrs	r22, 4
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <__unpack_f+0xbe>
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	8c 93       	st	X, r24
    2e30:	12 c0       	rjmp	.+36     	; 0x2e56 <__unpack_f+0xe2>
    2e32:	1c 92       	st	X, r1
    2e34:	10 c0       	rjmp	.+32     	; 0x2e56 <__unpack_f+0xe2>
    2e36:	2f 57       	subi	r18, 0x7F	; 127
    2e38:	30 40       	sbci	r19, 0x00	; 0
    2e3a:	13 96       	adiw	r26, 0x03	; 3
    2e3c:	3c 93       	st	X, r19
    2e3e:	2e 93       	st	-X, r18
    2e40:	12 97       	sbiw	r26, 0x02	; 2
    2e42:	83 e0       	ldi	r24, 0x03	; 3
    2e44:	8c 93       	st	X, r24
    2e46:	87 e0       	ldi	r24, 0x07	; 7
    2e48:	44 0f       	add	r20, r20
    2e4a:	55 1f       	adc	r21, r21
    2e4c:	66 1f       	adc	r22, r22
    2e4e:	77 1f       	adc	r23, r23
    2e50:	8a 95       	dec	r24
    2e52:	d1 f7       	brne	.-12     	; 0x2e48 <__unpack_f+0xd4>
    2e54:	70 64       	ori	r23, 0x40	; 64
    2e56:	14 96       	adiw	r26, 0x04	; 4
    2e58:	4d 93       	st	X+, r20
    2e5a:	5d 93       	st	X+, r21
    2e5c:	6d 93       	st	X+, r22
    2e5e:	7c 93       	st	X, r23
    2e60:	17 97       	sbiw	r26, 0x07	; 7
    2e62:	08 95       	ret

00002e64 <__fpcmp_parts_f>:
    2e64:	1f 93       	push	r17
    2e66:	dc 01       	movw	r26, r24
    2e68:	fb 01       	movw	r30, r22
    2e6a:	9c 91       	ld	r25, X
    2e6c:	92 30       	cpi	r25, 0x02	; 2
    2e6e:	08 f4       	brcc	.+2      	; 0x2e72 <__fpcmp_parts_f+0xe>
    2e70:	47 c0       	rjmp	.+142    	; 0x2f00 <__fpcmp_parts_f+0x9c>
    2e72:	80 81       	ld	r24, Z
    2e74:	82 30       	cpi	r24, 0x02	; 2
    2e76:	08 f4       	brcc	.+2      	; 0x2e7a <__fpcmp_parts_f+0x16>
    2e78:	43 c0       	rjmp	.+134    	; 0x2f00 <__fpcmp_parts_f+0x9c>
    2e7a:	94 30       	cpi	r25, 0x04	; 4
    2e7c:	51 f4       	brne	.+20     	; 0x2e92 <__fpcmp_parts_f+0x2e>
    2e7e:	11 96       	adiw	r26, 0x01	; 1
    2e80:	1c 91       	ld	r17, X
    2e82:	84 30       	cpi	r24, 0x04	; 4
    2e84:	99 f5       	brne	.+102    	; 0x2eec <__fpcmp_parts_f+0x88>
    2e86:	81 81       	ldd	r24, Z+1	; 0x01
    2e88:	68 2f       	mov	r22, r24
    2e8a:	70 e0       	ldi	r23, 0x00	; 0
    2e8c:	61 1b       	sub	r22, r17
    2e8e:	71 09       	sbc	r23, r1
    2e90:	3f c0       	rjmp	.+126    	; 0x2f10 <__fpcmp_parts_f+0xac>
    2e92:	84 30       	cpi	r24, 0x04	; 4
    2e94:	21 f0       	breq	.+8      	; 0x2e9e <__fpcmp_parts_f+0x3a>
    2e96:	92 30       	cpi	r25, 0x02	; 2
    2e98:	31 f4       	brne	.+12     	; 0x2ea6 <__fpcmp_parts_f+0x42>
    2e9a:	82 30       	cpi	r24, 0x02	; 2
    2e9c:	b9 f1       	breq	.+110    	; 0x2f0c <__fpcmp_parts_f+0xa8>
    2e9e:	81 81       	ldd	r24, Z+1	; 0x01
    2ea0:	88 23       	and	r24, r24
    2ea2:	89 f1       	breq	.+98     	; 0x2f06 <__fpcmp_parts_f+0xa2>
    2ea4:	2d c0       	rjmp	.+90     	; 0x2f00 <__fpcmp_parts_f+0x9c>
    2ea6:	11 96       	adiw	r26, 0x01	; 1
    2ea8:	1c 91       	ld	r17, X
    2eaa:	11 97       	sbiw	r26, 0x01	; 1
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	f1 f0       	breq	.+60     	; 0x2eec <__fpcmp_parts_f+0x88>
    2eb0:	81 81       	ldd	r24, Z+1	; 0x01
    2eb2:	18 17       	cp	r17, r24
    2eb4:	d9 f4       	brne	.+54     	; 0x2eec <__fpcmp_parts_f+0x88>
    2eb6:	12 96       	adiw	r26, 0x02	; 2
    2eb8:	2d 91       	ld	r18, X+
    2eba:	3c 91       	ld	r19, X
    2ebc:	13 97       	sbiw	r26, 0x03	; 3
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	82 17       	cp	r24, r18
    2ec4:	93 07       	cpc	r25, r19
    2ec6:	94 f0       	brlt	.+36     	; 0x2eec <__fpcmp_parts_f+0x88>
    2ec8:	28 17       	cp	r18, r24
    2eca:	39 07       	cpc	r19, r25
    2ecc:	bc f0       	brlt	.+46     	; 0x2efc <__fpcmp_parts_f+0x98>
    2ece:	14 96       	adiw	r26, 0x04	; 4
    2ed0:	8d 91       	ld	r24, X+
    2ed2:	9d 91       	ld	r25, X+
    2ed4:	0d 90       	ld	r0, X+
    2ed6:	bc 91       	ld	r27, X
    2ed8:	a0 2d       	mov	r26, r0
    2eda:	24 81       	ldd	r18, Z+4	; 0x04
    2edc:	35 81       	ldd	r19, Z+5	; 0x05
    2ede:	46 81       	ldd	r20, Z+6	; 0x06
    2ee0:	57 81       	ldd	r21, Z+7	; 0x07
    2ee2:	28 17       	cp	r18, r24
    2ee4:	39 07       	cpc	r19, r25
    2ee6:	4a 07       	cpc	r20, r26
    2ee8:	5b 07       	cpc	r21, r27
    2eea:	18 f4       	brcc	.+6      	; 0x2ef2 <__fpcmp_parts_f+0x8e>
    2eec:	11 23       	and	r17, r17
    2eee:	41 f0       	breq	.+16     	; 0x2f00 <__fpcmp_parts_f+0x9c>
    2ef0:	0a c0       	rjmp	.+20     	; 0x2f06 <__fpcmp_parts_f+0xa2>
    2ef2:	82 17       	cp	r24, r18
    2ef4:	93 07       	cpc	r25, r19
    2ef6:	a4 07       	cpc	r26, r20
    2ef8:	b5 07       	cpc	r27, r21
    2efa:	40 f4       	brcc	.+16     	; 0x2f0c <__fpcmp_parts_f+0xa8>
    2efc:	11 23       	and	r17, r17
    2efe:	19 f0       	breq	.+6      	; 0x2f06 <__fpcmp_parts_f+0xa2>
    2f00:	61 e0       	ldi	r22, 0x01	; 1
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	05 c0       	rjmp	.+10     	; 0x2f10 <__fpcmp_parts_f+0xac>
    2f06:	6f ef       	ldi	r22, 0xFF	; 255
    2f08:	7f ef       	ldi	r23, 0xFF	; 255
    2f0a:	02 c0       	rjmp	.+4      	; 0x2f10 <__fpcmp_parts_f+0xac>
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	cb 01       	movw	r24, r22
    2f12:	1f 91       	pop	r17
    2f14:	08 95       	ret

00002f16 <__prologue_saves__>:
    2f16:	2f 92       	push	r2
    2f18:	3f 92       	push	r3
    2f1a:	4f 92       	push	r4
    2f1c:	5f 92       	push	r5
    2f1e:	6f 92       	push	r6
    2f20:	7f 92       	push	r7
    2f22:	8f 92       	push	r8
    2f24:	9f 92       	push	r9
    2f26:	af 92       	push	r10
    2f28:	bf 92       	push	r11
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	ca 1b       	sub	r28, r26
    2f40:	db 0b       	sbc	r29, r27
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	09 94       	ijmp

00002f4e <__epilogue_restores__>:
    2f4e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f50:	39 88       	ldd	r3, Y+17	; 0x11
    2f52:	48 88       	ldd	r4, Y+16	; 0x10
    2f54:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f56:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f58:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f60:	b9 84       	ldd	r11, Y+9	; 0x09
    2f62:	c8 84       	ldd	r12, Y+8	; 0x08
    2f64:	df 80       	ldd	r13, Y+7	; 0x07
    2f66:	ee 80       	ldd	r14, Y+6	; 0x06
    2f68:	fd 80       	ldd	r15, Y+5	; 0x05
    2f6a:	0c 81       	ldd	r16, Y+4	; 0x04
    2f6c:	1b 81       	ldd	r17, Y+3	; 0x03
    2f6e:	aa 81       	ldd	r26, Y+2	; 0x02
    2f70:	b9 81       	ldd	r27, Y+1	; 0x01
    2f72:	ce 0f       	add	r28, r30
    2f74:	d1 1d       	adc	r29, r1
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	ed 01       	movw	r28, r26
    2f82:	08 95       	ret

00002f84 <printf>:
    2f84:	a0 e0       	ldi	r26, 0x00	; 0
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e8 ec       	ldi	r30, 0xC8	; 200
    2f8a:	f7 e1       	ldi	r31, 0x17	; 23
    2f8c:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__prologue_saves__+0x20>
    2f90:	fe 01       	movw	r30, r28
    2f92:	35 96       	adiw	r30, 0x05	; 5
    2f94:	61 91       	ld	r22, Z+
    2f96:	71 91       	ld	r23, Z+
    2f98:	80 91 6e 01 	lds	r24, 0x016E
    2f9c:	90 91 6f 01 	lds	r25, 0x016F
    2fa0:	af 01       	movw	r20, r30
    2fa2:	0e 94 d7 17 	call	0x2fae	; 0x2fae <vfprintf>
    2fa6:	20 96       	adiw	r28, 0x00	; 0
    2fa8:	e2 e0       	ldi	r30, 0x02	; 2
    2faa:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__epilogue_restores__+0x20>

00002fae <vfprintf>:
    2fae:	ab e0       	ldi	r26, 0x0B	; 11
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	ed ed       	ldi	r30, 0xDD	; 221
    2fb4:	f7 e1       	ldi	r31, 0x17	; 23
    2fb6:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__>
    2fba:	3c 01       	movw	r6, r24
    2fbc:	2b 01       	movw	r4, r22
    2fbe:	5a 01       	movw	r10, r20
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	17 82       	std	Z+7, r1	; 0x07
    2fc4:	16 82       	std	Z+6, r1	; 0x06
    2fc6:	83 81       	ldd	r24, Z+3	; 0x03
    2fc8:	81 fd       	sbrc	r24, 1
    2fca:	03 c0       	rjmp	.+6      	; 0x2fd2 <vfprintf+0x24>
    2fcc:	6f ef       	ldi	r22, 0xFF	; 255
    2fce:	7f ef       	ldi	r23, 0xFF	; 255
    2fd0:	c6 c1       	rjmp	.+908    	; 0x335e <vfprintf+0x3b0>
    2fd2:	9a e0       	ldi	r25, 0x0A	; 10
    2fd4:	89 2e       	mov	r8, r25
    2fd6:	1e 01       	movw	r2, r28
    2fd8:	08 94       	sec
    2fda:	21 1c       	adc	r2, r1
    2fdc:	31 1c       	adc	r3, r1
    2fde:	f3 01       	movw	r30, r6
    2fe0:	23 81       	ldd	r18, Z+3	; 0x03
    2fe2:	f2 01       	movw	r30, r4
    2fe4:	23 fd       	sbrc	r18, 3
    2fe6:	85 91       	lpm	r24, Z+
    2fe8:	23 ff       	sbrs	r18, 3
    2fea:	81 91       	ld	r24, Z+
    2fec:	2f 01       	movw	r4, r30
    2fee:	88 23       	and	r24, r24
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <vfprintf+0x46>
    2ff2:	b2 c1       	rjmp	.+868    	; 0x3358 <vfprintf+0x3aa>
    2ff4:	85 32       	cpi	r24, 0x25	; 37
    2ff6:	39 f4       	brne	.+14     	; 0x3006 <vfprintf+0x58>
    2ff8:	23 fd       	sbrc	r18, 3
    2ffa:	85 91       	lpm	r24, Z+
    2ffc:	23 ff       	sbrs	r18, 3
    2ffe:	81 91       	ld	r24, Z+
    3000:	2f 01       	movw	r4, r30
    3002:	85 32       	cpi	r24, 0x25	; 37
    3004:	29 f4       	brne	.+10     	; 0x3010 <vfprintf+0x62>
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	b3 01       	movw	r22, r6
    300a:	0e 94 ca 19 	call	0x3394	; 0x3394 <fputc>
    300e:	e7 cf       	rjmp	.-50     	; 0x2fde <vfprintf+0x30>
    3010:	98 2f       	mov	r25, r24
    3012:	ff 24       	eor	r15, r15
    3014:	ee 24       	eor	r14, r14
    3016:	99 24       	eor	r9, r9
    3018:	ff e1       	ldi	r31, 0x1F	; 31
    301a:	ff 15       	cp	r31, r15
    301c:	d0 f0       	brcs	.+52     	; 0x3052 <vfprintf+0xa4>
    301e:	9b 32       	cpi	r25, 0x2B	; 43
    3020:	69 f0       	breq	.+26     	; 0x303c <vfprintf+0x8e>
    3022:	9c 32       	cpi	r25, 0x2C	; 44
    3024:	28 f4       	brcc	.+10     	; 0x3030 <vfprintf+0x82>
    3026:	90 32       	cpi	r25, 0x20	; 32
    3028:	59 f0       	breq	.+22     	; 0x3040 <vfprintf+0x92>
    302a:	93 32       	cpi	r25, 0x23	; 35
    302c:	91 f4       	brne	.+36     	; 0x3052 <vfprintf+0xa4>
    302e:	0e c0       	rjmp	.+28     	; 0x304c <vfprintf+0x9e>
    3030:	9d 32       	cpi	r25, 0x2D	; 45
    3032:	49 f0       	breq	.+18     	; 0x3046 <vfprintf+0x98>
    3034:	90 33       	cpi	r25, 0x30	; 48
    3036:	69 f4       	brne	.+26     	; 0x3052 <vfprintf+0xa4>
    3038:	41 e0       	ldi	r20, 0x01	; 1
    303a:	24 c0       	rjmp	.+72     	; 0x3084 <vfprintf+0xd6>
    303c:	52 e0       	ldi	r21, 0x02	; 2
    303e:	f5 2a       	or	r15, r21
    3040:	84 e0       	ldi	r24, 0x04	; 4
    3042:	f8 2a       	or	r15, r24
    3044:	28 c0       	rjmp	.+80     	; 0x3096 <vfprintf+0xe8>
    3046:	98 e0       	ldi	r25, 0x08	; 8
    3048:	f9 2a       	or	r15, r25
    304a:	25 c0       	rjmp	.+74     	; 0x3096 <vfprintf+0xe8>
    304c:	e0 e1       	ldi	r30, 0x10	; 16
    304e:	fe 2a       	or	r15, r30
    3050:	22 c0       	rjmp	.+68     	; 0x3096 <vfprintf+0xe8>
    3052:	f7 fc       	sbrc	r15, 7
    3054:	29 c0       	rjmp	.+82     	; 0x30a8 <vfprintf+0xfa>
    3056:	89 2f       	mov	r24, r25
    3058:	80 53       	subi	r24, 0x30	; 48
    305a:	8a 30       	cpi	r24, 0x0A	; 10
    305c:	70 f4       	brcc	.+28     	; 0x307a <vfprintf+0xcc>
    305e:	f6 fe       	sbrs	r15, 6
    3060:	05 c0       	rjmp	.+10     	; 0x306c <vfprintf+0xbe>
    3062:	98 9c       	mul	r9, r8
    3064:	90 2c       	mov	r9, r0
    3066:	11 24       	eor	r1, r1
    3068:	98 0e       	add	r9, r24
    306a:	15 c0       	rjmp	.+42     	; 0x3096 <vfprintf+0xe8>
    306c:	e8 9c       	mul	r14, r8
    306e:	e0 2c       	mov	r14, r0
    3070:	11 24       	eor	r1, r1
    3072:	e8 0e       	add	r14, r24
    3074:	f0 e2       	ldi	r31, 0x20	; 32
    3076:	ff 2a       	or	r15, r31
    3078:	0e c0       	rjmp	.+28     	; 0x3096 <vfprintf+0xe8>
    307a:	9e 32       	cpi	r25, 0x2E	; 46
    307c:	29 f4       	brne	.+10     	; 0x3088 <vfprintf+0xda>
    307e:	f6 fc       	sbrc	r15, 6
    3080:	6b c1       	rjmp	.+726    	; 0x3358 <vfprintf+0x3aa>
    3082:	40 e4       	ldi	r20, 0x40	; 64
    3084:	f4 2a       	or	r15, r20
    3086:	07 c0       	rjmp	.+14     	; 0x3096 <vfprintf+0xe8>
    3088:	9c 36       	cpi	r25, 0x6C	; 108
    308a:	19 f4       	brne	.+6      	; 0x3092 <vfprintf+0xe4>
    308c:	50 e8       	ldi	r21, 0x80	; 128
    308e:	f5 2a       	or	r15, r21
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <vfprintf+0xe8>
    3092:	98 36       	cpi	r25, 0x68	; 104
    3094:	49 f4       	brne	.+18     	; 0x30a8 <vfprintf+0xfa>
    3096:	f2 01       	movw	r30, r4
    3098:	23 fd       	sbrc	r18, 3
    309a:	95 91       	lpm	r25, Z+
    309c:	23 ff       	sbrs	r18, 3
    309e:	91 91       	ld	r25, Z+
    30a0:	2f 01       	movw	r4, r30
    30a2:	99 23       	and	r25, r25
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <vfprintf+0xfa>
    30a6:	b8 cf       	rjmp	.-144    	; 0x3018 <vfprintf+0x6a>
    30a8:	89 2f       	mov	r24, r25
    30aa:	85 54       	subi	r24, 0x45	; 69
    30ac:	83 30       	cpi	r24, 0x03	; 3
    30ae:	18 f0       	brcs	.+6      	; 0x30b6 <vfprintf+0x108>
    30b0:	80 52       	subi	r24, 0x20	; 32
    30b2:	83 30       	cpi	r24, 0x03	; 3
    30b4:	38 f4       	brcc	.+14     	; 0x30c4 <vfprintf+0x116>
    30b6:	44 e0       	ldi	r20, 0x04	; 4
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	a4 0e       	add	r10, r20
    30bc:	b5 1e       	adc	r11, r21
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	59 83       	std	Y+1, r21	; 0x01
    30c2:	0f c0       	rjmp	.+30     	; 0x30e2 <vfprintf+0x134>
    30c4:	93 36       	cpi	r25, 0x63	; 99
    30c6:	31 f0       	breq	.+12     	; 0x30d4 <vfprintf+0x126>
    30c8:	93 37       	cpi	r25, 0x73	; 115
    30ca:	79 f0       	breq	.+30     	; 0x30ea <vfprintf+0x13c>
    30cc:	93 35       	cpi	r25, 0x53	; 83
    30ce:	09 f0       	breq	.+2      	; 0x30d2 <vfprintf+0x124>
    30d0:	56 c0       	rjmp	.+172    	; 0x317e <vfprintf+0x1d0>
    30d2:	20 c0       	rjmp	.+64     	; 0x3114 <vfprintf+0x166>
    30d4:	f5 01       	movw	r30, r10
    30d6:	80 81       	ld	r24, Z
    30d8:	89 83       	std	Y+1, r24	; 0x01
    30da:	42 e0       	ldi	r20, 0x02	; 2
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	a4 0e       	add	r10, r20
    30e0:	b5 1e       	adc	r11, r21
    30e2:	61 01       	movw	r12, r2
    30e4:	01 e0       	ldi	r16, 0x01	; 1
    30e6:	10 e0       	ldi	r17, 0x00	; 0
    30e8:	12 c0       	rjmp	.+36     	; 0x310e <vfprintf+0x160>
    30ea:	f5 01       	movw	r30, r10
    30ec:	c0 80       	ld	r12, Z
    30ee:	d1 80       	ldd	r13, Z+1	; 0x01
    30f0:	f6 fc       	sbrc	r15, 6
    30f2:	03 c0       	rjmp	.+6      	; 0x30fa <vfprintf+0x14c>
    30f4:	6f ef       	ldi	r22, 0xFF	; 255
    30f6:	7f ef       	ldi	r23, 0xFF	; 255
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <vfprintf+0x150>
    30fa:	69 2d       	mov	r22, r9
    30fc:	70 e0       	ldi	r23, 0x00	; 0
    30fe:	42 e0       	ldi	r20, 0x02	; 2
    3100:	50 e0       	ldi	r21, 0x00	; 0
    3102:	a4 0e       	add	r10, r20
    3104:	b5 1e       	adc	r11, r21
    3106:	c6 01       	movw	r24, r12
    3108:	0e 94 bf 19 	call	0x337e	; 0x337e <strnlen>
    310c:	8c 01       	movw	r16, r24
    310e:	5f e7       	ldi	r21, 0x7F	; 127
    3110:	f5 22       	and	r15, r21
    3112:	14 c0       	rjmp	.+40     	; 0x313c <vfprintf+0x18e>
    3114:	f5 01       	movw	r30, r10
    3116:	c0 80       	ld	r12, Z
    3118:	d1 80       	ldd	r13, Z+1	; 0x01
    311a:	f6 fc       	sbrc	r15, 6
    311c:	03 c0       	rjmp	.+6      	; 0x3124 <vfprintf+0x176>
    311e:	6f ef       	ldi	r22, 0xFF	; 255
    3120:	7f ef       	ldi	r23, 0xFF	; 255
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <vfprintf+0x17a>
    3124:	69 2d       	mov	r22, r9
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	42 e0       	ldi	r20, 0x02	; 2
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	a4 0e       	add	r10, r20
    312e:	b5 1e       	adc	r11, r21
    3130:	c6 01       	movw	r24, r12
    3132:	0e 94 b4 19 	call	0x3368	; 0x3368 <strnlen_P>
    3136:	8c 01       	movw	r16, r24
    3138:	50 e8       	ldi	r21, 0x80	; 128
    313a:	f5 2a       	or	r15, r21
    313c:	f3 fe       	sbrs	r15, 3
    313e:	07 c0       	rjmp	.+14     	; 0x314e <vfprintf+0x1a0>
    3140:	1a c0       	rjmp	.+52     	; 0x3176 <vfprintf+0x1c8>
    3142:	80 e2       	ldi	r24, 0x20	; 32
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	b3 01       	movw	r22, r6
    3148:	0e 94 ca 19 	call	0x3394	; 0x3394 <fputc>
    314c:	ea 94       	dec	r14
    314e:	8e 2d       	mov	r24, r14
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	08 17       	cp	r16, r24
    3154:	19 07       	cpc	r17, r25
    3156:	a8 f3       	brcs	.-22     	; 0x3142 <vfprintf+0x194>
    3158:	0e c0       	rjmp	.+28     	; 0x3176 <vfprintf+0x1c8>
    315a:	f6 01       	movw	r30, r12
    315c:	f7 fc       	sbrc	r15, 7
    315e:	85 91       	lpm	r24, Z+
    3160:	f7 fe       	sbrs	r15, 7
    3162:	81 91       	ld	r24, Z+
    3164:	6f 01       	movw	r12, r30
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	b3 01       	movw	r22, r6
    316a:	0e 94 ca 19 	call	0x3394	; 0x3394 <fputc>
    316e:	e1 10       	cpse	r14, r1
    3170:	ea 94       	dec	r14
    3172:	01 50       	subi	r16, 0x01	; 1
    3174:	10 40       	sbci	r17, 0x00	; 0
    3176:	01 15       	cp	r16, r1
    3178:	11 05       	cpc	r17, r1
    317a:	79 f7       	brne	.-34     	; 0x315a <vfprintf+0x1ac>
    317c:	ea c0       	rjmp	.+468    	; 0x3352 <vfprintf+0x3a4>
    317e:	94 36       	cpi	r25, 0x64	; 100
    3180:	11 f0       	breq	.+4      	; 0x3186 <vfprintf+0x1d8>
    3182:	99 36       	cpi	r25, 0x69	; 105
    3184:	69 f5       	brne	.+90     	; 0x31e0 <vfprintf+0x232>
    3186:	f7 fe       	sbrs	r15, 7
    3188:	08 c0       	rjmp	.+16     	; 0x319a <vfprintf+0x1ec>
    318a:	f5 01       	movw	r30, r10
    318c:	20 81       	ld	r18, Z
    318e:	31 81       	ldd	r19, Z+1	; 0x01
    3190:	42 81       	ldd	r20, Z+2	; 0x02
    3192:	53 81       	ldd	r21, Z+3	; 0x03
    3194:	84 e0       	ldi	r24, 0x04	; 4
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	0a c0       	rjmp	.+20     	; 0x31ae <vfprintf+0x200>
    319a:	f5 01       	movw	r30, r10
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	9c 01       	movw	r18, r24
    31a2:	44 27       	eor	r20, r20
    31a4:	37 fd       	sbrc	r19, 7
    31a6:	40 95       	com	r20
    31a8:	54 2f       	mov	r21, r20
    31aa:	82 e0       	ldi	r24, 0x02	; 2
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	a8 0e       	add	r10, r24
    31b0:	b9 1e       	adc	r11, r25
    31b2:	9f e6       	ldi	r25, 0x6F	; 111
    31b4:	f9 22       	and	r15, r25
    31b6:	57 ff       	sbrs	r21, 7
    31b8:	09 c0       	rjmp	.+18     	; 0x31cc <vfprintf+0x21e>
    31ba:	50 95       	com	r21
    31bc:	40 95       	com	r20
    31be:	30 95       	com	r19
    31c0:	21 95       	neg	r18
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
    31c4:	4f 4f       	sbci	r20, 0xFF	; 255
    31c6:	5f 4f       	sbci	r21, 0xFF	; 255
    31c8:	e0 e8       	ldi	r30, 0x80	; 128
    31ca:	fe 2a       	or	r15, r30
    31cc:	ca 01       	movw	r24, r20
    31ce:	b9 01       	movw	r22, r18
    31d0:	a1 01       	movw	r20, r2
    31d2:	2a e0       	ldi	r18, 0x0A	; 10
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__ultoa_invert>
    31da:	d8 2e       	mov	r13, r24
    31dc:	d2 18       	sub	r13, r2
    31de:	40 c0       	rjmp	.+128    	; 0x3260 <vfprintf+0x2b2>
    31e0:	95 37       	cpi	r25, 0x75	; 117
    31e2:	29 f4       	brne	.+10     	; 0x31ee <vfprintf+0x240>
    31e4:	1f 2d       	mov	r17, r15
    31e6:	1f 7e       	andi	r17, 0xEF	; 239
    31e8:	2a e0       	ldi	r18, 0x0A	; 10
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	1d c0       	rjmp	.+58     	; 0x3228 <vfprintf+0x27a>
    31ee:	1f 2d       	mov	r17, r15
    31f0:	19 7f       	andi	r17, 0xF9	; 249
    31f2:	9f 36       	cpi	r25, 0x6F	; 111
    31f4:	61 f0       	breq	.+24     	; 0x320e <vfprintf+0x260>
    31f6:	90 37       	cpi	r25, 0x70	; 112
    31f8:	20 f4       	brcc	.+8      	; 0x3202 <vfprintf+0x254>
    31fa:	98 35       	cpi	r25, 0x58	; 88
    31fc:	09 f0       	breq	.+2      	; 0x3200 <vfprintf+0x252>
    31fe:	ac c0       	rjmp	.+344    	; 0x3358 <vfprintf+0x3aa>
    3200:	0f c0       	rjmp	.+30     	; 0x3220 <vfprintf+0x272>
    3202:	90 37       	cpi	r25, 0x70	; 112
    3204:	39 f0       	breq	.+14     	; 0x3214 <vfprintf+0x266>
    3206:	98 37       	cpi	r25, 0x78	; 120
    3208:	09 f0       	breq	.+2      	; 0x320c <vfprintf+0x25e>
    320a:	a6 c0       	rjmp	.+332    	; 0x3358 <vfprintf+0x3aa>
    320c:	04 c0       	rjmp	.+8      	; 0x3216 <vfprintf+0x268>
    320e:	28 e0       	ldi	r18, 0x08	; 8
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	0a c0       	rjmp	.+20     	; 0x3228 <vfprintf+0x27a>
    3214:	10 61       	ori	r17, 0x10	; 16
    3216:	14 fd       	sbrc	r17, 4
    3218:	14 60       	ori	r17, 0x04	; 4
    321a:	20 e1       	ldi	r18, 0x10	; 16
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	04 c0       	rjmp	.+8      	; 0x3228 <vfprintf+0x27a>
    3220:	14 fd       	sbrc	r17, 4
    3222:	16 60       	ori	r17, 0x06	; 6
    3224:	20 e1       	ldi	r18, 0x10	; 16
    3226:	32 e0       	ldi	r19, 0x02	; 2
    3228:	17 ff       	sbrs	r17, 7
    322a:	08 c0       	rjmp	.+16     	; 0x323c <vfprintf+0x28e>
    322c:	f5 01       	movw	r30, r10
    322e:	60 81       	ld	r22, Z
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	44 e0       	ldi	r20, 0x04	; 4
    3238:	50 e0       	ldi	r21, 0x00	; 0
    323a:	08 c0       	rjmp	.+16     	; 0x324c <vfprintf+0x29e>
    323c:	f5 01       	movw	r30, r10
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	bc 01       	movw	r22, r24
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	42 e0       	ldi	r20, 0x02	; 2
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	a4 0e       	add	r10, r20
    324e:	b5 1e       	adc	r11, r21
    3250:	a1 01       	movw	r20, r2
    3252:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__ultoa_invert>
    3256:	d8 2e       	mov	r13, r24
    3258:	d2 18       	sub	r13, r2
    325a:	8f e7       	ldi	r24, 0x7F	; 127
    325c:	f8 2e       	mov	r15, r24
    325e:	f1 22       	and	r15, r17
    3260:	f6 fe       	sbrs	r15, 6
    3262:	0b c0       	rjmp	.+22     	; 0x327a <vfprintf+0x2cc>
    3264:	5e ef       	ldi	r21, 0xFE	; 254
    3266:	f5 22       	and	r15, r21
    3268:	d9 14       	cp	r13, r9
    326a:	38 f4       	brcc	.+14     	; 0x327a <vfprintf+0x2cc>
    326c:	f4 fe       	sbrs	r15, 4
    326e:	07 c0       	rjmp	.+14     	; 0x327e <vfprintf+0x2d0>
    3270:	f2 fc       	sbrc	r15, 2
    3272:	05 c0       	rjmp	.+10     	; 0x327e <vfprintf+0x2d0>
    3274:	8f ee       	ldi	r24, 0xEF	; 239
    3276:	f8 22       	and	r15, r24
    3278:	02 c0       	rjmp	.+4      	; 0x327e <vfprintf+0x2d0>
    327a:	1d 2d       	mov	r17, r13
    327c:	01 c0       	rjmp	.+2      	; 0x3280 <vfprintf+0x2d2>
    327e:	19 2d       	mov	r17, r9
    3280:	f4 fe       	sbrs	r15, 4
    3282:	0d c0       	rjmp	.+26     	; 0x329e <vfprintf+0x2f0>
    3284:	fe 01       	movw	r30, r28
    3286:	ed 0d       	add	r30, r13
    3288:	f1 1d       	adc	r31, r1
    328a:	80 81       	ld	r24, Z
    328c:	80 33       	cpi	r24, 0x30	; 48
    328e:	19 f4       	brne	.+6      	; 0x3296 <vfprintf+0x2e8>
    3290:	99 ee       	ldi	r25, 0xE9	; 233
    3292:	f9 22       	and	r15, r25
    3294:	08 c0       	rjmp	.+16     	; 0x32a6 <vfprintf+0x2f8>
    3296:	1f 5f       	subi	r17, 0xFF	; 255
    3298:	f2 fe       	sbrs	r15, 2
    329a:	05 c0       	rjmp	.+10     	; 0x32a6 <vfprintf+0x2f8>
    329c:	03 c0       	rjmp	.+6      	; 0x32a4 <vfprintf+0x2f6>
    329e:	8f 2d       	mov	r24, r15
    32a0:	86 78       	andi	r24, 0x86	; 134
    32a2:	09 f0       	breq	.+2      	; 0x32a6 <vfprintf+0x2f8>
    32a4:	1f 5f       	subi	r17, 0xFF	; 255
    32a6:	0f 2d       	mov	r16, r15
    32a8:	f3 fc       	sbrc	r15, 3
    32aa:	14 c0       	rjmp	.+40     	; 0x32d4 <vfprintf+0x326>
    32ac:	f0 fe       	sbrs	r15, 0
    32ae:	0f c0       	rjmp	.+30     	; 0x32ce <vfprintf+0x320>
    32b0:	1e 15       	cp	r17, r14
    32b2:	10 f0       	brcs	.+4      	; 0x32b8 <vfprintf+0x30a>
    32b4:	9d 2c       	mov	r9, r13
    32b6:	0b c0       	rjmp	.+22     	; 0x32ce <vfprintf+0x320>
    32b8:	9d 2c       	mov	r9, r13
    32ba:	9e 0c       	add	r9, r14
    32bc:	91 1a       	sub	r9, r17
    32be:	1e 2d       	mov	r17, r14
    32c0:	06 c0       	rjmp	.+12     	; 0x32ce <vfprintf+0x320>
    32c2:	80 e2       	ldi	r24, 0x20	; 32
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	b3 01       	movw	r22, r6
    32c8:	0e 94 ca 19 	call	0x3394	; 0x3394 <fputc>
    32cc:	1f 5f       	subi	r17, 0xFF	; 255
    32ce:	1e 15       	cp	r17, r14
    32d0:	c0 f3       	brcs	.-16     	; 0x32c2 <vfprintf+0x314>
    32d2:	04 c0       	rjmp	.+8      	; 0x32dc <vfprintf+0x32e>
    32d4:	1e 15       	cp	r17, r14
    32d6:	10 f4       	brcc	.+4      	; 0x32dc <vfprintf+0x32e>
    32d8:	e1 1a       	sub	r14, r17
    32da:	01 c0       	rjmp	.+2      	; 0x32de <vfprintf+0x330>
    32dc:	ee 24       	eor	r14, r14
    32de:	04 ff       	sbrs	r16, 4
    32e0:	0f c0       	rjmp	.+30     	; 0x3300 <vfprintf+0x352>
    32e2:	80 e3       	ldi	r24, 0x30	; 48
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	b3 01       	movw	r22, r6
    32e8:	0e 94 ca 19 	call	0x3394	; 0x3394 <fputc>
    32ec:	02 ff       	sbrs	r16, 2
    32ee:	1d c0       	rjmp	.+58     	; 0x332a <vfprintf+0x37c>
    32f0:	01 fd       	sbrc	r16, 1
    32f2:	03 c0       	rjmp	.+6      	; 0x32fa <vfprintf+0x34c>
    32f4:	88 e7       	ldi	r24, 0x78	; 120
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e c0       	rjmp	.+28     	; 0x3316 <vfprintf+0x368>
    32fa:	88 e5       	ldi	r24, 0x58	; 88
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0b c0       	rjmp	.+22     	; 0x3316 <vfprintf+0x368>
    3300:	80 2f       	mov	r24, r16
    3302:	86 78       	andi	r24, 0x86	; 134
    3304:	91 f0       	breq	.+36     	; 0x332a <vfprintf+0x37c>
    3306:	01 ff       	sbrs	r16, 1
    3308:	02 c0       	rjmp	.+4      	; 0x330e <vfprintf+0x360>
    330a:	8b e2       	ldi	r24, 0x2B	; 43
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <vfprintf+0x362>
    330e:	80 e2       	ldi	r24, 0x20	; 32
    3310:	f7 fc       	sbrc	r15, 7
    3312:	8d e2       	ldi	r24, 0x2D	; 45
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	b3 01       	movw	r22, r6
    3318:	0e 94 ca 19 	call	0x3394	; 0x3394 <fputc>
    331c:	06 c0       	rjmp	.+12     	; 0x332a <vfprintf+0x37c>
    331e:	80 e3       	ldi	r24, 0x30	; 48
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	b3 01       	movw	r22, r6
    3324:	0e 94 ca 19 	call	0x3394	; 0x3394 <fputc>
    3328:	9a 94       	dec	r9
    332a:	d9 14       	cp	r13, r9
    332c:	c0 f3       	brcs	.-16     	; 0x331e <vfprintf+0x370>
    332e:	da 94       	dec	r13
    3330:	f1 01       	movw	r30, r2
    3332:	ed 0d       	add	r30, r13
    3334:	f1 1d       	adc	r31, r1
    3336:	80 81       	ld	r24, Z
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	b3 01       	movw	r22, r6
    333c:	0e 94 ca 19 	call	0x3394	; 0x3394 <fputc>
    3340:	dd 20       	and	r13, r13
    3342:	a9 f7       	brne	.-22     	; 0x332e <vfprintf+0x380>
    3344:	06 c0       	rjmp	.+12     	; 0x3352 <vfprintf+0x3a4>
    3346:	80 e2       	ldi	r24, 0x20	; 32
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	b3 01       	movw	r22, r6
    334c:	0e 94 ca 19 	call	0x3394	; 0x3394 <fputc>
    3350:	ea 94       	dec	r14
    3352:	ee 20       	and	r14, r14
    3354:	c1 f7       	brne	.-16     	; 0x3346 <vfprintf+0x398>
    3356:	43 ce       	rjmp	.-890    	; 0x2fde <vfprintf+0x30>
    3358:	f3 01       	movw	r30, r6
    335a:	66 81       	ldd	r22, Z+6	; 0x06
    335c:	77 81       	ldd	r23, Z+7	; 0x07
    335e:	cb 01       	movw	r24, r22
    3360:	2b 96       	adiw	r28, 0x0b	; 11
    3362:	e2 e1       	ldi	r30, 0x12	; 18
    3364:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__>

00003368 <strnlen_P>:
    3368:	fc 01       	movw	r30, r24
    336a:	05 90       	lpm	r0, Z+
    336c:	61 50       	subi	r22, 0x01	; 1
    336e:	70 40       	sbci	r23, 0x00	; 0
    3370:	01 10       	cpse	r0, r1
    3372:	d8 f7       	brcc	.-10     	; 0x336a <strnlen_P+0x2>
    3374:	80 95       	com	r24
    3376:	90 95       	com	r25
    3378:	8e 0f       	add	r24, r30
    337a:	9f 1f       	adc	r25, r31
    337c:	08 95       	ret

0000337e <strnlen>:
    337e:	fc 01       	movw	r30, r24
    3380:	61 50       	subi	r22, 0x01	; 1
    3382:	70 40       	sbci	r23, 0x00	; 0
    3384:	01 90       	ld	r0, Z+
    3386:	01 10       	cpse	r0, r1
    3388:	d8 f7       	brcc	.-10     	; 0x3380 <strnlen+0x2>
    338a:	80 95       	com	r24
    338c:	90 95       	com	r25
    338e:	8e 0f       	add	r24, r30
    3390:	9f 1f       	adc	r25, r31
    3392:	08 95       	ret

00003394 <fputc>:
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
    339c:	8c 01       	movw	r16, r24
    339e:	eb 01       	movw	r28, r22
    33a0:	8b 81       	ldd	r24, Y+3	; 0x03
    33a2:	81 ff       	sbrs	r24, 1
    33a4:	1b c0       	rjmp	.+54     	; 0x33dc <fputc+0x48>
    33a6:	82 ff       	sbrs	r24, 2
    33a8:	0d c0       	rjmp	.+26     	; 0x33c4 <fputc+0x30>
    33aa:	2e 81       	ldd	r18, Y+6	; 0x06
    33ac:	3f 81       	ldd	r19, Y+7	; 0x07
    33ae:	8c 81       	ldd	r24, Y+4	; 0x04
    33b0:	9d 81       	ldd	r25, Y+5	; 0x05
    33b2:	28 17       	cp	r18, r24
    33b4:	39 07       	cpc	r19, r25
    33b6:	64 f4       	brge	.+24     	; 0x33d0 <fputc+0x3c>
    33b8:	e8 81       	ld	r30, Y
    33ba:	f9 81       	ldd	r31, Y+1	; 0x01
    33bc:	01 93       	st	Z+, r16
    33be:	f9 83       	std	Y+1, r31	; 0x01
    33c0:	e8 83       	st	Y, r30
    33c2:	06 c0       	rjmp	.+12     	; 0x33d0 <fputc+0x3c>
    33c4:	e8 85       	ldd	r30, Y+8	; 0x08
    33c6:	f9 85       	ldd	r31, Y+9	; 0x09
    33c8:	80 2f       	mov	r24, r16
    33ca:	09 95       	icall
    33cc:	89 2b       	or	r24, r25
    33ce:	31 f4       	brne	.+12     	; 0x33dc <fputc+0x48>
    33d0:	8e 81       	ldd	r24, Y+6	; 0x06
    33d2:	9f 81       	ldd	r25, Y+7	; 0x07
    33d4:	01 96       	adiw	r24, 0x01	; 1
    33d6:	9f 83       	std	Y+7, r25	; 0x07
    33d8:	8e 83       	std	Y+6, r24	; 0x06
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <fputc+0x4c>
    33dc:	0f ef       	ldi	r16, 0xFF	; 255
    33de:	1f ef       	ldi	r17, 0xFF	; 255
    33e0:	c8 01       	movw	r24, r16
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	1f 91       	pop	r17
    33e8:	0f 91       	pop	r16
    33ea:	08 95       	ret

000033ec <__ultoa_invert>:
    33ec:	fa 01       	movw	r30, r20
    33ee:	aa 27       	eor	r26, r26
    33f0:	28 30       	cpi	r18, 0x08	; 8
    33f2:	51 f1       	breq	.+84     	; 0x3448 <__ultoa_invert+0x5c>
    33f4:	20 31       	cpi	r18, 0x10	; 16
    33f6:	81 f1       	breq	.+96     	; 0x3458 <__ultoa_invert+0x6c>
    33f8:	e8 94       	clt
    33fa:	6f 93       	push	r22
    33fc:	6e 7f       	andi	r22, 0xFE	; 254
    33fe:	6e 5f       	subi	r22, 0xFE	; 254
    3400:	7f 4f       	sbci	r23, 0xFF	; 255
    3402:	8f 4f       	sbci	r24, 0xFF	; 255
    3404:	9f 4f       	sbci	r25, 0xFF	; 255
    3406:	af 4f       	sbci	r26, 0xFF	; 255
    3408:	b1 e0       	ldi	r27, 0x01	; 1
    340a:	3e d0       	rcall	.+124    	; 0x3488 <__ultoa_invert+0x9c>
    340c:	b4 e0       	ldi	r27, 0x04	; 4
    340e:	3c d0       	rcall	.+120    	; 0x3488 <__ultoa_invert+0x9c>
    3410:	67 0f       	add	r22, r23
    3412:	78 1f       	adc	r23, r24
    3414:	89 1f       	adc	r24, r25
    3416:	9a 1f       	adc	r25, r26
    3418:	a1 1d       	adc	r26, r1
    341a:	68 0f       	add	r22, r24
    341c:	79 1f       	adc	r23, r25
    341e:	8a 1f       	adc	r24, r26
    3420:	91 1d       	adc	r25, r1
    3422:	a1 1d       	adc	r26, r1
    3424:	6a 0f       	add	r22, r26
    3426:	71 1d       	adc	r23, r1
    3428:	81 1d       	adc	r24, r1
    342a:	91 1d       	adc	r25, r1
    342c:	a1 1d       	adc	r26, r1
    342e:	20 d0       	rcall	.+64     	; 0x3470 <__ultoa_invert+0x84>
    3430:	09 f4       	brne	.+2      	; 0x3434 <__ultoa_invert+0x48>
    3432:	68 94       	set
    3434:	3f 91       	pop	r19
    3436:	2a e0       	ldi	r18, 0x0A	; 10
    3438:	26 9f       	mul	r18, r22
    343a:	11 24       	eor	r1, r1
    343c:	30 19       	sub	r19, r0
    343e:	30 5d       	subi	r19, 0xD0	; 208
    3440:	31 93       	st	Z+, r19
    3442:	de f6       	brtc	.-74     	; 0x33fa <__ultoa_invert+0xe>
    3444:	cf 01       	movw	r24, r30
    3446:	08 95       	ret
    3448:	46 2f       	mov	r20, r22
    344a:	47 70       	andi	r20, 0x07	; 7
    344c:	40 5d       	subi	r20, 0xD0	; 208
    344e:	41 93       	st	Z+, r20
    3450:	b3 e0       	ldi	r27, 0x03	; 3
    3452:	0f d0       	rcall	.+30     	; 0x3472 <__ultoa_invert+0x86>
    3454:	c9 f7       	brne	.-14     	; 0x3448 <__ultoa_invert+0x5c>
    3456:	f6 cf       	rjmp	.-20     	; 0x3444 <__ultoa_invert+0x58>
    3458:	46 2f       	mov	r20, r22
    345a:	4f 70       	andi	r20, 0x0F	; 15
    345c:	40 5d       	subi	r20, 0xD0	; 208
    345e:	4a 33       	cpi	r20, 0x3A	; 58
    3460:	18 f0       	brcs	.+6      	; 0x3468 <__ultoa_invert+0x7c>
    3462:	49 5d       	subi	r20, 0xD9	; 217
    3464:	31 fd       	sbrc	r19, 1
    3466:	40 52       	subi	r20, 0x20	; 32
    3468:	41 93       	st	Z+, r20
    346a:	02 d0       	rcall	.+4      	; 0x3470 <__ultoa_invert+0x84>
    346c:	a9 f7       	brne	.-22     	; 0x3458 <__ultoa_invert+0x6c>
    346e:	ea cf       	rjmp	.-44     	; 0x3444 <__ultoa_invert+0x58>
    3470:	b4 e0       	ldi	r27, 0x04	; 4
    3472:	a6 95       	lsr	r26
    3474:	97 95       	ror	r25
    3476:	87 95       	ror	r24
    3478:	77 95       	ror	r23
    347a:	67 95       	ror	r22
    347c:	ba 95       	dec	r27
    347e:	c9 f7       	brne	.-14     	; 0x3472 <__ultoa_invert+0x86>
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	61 05       	cpc	r22, r1
    3484:	71 05       	cpc	r23, r1
    3486:	08 95       	ret
    3488:	9b 01       	movw	r18, r22
    348a:	ac 01       	movw	r20, r24
    348c:	0a 2e       	mov	r0, r26
    348e:	06 94       	lsr	r0
    3490:	57 95       	ror	r21
    3492:	47 95       	ror	r20
    3494:	37 95       	ror	r19
    3496:	27 95       	ror	r18
    3498:	ba 95       	dec	r27
    349a:	c9 f7       	brne	.-14     	; 0x348e <__ultoa_invert+0xa2>
    349c:	62 0f       	add	r22, r18
    349e:	73 1f       	adc	r23, r19
    34a0:	84 1f       	adc	r24, r20
    34a2:	95 1f       	adc	r25, r21
    34a4:	a0 1d       	adc	r26, r0
    34a6:	08 95       	ret

000034a8 <_exit>:
    34a8:	f8 94       	cli

000034aa <__stop_program>:
    34aa:	ff cf       	rjmp	.-2      	; 0x34aa <__stop_program>
